/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_SimplygonSDK(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_SimplygonSDK(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_SimplygonSDK(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "Logger.h"
#include "SimplygonSDK.h"
#include "SimplygonSDKLoader.h"

using namespace SimplygonSDK; 

namespace SimplygonSDK {


	/// Adds a location to look for the DLL in. This method must be called before calling Initialize()
	extern void AddSearchPath( const char *search_path );

	/// Clears the additional search locations to look for the DLL in.
	extern void ClearAdditionalSearchPaths();

	/// Loads and initializes the SDK
	extern int Initialize(LPCTSTR SDKPath  , LPCTSTR LicenseDataText  );

	/// Deinitializes the SDK, releases the DLL and all allocated memory
	extern void Deinitialize();

	/// Retrieves the error string of the error code.
	extern LPCTSTR GetError( int error_code );

	/// Retrieves the license system log, for when initializing
	extern int PollLog( LPTSTR dest , int max_len_dest );

	/// Run the license wizard process, to ease license integration
	extern int RunLicenseWizard( LPCTSTR batch_file );

	extern ISimplygonSDK *GetSDK();
#if defined(SWIGPYTHON)

	class error_handler : public SimplygonSDK::rerrorhandler
	{
	public:
		virtual void HandleError(
			IObject *object,
			const char *interfacename,
			const char *methodname,
			rid errortype,
			const char *errortext
			)
		{
			char tmp[1024];

			sprintf_s(tmp, 1024, "A SimplygonSDK error occured!\n");
			sprintf_s(tmp, 1024, "%s\tInterface: %s (%p)\n", tmp, interfacename, object);
			sprintf_s(tmp, 1024, "%s\tMethod: %s\n", tmp, methodname);
			sprintf_s(tmp, 1024, "%s\tError Type: %d\n", tmp, errortype);
			sprintf_s(tmp, 1024, "%s\tError Description: %s\n", tmp, errortext);
			PyErr_SetString(PyExc_ValueError,tmp);
		}
	} eh;

	extern void InitErrorhandling()
	{
		GetSDK()->SetErrorHandler(&eh);
	}
}
#endif // defined(SWIGPYTHON)
#if defined(SWIGCSHARP)

	/*class error_handler : public SimplygonSDK::rerrorhandler
	{
	public:
		virtual void HandleError(
			IObject *object,
			const char *interfacename,
			const char *methodname,
			rid errortype,
			const char *errortext
			)
		{
			char tmp[1024];

			sprintf_s(tmp, 1024, "A SimplygonSDK error occured!\n");
			sprintf_s(tmp, 1024, "%s\tInterface: %s (%p)\n", tmp, interfacename, object);
			sprintf_s(tmp, 1024, "%s\tMethod: %s\n", tmp, methodname);
			sprintf_s(tmp, 1024, "%s\tError Type: %d\n", tmp, errortype);
			sprintf_s(tmp, 1024, "%s\tError Description: %s\n", tmp, errortext);
			PyErr_SetString(PyExc_ValueError,tmp);
		}
	} eh;*/

	extern void InitErrorhandling()
	{
		//GetSDK()->SetErrorHandler(&eh);
	}
}
#endif // defined(SWIGCSHARP)


SWIGINTERN SimplygonSDK::CountedPointer< SimplygonSDK::ISceneMesh > SimplygonSDK_CountedPointer_Sl_ISceneNode_Sg__AsSceneMesh(SimplygonSDK::CountedPointer< ISceneNode > *self){
        return CountedPointer<ISceneMesh>(ISceneMesh::SafeCast(*self));
    }
SWIGINTERN SimplygonSDK::CountedPointer< SimplygonSDK::ISceneLodGroup > SimplygonSDK_CountedPointer_Sl_ISceneNode_Sg__AsSceneLodGroup(SimplygonSDK::CountedPointer< ISceneNode > *self){
        return CountedPointer<ISceneLodGroup>(ISceneLodGroup::SafeCast(*self));
    }
SWIGINTERN SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone > SimplygonSDK_CountedPointer_Sl_ISceneNode_Sg__AsSceneBone(SimplygonSDK::CountedPointer< ISceneNode > *self){
        return CountedPointer<ISceneBone>(ISceneBone::SafeCast(*self));
    }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT float SWIGSTDCALL CSharp_REAL_MIN_get() {
  float jresult ;
  SimplygonSDK::real result;
  
  result = (SimplygonSDK::real)(SimplygonSDK::real)SimplygonSDK::REAL_MIN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_REAL_MAX_get() {
  float jresult ;
  SimplygonSDK::real result;
  
  result = (SimplygonSDK::real)(SimplygonSDK::real)SimplygonSDK::REAL_MAX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_robserver_Execute(void * jarg1, void * jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  SimplygonSDK::robserver *arg1 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rid arg3 ;
  void *arg4 = (void *) 0 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::robserver *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (arg1)->Execute(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_robserver(void * jarg1) {
  SimplygonSDK::robserver *arg1 = (SimplygonSDK::robserver *) 0 ;
  
  arg1 = (SimplygonSDK::robserver *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_rerrorhandler_HandleError(void * jarg1, void * jarg2, char * jarg3, char * jarg4, int jarg5, char * jarg6) {
  SimplygonSDK::rerrorhandler *arg1 = (SimplygonSDK::rerrorhandler *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  SimplygonSDK::rid arg5 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::rerrorhandler *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->HandleError(arg2,(char const *)arg3,(char const *)arg4,arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_rerrorhandler(void * jarg1) {
  SimplygonSDK::rerrorhandler *arg1 = (SimplygonSDK::rerrorhandler *) 0 ;
  
  arg1 = (SimplygonSDK::rerrorhandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IData_AddRef(void * jarg1) {
  SimplygonSDK::IData *arg1 = (SimplygonSDK::IData *) 0 ;
  
  arg1 = (SimplygonSDK::IData *)jarg1; 
  (arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IData_Release(void * jarg1) {
  SimplygonSDK::IData *arg1 = (SimplygonSDK::IData *) 0 ;
  
  arg1 = (SimplygonSDK::IData *)jarg1; 
  (arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::IData *arg1 = (SimplygonSDK::IData *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::IData *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::IData *arg1 = (SimplygonSDK::IData *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::IData *)jarg1; 
  result = (unsigned int)((SimplygonSDK::IData const *)arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IData(void * jarg1) {
  SimplygonSDK::IData *arg1 = (SimplygonSDK::IData *) 0 ;
  
  arg1 = (SimplygonSDK::IData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_rstring__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IString *arg1 = (SimplygonSDK::IString *) 0 ;
  SimplygonSDK::rstring *result = 0 ;
  
  arg1 = (SimplygonSDK::IString *)jarg1; 
  result = (SimplygonSDK::rstring *)new SimplygonSDK::rstring(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_rstring__SWIG_1() {
  void * jresult ;
  SimplygonSDK::rstring *result = 0 ;
  
  result = (SimplygonSDK::rstring *)new SimplygonSDK::rstring();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_rstring__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IString > *arg1 = 0 ;
  SimplygonSDK::rstring *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IString > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IString > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::rstring *)new SimplygonSDK::rstring((SimplygonSDK::CountedPointer< SimplygonSDK::IString > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_rstring__SWIG_3(void * jarg1) {
  void * jresult ;
  SimplygonSDK::rstring *arg1 = 0 ;
  SimplygonSDK::rstring *result = 0 ;
  
  arg1 = (SimplygonSDK::rstring *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::rstring const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::rstring *)new SimplygonSDK::rstring((SimplygonSDK::rstring const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_rstring_GetText(void * jarg1) {
  char * jresult ;
  SimplygonSDK::rstring *arg1 = (SimplygonSDK::rstring *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::rstring *)jarg1; 
  result = (SimplygonSDK::rchar *)((SimplygonSDK::rstring const *)arg1)->GetText();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_rstring_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::rstring *arg1 = (SimplygonSDK::rstring *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::rstring *)jarg1; 
  result = (bool)((SimplygonSDK::rstring const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_rstring(void * jarg1) {
  SimplygonSDK::rstring *arg1 = (SimplygonSDK::rstring *) 0 ;
  
  arg1 = (SimplygonSDK::rstring *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_AMBIENT_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_MATERIAL_CHANNEL_AMBIENT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_MATERIAL_CHANNEL_AMBIENT, (const char *)arg1);
    } else {
      SimplygonSDK::SG_MATERIAL_CHANNEL_AMBIENT = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_AMBIENT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_MATERIAL_CHANNEL_AMBIENT;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_DIFFUSE_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_MATERIAL_CHANNEL_DIFFUSE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_MATERIAL_CHANNEL_DIFFUSE, (const char *)arg1);
    } else {
      SimplygonSDK::SG_MATERIAL_CHANNEL_DIFFUSE = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_DIFFUSE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_MATERIAL_CHANNEL_DIFFUSE;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_SPECULAR_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_MATERIAL_CHANNEL_SPECULAR = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_MATERIAL_CHANNEL_SPECULAR, (const char *)arg1);
    } else {
      SimplygonSDK::SG_MATERIAL_CHANNEL_SPECULAR = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_SPECULAR_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_MATERIAL_CHANNEL_SPECULAR;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_OPACITY_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_MATERIAL_CHANNEL_OPACITY = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_MATERIAL_CHANNEL_OPACITY, (const char *)arg1);
    } else {
      SimplygonSDK::SG_MATERIAL_CHANNEL_OPACITY = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_OPACITY_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_MATERIAL_CHANNEL_OPACITY;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_EMISSIVE_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_MATERIAL_CHANNEL_EMISSIVE = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_MATERIAL_CHANNEL_EMISSIVE, (const char *)arg1);
    } else {
      SimplygonSDK::SG_MATERIAL_CHANNEL_EMISSIVE = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_EMISSIVE_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_MATERIAL_CHANNEL_EMISSIVE;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_NORMALS_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_MATERIAL_CHANNEL_NORMALS = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_MATERIAL_CHANNEL_NORMALS, (const char *)arg1);
    } else {
      SimplygonSDK::SG_MATERIAL_CHANNEL_NORMALS = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_NORMALS_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_MATERIAL_CHANNEL_NORMALS;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_GROUPIDS_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_MATERIAL_CHANNEL_GROUPIDS = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_MATERIAL_CHANNEL_GROUPIDS, (const char *)arg1);
    } else {
      SimplygonSDK::SG_MATERIAL_CHANNEL_GROUPIDS = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_GROUPIDS_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_MATERIAL_CHANNEL_GROUPIDS;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_DISPLACEMENT_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_MATERIAL_CHANNEL_DISPLACEMENT = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_MATERIAL_CHANNEL_DISPLACEMENT, (const char *)arg1);
    } else {
      SimplygonSDK::SG_MATERIAL_CHANNEL_DISPLACEMENT = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_DISPLACEMENT_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_MATERIAL_CHANNEL_DISPLACEMENT;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_BASECOLOR_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_MATERIAL_CHANNEL_BASECOLOR = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_MATERIAL_CHANNEL_BASECOLOR, (const char *)arg1);
    } else {
      SimplygonSDK::SG_MATERIAL_CHANNEL_BASECOLOR = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_BASECOLOR_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_MATERIAL_CHANNEL_BASECOLOR;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_ROUGHNESS_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_MATERIAL_CHANNEL_ROUGHNESS = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_MATERIAL_CHANNEL_ROUGHNESS, (const char *)arg1);
    } else {
      SimplygonSDK::SG_MATERIAL_CHANNEL_ROUGHNESS = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_ROUGHNESS_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_MATERIAL_CHANNEL_ROUGHNESS;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_METALLIC_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_MATERIAL_CHANNEL_METALLIC = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_MATERIAL_CHANNEL_METALLIC, (const char *)arg1);
    } else {
      SimplygonSDK::SG_MATERIAL_CHANNEL_METALLIC = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_MATERIAL_CHANNEL_METALLIC_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_MATERIAL_CHANNEL_METALLIC;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_IMAGEDATA_FORMAT_L_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_IMAGEDATA_FORMAT_L = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_IMAGEDATA_FORMAT_L, (const char *)arg1);
    } else {
      SimplygonSDK::SG_IMAGEDATA_FORMAT_L = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_IMAGEDATA_FORMAT_L_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_IMAGEDATA_FORMAT_L;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_IMAGEDATA_FORMAT_RGB_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_IMAGEDATA_FORMAT_RGB = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_IMAGEDATA_FORMAT_RGB, (const char *)arg1);
    } else {
      SimplygonSDK::SG_IMAGEDATA_FORMAT_RGB = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_IMAGEDATA_FORMAT_RGB_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_IMAGEDATA_FORMAT_RGB;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SG_IMAGEDATA_FORMAT_RGBA_set(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  {
    if (arg1) {
      SimplygonSDK::SG_IMAGEDATA_FORMAT_RGBA = (char const *) (new char[strlen((const char *)arg1)+1]);
      strcpy((char *)SimplygonSDK::SG_IMAGEDATA_FORMAT_RGBA, (const char *)arg1);
    } else {
      SimplygonSDK::SG_IMAGEDATA_FORMAT_RGBA = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SG_IMAGEDATA_FORMAT_RGBA_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)SimplygonSDK::SG_IMAGEDATA_FORMAT_RGBA;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SG_NUM_SUPPORTED_TEXTURE_CHANNELS_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(unsigned int)SimplygonSDK::SG_NUM_SUPPORTED_TEXTURE_CHANNELS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SG_NUM_SUPPORTED_COLOR_CHANNELS_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(unsigned int)SimplygonSDK::SG_NUM_SUPPORTED_COLOR_CHANNELS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SG_NUM_SUPPORTED_BONES_PER_VERTEX_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(unsigned int)SimplygonSDK::SG_NUM_SUPPORTED_BONES_PER_VERTEX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SG_NUM_SUPPORTED_MAPPING_LAYERS_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(unsigned int)SimplygonSDK::SG_NUM_SUPPORTED_MAPPING_LAYERS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SG_NUM_SUPPORTED_CUSTOM_NODE_INPUTS_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(unsigned int)SimplygonSDK::SG_NUM_SUPPORTED_CUSTOM_NODE_INPUTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SG_SUPPORTED_CUSTOM_NODE_SHADER_CODE_SIZE_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(unsigned int)SimplygonSDK::SG_SUPPORTED_CUSTOM_NODE_SHADER_CODE_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IObject_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::IObject *arg1 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::IObject *)jarg1; 
  result = (SimplygonSDK::rchar *)(arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IObject_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::IObject *arg1 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::IObject *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)((SimplygonSDK::IObject const *)arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IObject_IsClassA(char * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::rchar *arg1 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::rchar *)jarg1; 
  result = (bool)SimplygonSDK::IObject::IsClassA((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_SafeCast(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IObject *arg1 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IObject *result = 0 ;
  
  arg1 = (SimplygonSDK::IObject *)jarg1; 
  result = (SimplygonSDK::IObject *)SimplygonSDK::IObject::SafeCast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_PrintInfo(void * jarg1) {
  SimplygonSDK::IObject *arg1 = (SimplygonSDK::IObject *) 0 ;
  
  arg1 = (SimplygonSDK::IObject *)jarg1; 
  (arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_AddRef(void * jarg1) {
  SimplygonSDK::IObject *arg1 = (SimplygonSDK::IObject *) 0 ;
  
  arg1 = (SimplygonSDK::IObject *)jarg1; 
  (arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_Release(void * jarg1) {
  SimplygonSDK::IObject *arg1 = (SimplygonSDK::IObject *) 0 ;
  
  arg1 = (SimplygonSDK::IObject *)jarg1; 
  (arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::IObject *arg1 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::IObject *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IObject *arg1 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::IObject *)jarg1; 
  result = (arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IObject_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::IObject *arg1 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::IObject *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IObject_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::IObject *arg1 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::IObject *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IObject_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::IObject *arg1 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::IObject *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IObject(void * jarg1) {
  SimplygonSDK::IObject *arg1 = (SimplygonSDK::IObject *) 0 ;
  
  arg1 = (SimplygonSDK::IObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateStringArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IStringArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateStringArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IStringArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IStringArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateBoolArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IBoolArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateBoolArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IBoolArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IBoolArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateCharArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ICharArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateCharArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ICharArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::ICharArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateDoubleArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IDoubleArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateDoubleArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IDoubleArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IDoubleArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateFloatArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IFloatArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateFloatArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IFloatArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IFloatArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateIntArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IIntArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateIntArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IIntArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IIntArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateLongArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ILongArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateLongArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ILongArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::ILongArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateRcharArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRcharArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateRcharArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRcharArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRcharArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateRealArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateRealArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateRhandleArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRhandleArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateRhandleArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRhandleArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRhandleArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateRidArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateRidArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShortArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShortArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShortArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShortArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShortArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateUnsignedCharArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedCharArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateUnsignedCharArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedCharArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedCharArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateUnsignedIntArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedIntArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateUnsignedIntArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedIntArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedIntArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateUnsignedLongArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedLongArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateUnsignedLongArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedLongArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedLongArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateUnsignedShortArray(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedShortArray > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateUnsignedShortArray();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedShortArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedShortArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateChunkedImageData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IChunkedImageData > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateChunkedImageData();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IChunkedImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IChunkedImageData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateFieldData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateFieldData();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateGeometryData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateGeometryData();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreatePackedGeometryData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IPackedGeometryData > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreatePackedGeometryData();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IPackedGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IPackedGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateImageData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateImageData();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateTable(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITable > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateTable();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ITable >((const SimplygonSDK::CountedPointer< SimplygonSDK::ITable > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateMaterial(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateMaterial();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateMaterialTable(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateMaterialTable();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateMatrix4x4(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateMatrix4x4();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateTransform3(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITransform3 > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateTransform3();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ITransform3 >((const SimplygonSDK::CountedPointer< SimplygonSDK::ITransform3 > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateMappingImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateMappingImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateParameterizer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IParameterizer > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateParameterizer();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IParameterizer >((const SimplygonSDK::CountedPointer< SimplygonSDK::IParameterizer > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateGeometryGroup(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryGroup > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateGeometryGroup();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryGroup >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryGroup > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateObjectCollection(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IObjectCollection > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateObjectCollection();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObjectCollection >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObjectCollection > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateGeometryDataCollection(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateGeometryDataCollection();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateWavefrontImporter(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontImporter > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateWavefrontImporter();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontImporter >((const SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontImporter > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateWavefrontExporter(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontExporter > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateWavefrontExporter();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontExporter >((const SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontExporter > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateBinaryImporter(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryImporter > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateBinaryImporter();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryImporter >((const SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryImporter > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateBinaryExporter(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryExporter > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateBinaryExporter();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryExporter >((const SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryExporter > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateGeometryValidator(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryValidator > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateGeometryValidator();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryValidator >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryValidator > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateColorCaster(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IColorCaster > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateColorCaster();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IColorCaster >((const SimplygonSDK::CountedPointer< SimplygonSDK::IColorCaster > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateOpacityCaster(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IOpacityCaster > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateOpacityCaster();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IOpacityCaster >((const SimplygonSDK::CountedPointer< SimplygonSDK::IOpacityCaster > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateNormalCaster(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::INormalCaster > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateNormalCaster();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::INormalCaster >((const SimplygonSDK::CountedPointer< SimplygonSDK::INormalCaster > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateNormalRepairer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::INormalRepairer > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateNormalRepairer();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::INormalRepairer >((const SimplygonSDK::CountedPointer< SimplygonSDK::INormalRepairer > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateDisplacementCaster(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IDisplacementCaster > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateDisplacementCaster();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IDisplacementCaster >((const SimplygonSDK::CountedPointer< SimplygonSDK::IDisplacementCaster > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateGeometryTangentCalculator(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryTangentCalculator > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateGeometryTangentCalculator();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryTangentCalculator >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryTangentCalculator > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateRepairSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRepairSettings > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateRepairSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRepairSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRepairSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateBoneSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IBoneSettings > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateBoneSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IBoneSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IBoneSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateReductionSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IReductionSettings > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateReductionSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IReductionSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IReductionSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateNormalCalculationSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::INormalCalculationSettings > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateNormalCalculationSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::INormalCalculationSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::INormalCalculationSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateMappingImageSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateMappingImageSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateVisibilitySettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateVisibilitySettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateReductionProcessor(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IReductionProcessor > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateReductionProcessor();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IReductionProcessor >((const SimplygonSDK::CountedPointer< SimplygonSDK::IReductionProcessor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateRemeshingSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingSettings > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateRemeshingSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateRemeshingProcessor(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingProcessor > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateRemeshingProcessor();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingProcessor >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingProcessor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateScene(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IScene > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateScene();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IScene >((const SimplygonSDK::CountedPointer< SimplygonSDK::IScene > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateSceneNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateSceneNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateSceneNodeCollection(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNodeCollection > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateSceneNodeCollection();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNodeCollection >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNodeCollection > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateSceneMesh(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneMesh > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateSceneMesh();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneMesh >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneMesh > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateSceneLodGroup(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneLodGroup > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateSceneLodGroup();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneLodGroup >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneLodGroup > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateSceneBone(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateSceneBone();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateSceneBoneTable(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBoneTable > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateSceneBoneTable();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBoneTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBoneTable > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateTexture(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITexture > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateTexture();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ITexture >((const SimplygonSDK::CountedPointer< SimplygonSDK::ITexture > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateTextureTable(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateTextureTable();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateImageDataImporter(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataImporter > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateImageDataImporter();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataImporter >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataImporter > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateMappingImageMeshData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageMeshData > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateMappingImageMeshData();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageMeshData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageMeshData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateDirectXRenderer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IDirectXRenderer > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateDirectXRenderer();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IDirectXRenderer >((const SimplygonSDK::CountedPointer< SimplygonSDK::IDirectXRenderer > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateCameraPath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ICameraPath > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateCameraPath();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ICameraPath >((const SimplygonSDK::CountedPointer< SimplygonSDK::ICameraPath > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateCamera(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ICamera > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateCamera();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ICamera >((const SimplygonSDK::CountedPointer< SimplygonSDK::ICamera > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingTextureNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingTextureNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingTextureNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingTextureNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingTextureNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingSwizzlingNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSwizzlingNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingSwizzlingNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSwizzlingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSwizzlingNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingColorNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingColorNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingColorNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingColorNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingColorNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingAddNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingAddNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingAddNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingAddNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingAddNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingSubtractNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSubtractNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingSubtractNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSubtractNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSubtractNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingMultiplyNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMultiplyNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingMultiplyNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMultiplyNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMultiplyNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingDivideNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingDivideNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingDivideNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingDivideNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingDivideNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingClampNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingClampNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingClampNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingClampNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingClampNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingMaxNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMaxNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingMaxNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMaxNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMaxNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingMinNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMinNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingMinNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMinNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMinNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingStepNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingStepNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingStepNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingStepNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingStepNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingVertexColorNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingVertexColorNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingVertexColorNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingVertexColorNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingVertexColorNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingInterpolateNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingInterpolateNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingInterpolateNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingInterpolateNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingInterpolateNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShadingCustomNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingCustomNode > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShadingCustomNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingCustomNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingCustomNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShaderData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShaderData > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShaderData();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShaderData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShaderData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateSceneAggregator(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregator > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateSceneAggregator();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregator >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregator > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateSceneAggregatorSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregatorSettings > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateSceneAggregatorSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregatorSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregatorSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateChartAggregator(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IChartAggregator > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateChartAggregator();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IChartAggregator >((const SimplygonSDK::CountedPointer< SimplygonSDK::IChartAggregator > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateVertexColorBaker(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IVertexColorBaker > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateVertexColorBaker();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IVertexColorBaker >((const SimplygonSDK::CountedPointer< SimplygonSDK::IVertexColorBaker > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateGeometryAnalyzer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryAnalyzer > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateGeometryAnalyzer();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryAnalyzer >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryAnalyzer > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateNormalAnalyzer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::INormalAnalyzer > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateNormalAnalyzer();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::INormalAnalyzer >((const SimplygonSDK::CountedPointer< SimplygonSDK::INormalAnalyzer > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateUVAnalyzer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUVAnalyzer > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateUVAnalyzer();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IUVAnalyzer >((const SimplygonSDK::CountedPointer< SimplygonSDK::IUVAnalyzer > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateImageDataExporter(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataExporter > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateImageDataExporter();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataExporter >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataExporter > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateImpostorProcessor(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorProcessor > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateImpostorProcessor();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorProcessor >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorProcessor > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateImpostorSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorSettings > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateImpostorSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateSurfaceMapper(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISurfaceMapper > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateSurfaceMapper();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISurfaceMapper >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISurfaceMapper > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateBoolData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::IBoolData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateBoolData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::IBoolData >((const SimplygonSDK::rdata< SimplygonSDK::IBoolData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateCharData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::ICharData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateCharData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::ICharData >((const SimplygonSDK::rdata< SimplygonSDK::ICharData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateUnsignedCharData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::IUnsignedCharData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateUnsignedCharData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::IUnsignedCharData >((const SimplygonSDK::rdata< SimplygonSDK::IUnsignedCharData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateShortData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::IShortData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateShortData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::IShortData >((const SimplygonSDK::rdata< SimplygonSDK::IShortData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateUnsignedShortData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::IUnsignedShortData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateUnsignedShortData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::IUnsignedShortData >((const SimplygonSDK::rdata< SimplygonSDK::IUnsignedShortData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateIntData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::IIntData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateIntData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::IIntData >((const SimplygonSDK::rdata< SimplygonSDK::IIntData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateUnsignedIntData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::IUnsignedIntData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateUnsignedIntData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::IUnsignedIntData >((const SimplygonSDK::rdata< SimplygonSDK::IUnsignedIntData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateLongData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::ILongData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateLongData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::ILongData >((const SimplygonSDK::rdata< SimplygonSDK::ILongData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateUnsignedLongData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::IUnsignedLongData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateUnsignedLongData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::IUnsignedLongData >((const SimplygonSDK::rdata< SimplygonSDK::IUnsignedLongData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateFloatData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::IFloatData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateFloatData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::IFloatData >((const SimplygonSDK::rdata< SimplygonSDK::IFloatData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateDoubleData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::IDoubleData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateDoubleData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::IDoubleData >((const SimplygonSDK::rdata< SimplygonSDK::IDoubleData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateRealData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::IRealData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateRealData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::IRealData >((const SimplygonSDK::rdata< SimplygonSDK::IRealData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateRidData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::IRidData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateRidData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::IRidData >((const SimplygonSDK::rdata< SimplygonSDK::IRidData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateRcharData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::IRcharData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateRcharData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::IRcharData >((const SimplygonSDK::rdata< SimplygonSDK::IRcharData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_CreateRhandleData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SwigValueWrapper< SimplygonSDK::rdata< SimplygonSDK::IRhandleData > > result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (arg1)->CreateRhandleData();
  jresult = new SimplygonSDK::rdata< SimplygonSDK::IRhandleData >((const SimplygonSDK::rdata< SimplygonSDK::IRhandleData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_SetErrorHandler(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::rerrorhandler *arg2 = (SimplygonSDK::rerrorhandler *) 0 ;
  SimplygonSDK::rerrorhandler *result = 0 ;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  arg2 = (SimplygonSDK::rerrorhandler *)jarg2; 
  result = (SimplygonSDK::rerrorhandler *)(arg1)->SetErrorHandler(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ISimplygonSDK_GetVersion(void * jarg1) {
  char * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  result = (SimplygonSDK::rchar *)((SimplygonSDK::ISimplygonSDK const *)arg1)->GetVersion();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISimplygonSDK_SetGlobalSetting(void * jarg1, char * jarg2, void * jarg3) {
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  char *arg2 = (char *) 0 ;
  intptr_t arg3 ;
  intptr_t *argp3 ;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (intptr_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null intptr_t", 0);
    return ;
  }
  arg3 = *argp3; 
  ((SimplygonSDK::ISimplygonSDK const *)arg1)->SetGlobalSetting((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_GetGlobalSetting(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  char *arg2 = (char *) 0 ;
  intptr_t result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ((SimplygonSDK::ISimplygonSDK const *)arg1)->GetGlobalSetting((char const *)arg2);
  jresult = new intptr_t((const intptr_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ISimplygonSDK_SetThreadLocalSetting(void * jarg1, char * jarg2, void * jarg3) {
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  char *arg2 = (char *) 0 ;
  intptr_t arg3 ;
  intptr_t *argp3 ;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (intptr_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null intptr_t", 0);
    return ;
  }
  arg3 = *argp3; 
  ((SimplygonSDK::ISimplygonSDK const *)arg1)->SetThreadLocalSetting((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ISimplygonSDK_GetThreadLocalSetting(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  char *arg2 = (char *) 0 ;
  intptr_t result;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ((SimplygonSDK::ISimplygonSDK const *)arg1)->GetThreadLocalSetting((char const *)arg2);
  jresult = new intptr_t((const intptr_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ISimplygonSDK(void * jarg1) {
  SimplygonSDK::ISimplygonSDK *arg1 = (SimplygonSDK::ISimplygonSDK *) 0 ;
  
  arg1 = (SimplygonSDK::ISimplygonSDK *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetInterfaceVersionHash() {
  char * jresult ;
  SimplygonSDK::rchar *result = 0 ;
  
  result = (SimplygonSDK::rchar *)SimplygonSDK::GetInterfaceVersionHash();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetHeaderVersion() {
  char * jresult ;
  SimplygonSDK::rchar *result = 0 ;
  
  result = (SimplygonSDK::rchar *)SimplygonSDK::GetHeaderVersion();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IArray *arg1 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::CountedPointer< IArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IArray > *)new SimplygonSDK::CountedPointer< IArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IArray > *)new SimplygonSDK::CountedPointer< IArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IArray > *)new SimplygonSDK::CountedPointer< IArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::IArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  result = (SimplygonSDK::IArray *) &((SimplygonSDK::CountedPointer< IArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::IArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  result = (SimplygonSDK::IArray *)((SimplygonSDK::CountedPointer< IArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::IArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  result = (SimplygonSDK::IArray *)((SimplygonSDK::CountedPointer< IArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IArray > *arg1 = (SimplygonSDK::CountedPointer< IArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBinaryExporter__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IBinaryExporter *arg1 = (SimplygonSDK::IBinaryExporter *) 0 ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::IBinaryExporter *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IBinaryExporter > *)new SimplygonSDK::CountedPointer< IBinaryExporter >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBinaryExporter__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IBinaryExporter > *)new SimplygonSDK::CountedPointer< IBinaryExporter >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBinaryExporter__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryExporter > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryExporter > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryExporter > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IBinaryExporter > *)new SimplygonSDK::CountedPointer< IBinaryExporter >((SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryExporter > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spBinaryExporter(void * jarg1) {
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBinaryExporter_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IBinaryExporter > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryExporter___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::IBinaryExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  result = (SimplygonSDK::IBinaryExporter *) &((SimplygonSDK::CountedPointer< IBinaryExporter > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryExporter___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::IBinaryExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  result = (SimplygonSDK::IBinaryExporter *)((SimplygonSDK::CountedPointer< IBinaryExporter > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryExporter_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::IBinaryExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  result = (SimplygonSDK::IBinaryExporter *)((SimplygonSDK::CountedPointer< IBinaryExporter > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spBinaryExporter_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBinaryExporter_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBinaryExporter_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryExporter_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IBinaryExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IBinaryExporter *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryExporter_GetExportFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  result = (*arg1)->GetExportFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBinaryExporter_RunExport(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  result = (bool)(*arg1)->RunExport();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryExporter_SetMaterials(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::IMaterialTable *arg2 = (SimplygonSDK::IMaterialTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterialTable *)jarg2; 
  (*arg1)->SetMaterials(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryExporter_SetGeometries(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::IGeometryDataCollection *arg2 = (SimplygonSDK::IGeometryDataCollection *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryDataCollection *)jarg2; 
  (*arg1)->SetGeometries(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryExporter_SetSingleGeometry(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->SetSingleGeometry(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryExporter_SetExportFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetExportFilePath((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryExporter_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryExporter_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryExporter_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryExporter_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryExporter_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spBinaryExporter_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryExporter_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryExporter_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryExporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBinaryImporter__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IBinaryImporter *arg1 = (SimplygonSDK::IBinaryImporter *) 0 ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::IBinaryImporter *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IBinaryImporter > *)new SimplygonSDK::CountedPointer< IBinaryImporter >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBinaryImporter__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IBinaryImporter > *)new SimplygonSDK::CountedPointer< IBinaryImporter >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBinaryImporter__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryImporter > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryImporter > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryImporter > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IBinaryImporter > *)new SimplygonSDK::CountedPointer< IBinaryImporter >((SimplygonSDK::CountedPointer< SimplygonSDK::IBinaryImporter > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spBinaryImporter(void * jarg1) {
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBinaryImporter_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IBinaryImporter > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryImporter___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::IBinaryImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  result = (SimplygonSDK::IBinaryImporter *) &((SimplygonSDK::CountedPointer< IBinaryImporter > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryImporter___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::IBinaryImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  result = (SimplygonSDK::IBinaryImporter *)((SimplygonSDK::CountedPointer< IBinaryImporter > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryImporter_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::IBinaryImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  result = (SimplygonSDK::IBinaryImporter *)((SimplygonSDK::CountedPointer< IBinaryImporter > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spBinaryImporter_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBinaryImporter_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBinaryImporter_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryImporter_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IBinaryImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IBinaryImporter *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBinaryImporter_RunImport(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  result = (bool)(*arg1)->RunImport();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryImporter_GetImportFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  result = (*arg1)->GetImportFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryImporter_GetMaterials(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  result = (*arg1)->GetMaterials();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryImporter_SetImportFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetImportFilePath((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryImporter_GetGeometries(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  result = (*arg1)->GetGeometries();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryImporter_GetFirstGeometry(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  result = (*arg1)->GetFirstGeometry();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryImporter_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryImporter_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryImporter_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryImporter_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryImporter_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryImporter_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spBinaryImporter_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBinaryImporter_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBinaryImporter_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBinaryImporter > *arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBinaryImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBoneSettings__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IBoneSettings *arg1 = (SimplygonSDK::IBoneSettings *) 0 ;
  SimplygonSDK::CountedPointer< IBoneSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::IBoneSettings *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IBoneSettings > *)new SimplygonSDK::CountedPointer< IBoneSettings >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBoneSettings__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IBoneSettings > *)new SimplygonSDK::CountedPointer< IBoneSettings >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBoneSettings__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IBoneSettings > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IBoneSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IBoneSettings > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IBoneSettings > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IBoneSettings > *)new SimplygonSDK::CountedPointer< IBoneSettings >((SimplygonSDK::CountedPointer< SimplygonSDK::IBoneSettings > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spBoneSettings(void * jarg1) {
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoneSettings_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IBoneSettings > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoneSettings___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::IBoneSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  result = (SimplygonSDK::IBoneSettings *) &((SimplygonSDK::CountedPointer< IBoneSettings > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoneSettings___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::IBoneSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  result = (SimplygonSDK::IBoneSettings *)((SimplygonSDK::CountedPointer< IBoneSettings > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoneSettings_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::IBoneSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  result = (SimplygonSDK::IBoneSettings *)((SimplygonSDK::CountedPointer< IBoneSettings > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spBoneSettings_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoneSettings_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoneSettings_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoneSettings_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IBoneSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IBoneSettings *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoneSettings_SetBoneLodProcess(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetBoneLodProcess(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoneSettings_SetBoneLodRatio(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetBoneLodRatio(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoneSettings_GetBoneLodProcess(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetBoneLodProcess();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoneSettings_SetMaxBonePerVertex(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetMaxBonePerVertex(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spBoneSettings_GetBoneLodRatio(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetBoneLodRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoneSettings_GetMaxBonePerVertex(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetMaxBonePerVertex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoneSettings_SetBoneLodPixelSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetBoneLodPixelSize(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoneSettings_GetBoneLodPixelSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetBoneLodPixelSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoneSettings_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoneSettings_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoneSettings_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoneSettings_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoneSettings_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spBoneSettings_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoneSettings_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoneSettings_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoneSettings > *arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoneSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBoolArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IBoolArray *arg1 = (SimplygonSDK::IBoolArray *) 0 ;
  SimplygonSDK::CountedPointer< IBoolArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IBoolArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IBoolArray > *)new SimplygonSDK::CountedPointer< IBoolArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBoolArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IBoolArray > *)new SimplygonSDK::CountedPointer< IBoolArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBoolArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IBoolArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IBoolArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IBoolArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IBoolArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IBoolArray > *)new SimplygonSDK::CountedPointer< IBoolArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IBoolArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spBoolArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoolArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IBoolArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoolArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IBoolArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (SimplygonSDK::IBoolArray *) &((SimplygonSDK::CountedPointer< IBoolArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoolArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IBoolArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (SimplygonSDK::IBoolArray *)((SimplygonSDK::CountedPointer< IBoolArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoolArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IBoolArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (SimplygonSDK::IBoolArray *)((SimplygonSDK::CountedPointer< IBoolArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spBoolArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoolArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoolArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoolArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IBoolArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IBoolArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoolArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoolArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IBoolData *arg3 = (SimplygonSDK::IBoolData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IBoolData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_GetTuple__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool *arg3 = (bool *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (bool *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spBoolArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoolArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoolArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spBoolArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoolArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spBoolArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spBoolArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_AddTuple(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  bool *arg2 = (bool *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (bool *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_AddItem(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IBoolData *arg2 = (SimplygonSDK::IBoolData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IBoolData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_GetData__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  bool *arg2 = (bool *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (bool *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoolArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spBoolArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_SetItem(void * jarg1, int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = jarg3 ? true : false; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoolArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::IBoolData *arg4 = (SimplygonSDK::IBoolData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::IBoolData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  bool *arg4 = (bool *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (bool *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoolArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoolArray_GetItem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->GetItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_SetTuple(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool *arg3 = (bool *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (bool *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_SetData(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  bool *arg2 = (bool *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_SetDataRange(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool *arg3 = (bool *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoolArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spBoolArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoolArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolArray > *arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBoolData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IBoolData *arg1 = (SimplygonSDK::IBoolData *) 0 ;
  SimplygonSDK::CountedPointer< IBoolData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IBoolData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IBoolData > *)new SimplygonSDK::CountedPointer< IBoolData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBoolData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IBoolData > *)new SimplygonSDK::CountedPointer< IBoolData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spBoolData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IBoolData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IBoolData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IBoolData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IBoolData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IBoolData > *)new SimplygonSDK::CountedPointer< IBoolData >((SimplygonSDK::CountedPointer< SimplygonSDK::IBoolData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spBoolData(void * jarg1) {
  SimplygonSDK::CountedPointer< IBoolData > *arg1 = (SimplygonSDK::CountedPointer< IBoolData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoolData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoolData > *arg1 = (SimplygonSDK::CountedPointer< IBoolData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IBoolData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoolData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolData > *arg1 = (SimplygonSDK::CountedPointer< IBoolData > *) 0 ;
  SimplygonSDK::IBoolData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolData > *)jarg1; 
  result = (SimplygonSDK::IBoolData *) &((SimplygonSDK::CountedPointer< IBoolData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoolData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolData > *arg1 = (SimplygonSDK::CountedPointer< IBoolData > *) 0 ;
  SimplygonSDK::IBoolData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolData > *)jarg1; 
  result = (SimplygonSDK::IBoolData *)((SimplygonSDK::CountedPointer< IBoolData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoolData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolData > *arg1 = (SimplygonSDK::CountedPointer< IBoolData > *) 0 ;
  SimplygonSDK::IBoolData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolData > *)jarg1; 
  result = (SimplygonSDK::IBoolData *)((SimplygonSDK::CountedPointer< IBoolData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spBoolData_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IBoolData > *arg1 = (SimplygonSDK::CountedPointer< IBoolData > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolData > *)jarg1; 
  result = (bool *)(*arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoolData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoolData > *arg1 = (SimplygonSDK::CountedPointer< IBoolData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool *) &(*arg1)->GetItem(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IBoolData > *arg1 = (SimplygonSDK::CountedPointer< IBoolData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IBoolData > *arg1 = (SimplygonSDK::CountedPointer< IBoolData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spBoolData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IBoolData > *arg1 = (SimplygonSDK::CountedPointer< IBoolData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spBoolData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IBoolData > *arg1 = (SimplygonSDK::CountedPointer< IBoolData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IBoolData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spCamera__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ICamera *arg1 = (SimplygonSDK::ICamera *) 0 ;
  SimplygonSDK::CountedPointer< ICamera > *result = 0 ;
  
  arg1 = (SimplygonSDK::ICamera *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ICamera > *)new SimplygonSDK::CountedPointer< ICamera >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spCamera__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICamera > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ICamera > *)new SimplygonSDK::CountedPointer< ICamera >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spCamera__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ICamera > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ICamera > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ICamera > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ICamera > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ICamera > *)new SimplygonSDK::CountedPointer< ICamera >((SimplygonSDK::CountedPointer< SimplygonSDK::ICamera > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spCamera(void * jarg1) {
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCamera_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ICamera > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCamera___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  SimplygonSDK::ICamera *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  result = (SimplygonSDK::ICamera *) &((SimplygonSDK::CountedPointer< ICamera > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCamera___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  SimplygonSDK::ICamera *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  result = (SimplygonSDK::ICamera *)((SimplygonSDK::CountedPointer< ICamera > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCamera_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  SimplygonSDK::ICamera *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  result = (SimplygonSDK::ICamera *)((SimplygonSDK::CountedPointer< ICamera > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spCamera_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCamera_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCamera_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCamera_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ICamera *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ICamera *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCamera_SetTarget(void * jarg1, float jarg2, float jarg3, float jarg4) {
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (*arg1)->SetTarget(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCamera_SetUsingNormalizedCoordinates(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUsingNormalizedCoordinates(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCamera_GetUsingNormalizedCoordinates(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  result = (bool)(*arg1)->GetUsingNormalizedCoordinates();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spCamera_GetFOV(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  float result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  result = (float)(*arg1)->GetFOV();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCamera_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  SimplygonSDK::ICamera *arg2 = (SimplygonSDK::ICamera *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  arg2 = (SimplygonSDK::ICamera *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCamera_SetCamera(void * jarg1, float jarg2, float jarg3, float jarg4) {
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (*arg1)->SetCamera(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCamera_SetFOV(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  float arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  arg2 = (float)jarg2; 
  (*arg1)->SetFOV(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCamera_SetOmniDirectional(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetOmniDirectional(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCamera_GetOmniDirectional(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  result = (bool)(*arg1)->GetOmniDirectional();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCamera_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCamera_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCamera_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCamera_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCamera_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spCamera_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCamera_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCamera_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICamera > *arg1 = (SimplygonSDK::CountedPointer< ICamera > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICamera > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spCameraPath__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ICameraPath *arg1 = (SimplygonSDK::ICameraPath *) 0 ;
  SimplygonSDK::CountedPointer< ICameraPath > *result = 0 ;
  
  arg1 = (SimplygonSDK::ICameraPath *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ICameraPath > *)new SimplygonSDK::CountedPointer< ICameraPath >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spCameraPath__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICameraPath > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ICameraPath > *)new SimplygonSDK::CountedPointer< ICameraPath >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spCameraPath__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ICameraPath > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ICameraPath > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ICameraPath > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ICameraPath > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ICameraPath > *)new SimplygonSDK::CountedPointer< ICameraPath >((SimplygonSDK::CountedPointer< SimplygonSDK::ICameraPath > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spCameraPath(void * jarg1) {
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCameraPath_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ICameraPath > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCameraPath___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::ICameraPath *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  result = (SimplygonSDK::ICameraPath *) &((SimplygonSDK::CountedPointer< ICameraPath > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCameraPath___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::ICameraPath *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  result = (SimplygonSDK::ICameraPath *)((SimplygonSDK::CountedPointer< ICameraPath > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCameraPath_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::ICameraPath *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  result = (SimplygonSDK::ICameraPath *)((SimplygonSDK::CountedPointer< ICameraPath > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spCameraPath_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCameraPath_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCameraPath_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCameraPath_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ICameraPath *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ICameraPath *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCameraPath_CreateSurroundingCameraPath(void * jarg1, int jarg2, float jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  (*arg1)->CreateSurroundingCameraPath(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCameraPath_CreateSpinningCameraPath(void * jarg1, float jarg2, int jarg3) {
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  float arg2 ;
  int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  (*arg1)->CreateSpinningCameraPath(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCameraPath_CreateHorizontalSpinningCameraPath(void * jarg1, float jarg2, int jarg3) {
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  float arg2 ;
  int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  (*arg1)->CreateHorizontalSpinningCameraPath(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCameraPath_CreateCustomSphereCameraPath(void * jarg1, float jarg2, int jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::real arg2 ;
  int arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CreateCustomSphereCameraPath(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCameraPath_AddCamera(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::ICamera *arg2 = (SimplygonSDK::ICamera *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  arg2 = (SimplygonSDK::ICamera *)jarg2; 
  (*arg1)->AddCamera(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCameraPath_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCameraPath_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCameraPath_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCameraPath_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCameraPath_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spCameraPath_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCameraPath_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCameraPath_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICameraPath > *arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICameraPath > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spCharArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ICharArray *arg1 = (SimplygonSDK::ICharArray *) 0 ;
  SimplygonSDK::CountedPointer< ICharArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::ICharArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ICharArray > *)new SimplygonSDK::CountedPointer< ICharArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spCharArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ICharArray > *)new SimplygonSDK::CountedPointer< ICharArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spCharArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ICharArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ICharArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ICharArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ICharArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ICharArray > *)new SimplygonSDK::CountedPointer< ICharArray >((SimplygonSDK::CountedPointer< SimplygonSDK::ICharArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spCharArray(void * jarg1) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCharArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ICharArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCharArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::ICharArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (SimplygonSDK::ICharArray *) &((SimplygonSDK::CountedPointer< ICharArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCharArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::ICharArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (SimplygonSDK::ICharArray *)((SimplygonSDK::CountedPointer< ICharArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCharArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::ICharArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (SimplygonSDK::ICharArray *)((SimplygonSDK::CountedPointer< ICharArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spCharArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCharArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCharArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCharArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ICharArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ICharArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT char SWIGSTDCALL CSharp_spCharArray_GetItem(void * jarg1, int jarg2) {
  char jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (char)(*arg1)->GetItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_SetTuple(void * jarg1, int jarg2, char * jarg3) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCharArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCharArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spCharArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCharArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCharArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCharArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_AddTuple(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCharArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_SetData(void * jarg1, char * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spCharArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spCharArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spCharArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::ICharData *arg2 = (SimplygonSDK::ICharData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::ICharData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_GetData__SWIG_1(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCharArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_AddItem(void * jarg1, char jarg2) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  char arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (char)jarg2; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCharArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_SetItem(void * jarg1, int jarg2, char jarg3) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::ICharData *arg3 = (SimplygonSDK::ICharData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::ICharData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_GetTuple__SWIG_1(void * jarg1, int jarg2, char * jarg3) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_SetDataRange(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spCharArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::ICharData *arg4 = (SimplygonSDK::ICharData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::ICharData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, char * jarg4) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (char *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCharArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spCharArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCharArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharArray > *arg1 = (SimplygonSDK::CountedPointer< ICharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spCharData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ICharData *arg1 = (SimplygonSDK::ICharData *) 0 ;
  SimplygonSDK::CountedPointer< ICharData > *result = 0 ;
  
  arg1 = (SimplygonSDK::ICharData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ICharData > *)new SimplygonSDK::CountedPointer< ICharData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spCharData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ICharData > *)new SimplygonSDK::CountedPointer< ICharData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spCharData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ICharData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ICharData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ICharData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ICharData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ICharData > *)new SimplygonSDK::CountedPointer< ICharData >((SimplygonSDK::CountedPointer< SimplygonSDK::ICharData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spCharData(void * jarg1) {
  SimplygonSDK::CountedPointer< ICharData > *arg1 = (SimplygonSDK::CountedPointer< ICharData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCharData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICharData > *arg1 = (SimplygonSDK::CountedPointer< ICharData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ICharData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCharData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharData > *arg1 = (SimplygonSDK::CountedPointer< ICharData > *) 0 ;
  SimplygonSDK::ICharData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharData > *)jarg1; 
  result = (SimplygonSDK::ICharData *) &((SimplygonSDK::CountedPointer< ICharData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCharData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharData > *arg1 = (SimplygonSDK::CountedPointer< ICharData > *) 0 ;
  SimplygonSDK::ICharData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharData > *)jarg1; 
  result = (SimplygonSDK::ICharData *)((SimplygonSDK::CountedPointer< ICharData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spCharData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ICharData > *arg1 = (SimplygonSDK::CountedPointer< ICharData > *) 0 ;
  SimplygonSDK::ICharData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharData > *)jarg1; 
  result = (SimplygonSDK::ICharData *)((SimplygonSDK::CountedPointer< ICharData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spCharData_GetData__SWIG_0(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ICharData > *arg1 = (SimplygonSDK::CountedPointer< ICharData > *) 0 ;
  char *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharData > *)jarg1; 
  result = (char *)(*arg1)->GetData();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_spCharData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  char jresult ;
  SimplygonSDK::CountedPointer< ICharData > *arg1 = (SimplygonSDK::CountedPointer< ICharData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (char *) &(*arg1)->GetItem(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ICharData > *arg1 = (SimplygonSDK::CountedPointer< ICharData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ICharData > *arg1 = (SimplygonSDK::CountedPointer< ICharData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spCharData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ICharData > *arg1 = (SimplygonSDK::CountedPointer< ICharData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spCharData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ICharData > *arg1 = (SimplygonSDK::CountedPointer< ICharData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ICharData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spChartAggregator__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IChartAggregator *arg1 = (SimplygonSDK::IChartAggregator *) 0 ;
  SimplygonSDK::CountedPointer< IChartAggregator > *result = 0 ;
  
  arg1 = (SimplygonSDK::IChartAggregator *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IChartAggregator > *)new SimplygonSDK::CountedPointer< IChartAggregator >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spChartAggregator__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IChartAggregator > *)new SimplygonSDK::CountedPointer< IChartAggregator >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spChartAggregator__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IChartAggregator > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IChartAggregator > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IChartAggregator > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IChartAggregator > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IChartAggregator > *)new SimplygonSDK::CountedPointer< IChartAggregator >((SimplygonSDK::CountedPointer< SimplygonSDK::IChartAggregator > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spChartAggregator(void * jarg1) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IChartAggregator > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChartAggregator___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::IChartAggregator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (SimplygonSDK::IChartAggregator *) &((SimplygonSDK::CountedPointer< IChartAggregator > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChartAggregator___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::IChartAggregator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (SimplygonSDK::IChartAggregator *)((SimplygonSDK::CountedPointer< IChartAggregator > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChartAggregator_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::IChartAggregator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (SimplygonSDK::IChartAggregator *)((SimplygonSDK::CountedPointer< IChartAggregator > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spChartAggregator_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChartAggregator_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IChartAggregator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IChartAggregator *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetInputMaterialCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetInputMaterialCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_GetTextureHeight__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(*arg1)->GetTextureHeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_GetTextureHeight__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTextureHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spChartAggregator_GetInputOutputMaterialMapping(void * jarg1, unsigned int jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->GetInputOutputMaterialMapping(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_GetGutterSpace__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (unsigned int)(*arg1)->GetGutterSpace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_GetGutterSpace__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(*arg1)->GetGutterSpace(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetKeepOriginalChartProportionsFromChannel(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetKeepOriginalChartProportionsFromChannel((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetTextureTable(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::ITextureTable *arg2 = (SimplygonSDK::ITextureTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::ITextureTable *)jarg2; 
  (*arg1)->SetTextureTable(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_GetInputMaterialCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (unsigned int)(*arg1)->GetInputMaterialCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_GetKeepOriginalChartProportions(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (bool)(*arg1)->GetKeepOriginalChartProportions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetTextureHeight__SWIG_0(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTextureHeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetTextureHeight__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetTextureHeight(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_Parameterize(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::IRealArray *arg3 = (SimplygonSDK::IRealArray *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::IRealArray *)jarg3; 
  result = (bool)(*arg1)->Parameterize(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_GetUseAreaWeighting(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (bool)(*arg1)->GetUseAreaWeighting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetOutputMaterialCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOutputMaterialCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetKeepOriginalChartProportions(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetKeepOriginalChartProportions(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_GetOutputMaterialCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOutputMaterialCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_GetAutomaticTextureSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (bool)(*arg1)->GetAutomaticTextureSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetTextureWidth__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetTextureWidth(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetTextureWidth__SWIG_1(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTextureWidth(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_GetForcePower2Texture(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (bool)(*arg1)->GetForcePower2Texture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetMaterialTable(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::IMaterialTable *arg2 = (SimplygonSDK::IMaterialTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterialTable *)jarg2; 
  (*arg1)->SetMaterialTable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetGutterSpace__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetGutterSpace(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetGutterSpace__SWIG_1(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetGutterSpace(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_GetTexCoordLevel(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTexCoordLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetTexCoordLevel(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTexCoordLevel(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spChartAggregator_GetAutomaticTextureSizeMultiplier(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetAutomaticTextureSizeMultiplier();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetUseAreaWeighting(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseAreaWeighting(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetInputOutputMaterialMapping(void * jarg1, unsigned int jarg2, int jarg3) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (int)jarg3; 
  (*arg1)->SetInputOutputMaterialMapping(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetAutomaticTextureSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetAutomaticTextureSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetAutomaticTextureSizeMultiplier(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetAutomaticTextureSizeMultiplier(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_GetTextureWidth__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTextureWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChartAggregator_GetTextureWidth__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(*arg1)->GetTextureWidth(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetForcePower2Texture(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetForcePower2Texture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChartAggregator_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spChartAggregator_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChartAggregator_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChartAggregator_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChartAggregator > *arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChartAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spChunkedImageData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IChunkedImageData *arg1 = (SimplygonSDK::IChunkedImageData *) 0 ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IChunkedImageData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IChunkedImageData > *)new SimplygonSDK::CountedPointer< IChunkedImageData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spChunkedImageData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IChunkedImageData > *)new SimplygonSDK::CountedPointer< IChunkedImageData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spChunkedImageData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IChunkedImageData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IChunkedImageData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IChunkedImageData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IChunkedImageData > *)new SimplygonSDK::CountedPointer< IChunkedImageData >((SimplygonSDK::CountedPointer< SimplygonSDK::IChunkedImageData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spChunkedImageData(void * jarg1) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IChunkedImageData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChunkedImageData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::IChunkedImageData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (SimplygonSDK::IChunkedImageData *) &((SimplygonSDK::CountedPointer< IChunkedImageData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChunkedImageData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::IChunkedImageData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (SimplygonSDK::IChunkedImageData *)((SimplygonSDK::CountedPointer< IChunkedImageData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChunkedImageData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::IChunkedImageData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (SimplygonSDK::IChunkedImageData *)((SimplygonSDK::CountedPointer< IChunkedImageData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spChunkedImageData_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChunkedImageData_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IChunkedImageData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IChunkedImageData *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_UnlockChunk3D(void * jarg1, int jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->UnlockChunk3D(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_IsChunkLocked2D(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rid arg3 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (bool)(*arg1)->IsChunkLocked2D(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_IsChunkLocked1D(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->IsChunkLocked1D(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChunkedImageData_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IChunkedImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IChunkedImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IChunkedImageData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_SetTemplateImage(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::IImageData *arg2 = (SimplygonSDK::IImageData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::IImageData *)jarg2; 
  (*arg1)->SetTemplateImage(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChunkedImageData_LockChunk3D(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (*arg1)->LockChunk3D(arg2,arg3,arg4);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_GetTotalXSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTotalXSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_IsChunkLocked3D(void * jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (bool)(*arg1)->IsChunkLocked3D(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_GetYSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetYSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_GetTemplateXSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTemplateXSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_GetTemplateYSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTemplateYSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChunkedImageData_LockChunk2D(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (*arg1)->LockChunk2D(arg2,arg3);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_UnlockChunk1D(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->UnlockChunk1D(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_UnlockChunk2D(void * jarg1, int jarg2, int jarg3) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rid arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  (*arg1)->UnlockChunk2D(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_GetTotalYSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTotalYSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_Set1DSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->Set1DSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_DeepCopy(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::IChunkedImageData *arg2 = (SimplygonSDK::IChunkedImageData *) 0 ;
  bool arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::IChunkedImageData *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (*arg1)->DeepCopy(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_GetTemplateZSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTemplateZSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_Reset(void * jarg1) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  (*arg1)->Reset();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_GetXSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetXSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_GetZSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetZSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChunkedImageData_LockChunk1D(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->LockChunk1D(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_Set2DSize(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->Set2DSize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_Set3DSize(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->Set3DSize(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spChunkedImageData_GetTotalZSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTotalZSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChunkedImageData_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spChunkedImageData_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spChunkedImageData_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spChunkedImageData_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IChunkedImageData > *arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IChunkedImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spColorCaster__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IColorCaster *arg1 = (SimplygonSDK::IColorCaster *) 0 ;
  SimplygonSDK::CountedPointer< IColorCaster > *result = 0 ;
  
  arg1 = (SimplygonSDK::IColorCaster *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IColorCaster > *)new SimplygonSDK::CountedPointer< IColorCaster >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spColorCaster__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IColorCaster > *)new SimplygonSDK::CountedPointer< IColorCaster >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spColorCaster__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IColorCaster > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IColorCaster > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IColorCaster > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IColorCaster > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IColorCaster > *)new SimplygonSDK::CountedPointer< IColorCaster >((SimplygonSDK::CountedPointer< SimplygonSDK::IColorCaster > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spColorCaster(void * jarg1) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spColorCaster_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IColorCaster > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spColorCaster___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::IColorCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (SimplygonSDK::IColorCaster *) &((SimplygonSDK::CountedPointer< IColorCaster > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spColorCaster___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::IColorCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (SimplygonSDK::IColorCaster *)((SimplygonSDK::CountedPointer< IColorCaster > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spColorCaster_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::IColorCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (SimplygonSDK::IColorCaster *)((SimplygonSDK::CountedPointer< IColorCaster > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spColorCaster_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spColorCaster_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spColorCaster_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spColorCaster_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IColorCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IColorCaster *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spColorCaster_GetSourceTextures(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (*arg1)->GetSourceTextures();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetDilation(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetDilation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetsRGB(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetsRGB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetColorType(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetColorType((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetFillMode(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFillMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetOutputChannels(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOutputChannels(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spColorCaster_GetColorType(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (*arg1)->GetColorType();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spColorCaster_GetMappingImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (*arg1)->GetMappingImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetBakeVertexColors(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetBakeVertexColors(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetOutputFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetOutputFilePath((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spColorCaster_GetsRGB(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (bool)(*arg1)->GetsRGB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetSourceTextures(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::ITextureTable *arg2 = (SimplygonSDK::ITextureTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (SimplygonSDK::ITextureTable *)jarg2; 
  (*arg1)->SetSourceTextures(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spColorCaster_GetSourceMaterials(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (*arg1)->GetSourceMaterials();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetOutputImage(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::IImageData *arg2 = (SimplygonSDK::IImageData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IImageData *)jarg2; 
  (*arg1)->SetOutputImage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetSourceMaterials(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::IMaterialTable *arg2 = (SimplygonSDK::IMaterialTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterialTable *)jarg2; 
  (*arg1)->SetSourceMaterials(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spColorCaster_GetDilation(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetDilation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetMappingImage(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::IMappingImage *arg2 = (SimplygonSDK::IMappingImage *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMappingImage *)jarg2; 
  (*arg1)->SetMappingImage(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spColorCaster_GetDestMaterial(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (*arg1)->GetDestMaterial();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spColorCaster_GetFillMode(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (int)(*arg1)->GetFillMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spColorCaster_GetDestMaterialId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetDestMaterialId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spColorCaster_GetOutputFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (*arg1)->GetOutputFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spColorCaster_GetOutputImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (*arg1)->GetOutputImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetBakeOpacityInAlpha(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetBakeOpacityInAlpha(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spColorCaster_GetBakeOpacityInAlpha(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (bool)(*arg1)->GetBakeOpacityInAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_CastMaterials(void * jarg1) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  (*arg1)->CastMaterials();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spColorCaster_GetBakeVertexColors(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (bool)(*arg1)->GetBakeVertexColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spColorCaster_GetOutputChannels(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOutputChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetDestMaterial(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::IMaterial *arg2 = (SimplygonSDK::IMaterial *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterial *)jarg2; 
  (*arg1)->SetDestMaterial(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetOutputChannelBitDepth(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOutputChannelBitDepth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetDestMaterialId(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetDestMaterialId(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spColorCaster_GetOutputChannelBitDepth(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOutputChannelBitDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_RunProcessing(void * jarg1) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  (*arg1)->RunProcessing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spColorCaster_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spColorCaster_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spColorCaster_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spColorCaster_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IColorCaster > *arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IColorCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spDirectXRenderer__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IDirectXRenderer *arg1 = (SimplygonSDK::IDirectXRenderer *) 0 ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *result = 0 ;
  
  arg1 = (SimplygonSDK::IDirectXRenderer *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)new SimplygonSDK::CountedPointer< IDirectXRenderer >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spDirectXRenderer__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)new SimplygonSDK::CountedPointer< IDirectXRenderer >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spDirectXRenderer__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IDirectXRenderer > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IDirectXRenderer > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IDirectXRenderer > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)new SimplygonSDK::CountedPointer< IDirectXRenderer >((SimplygonSDK::CountedPointer< SimplygonSDK::IDirectXRenderer > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spDirectXRenderer(void * jarg1) {
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDirectXRenderer_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IDirectXRenderer > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDirectXRenderer___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::IDirectXRenderer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  result = (SimplygonSDK::IDirectXRenderer *) &((SimplygonSDK::CountedPointer< IDirectXRenderer > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDirectXRenderer___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::IDirectXRenderer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  result = (SimplygonSDK::IDirectXRenderer *)((SimplygonSDK::CountedPointer< IDirectXRenderer > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDirectXRenderer_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::IDirectXRenderer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  result = (SimplygonSDK::IDirectXRenderer *)((SimplygonSDK::CountedPointer< IDirectXRenderer > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spDirectXRenderer_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDirectXRenderer_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDirectXRenderer_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDirectXRenderer_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IDirectXRenderer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IDirectXRenderer *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDirectXRenderer_CreatePreviewer(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(*arg1)->CreatePreviewer(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDirectXRenderer_RenderAlongCameraPathAndStorePics(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::ICameraPath *arg2 = (SimplygonSDK::ICameraPath *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  arg2 = (SimplygonSDK::ICameraPath *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (*arg1)->RenderAlongCameraPathAndStorePics(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDirectXRenderer_SetWireFrameMode(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetWireFrameMode(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDirectXRenderer_LoadGeometryData(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::IMaterialTable *arg3 = (SimplygonSDK::IMaterialTable *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::IMaterialTable *)jarg3; 
  result = (bool)(*arg1)->LoadGeometryData(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDirectXRenderer_LoadGeometryDataWithMaterialShadingNetwork(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::IMaterialTable *arg3 = (SimplygonSDK::IMaterialTable *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::IMaterialTable *)jarg3; 
  result = (bool)(*arg1)->LoadGeometryDataWithMaterialShadingNetwork(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDirectXRenderer_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDirectXRenderer_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDirectXRenderer_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDirectXRenderer_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDirectXRenderer_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spDirectXRenderer_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDirectXRenderer_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDirectXRenderer_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDirectXRenderer > *arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDirectXRenderer > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spDisplacementCaster__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IDisplacementCaster *arg1 = (SimplygonSDK::IDisplacementCaster *) 0 ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *result = 0 ;
  
  arg1 = (SimplygonSDK::IDisplacementCaster *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)new SimplygonSDK::CountedPointer< IDisplacementCaster >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spDisplacementCaster__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)new SimplygonSDK::CountedPointer< IDisplacementCaster >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spDisplacementCaster__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IDisplacementCaster > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IDisplacementCaster > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IDisplacementCaster > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)new SimplygonSDK::CountedPointer< IDisplacementCaster >((SimplygonSDK::CountedPointer< SimplygonSDK::IDisplacementCaster > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spDisplacementCaster(void * jarg1) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDisplacementCaster_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IDisplacementCaster > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDisplacementCaster___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::IDisplacementCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (SimplygonSDK::IDisplacementCaster *) &((SimplygonSDK::CountedPointer< IDisplacementCaster > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDisplacementCaster___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::IDisplacementCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (SimplygonSDK::IDisplacementCaster *)((SimplygonSDK::CountedPointer< IDisplacementCaster > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDisplacementCaster_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::IDisplacementCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (SimplygonSDK::IDisplacementCaster *)((SimplygonSDK::CountedPointer< IDisplacementCaster > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spDisplacementCaster_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDisplacementCaster_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDisplacementCaster_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDisplacementCaster_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IDisplacementCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IDisplacementCaster *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDisplacementCaster_GetGenerateScalarDisplacement(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (bool)(*arg1)->GetGenerateScalarDisplacement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetOutputImage(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::IImageData *arg2 = (SimplygonSDK::IImageData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IImageData *)jarg2; 
  (*arg1)->SetOutputImage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetGenerateScalarDisplacement(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetGenerateScalarDisplacement(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDisplacementCaster_GetDilation(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetDilation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDisplacementCaster_GetOutputImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (*arg1)->GetOutputImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDisplacementCaster_GetOutputChannelBitDepth(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOutputChannelBitDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spDisplacementCaster_GetDistanceScaling(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetDistanceScaling();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetDestMaterial(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::IMaterial *arg2 = (SimplygonSDK::IMaterial *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterial *)jarg2; 
  (*arg1)->SetDestMaterial(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetDestMaterialId(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetDestMaterialId(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetDilation(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetDilation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetOutputFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetOutputFilePath((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDisplacementCaster_GetSourceTextures(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (*arg1)->GetSourceTextures();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetOutputChannels(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOutputChannels(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spDisplacementCaster_GetNormalMapTextureLevel(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetNormalMapTextureLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDisplacementCaster_GetMappingImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (*arg1)->GetMappingImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_CastMaterials(void * jarg1) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  (*arg1)->CastMaterials();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_RunProcessing(void * jarg1) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  (*arg1)->RunProcessing();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDisplacementCaster_GetOutputChannels(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOutputChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDisplacementCaster_GetOutputFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (*arg1)->GetOutputFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetDistanceScaling(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetDistanceScaling(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetGenerateTangentSpaceDisplacement(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetGenerateTangentSpaceDisplacement(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDisplacementCaster_GetGenerateTangentSpaceDisplacement(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (bool)(*arg1)->GetGenerateTangentSpaceDisplacement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetOutputChannelBitDepth(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOutputChannelBitDepth(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDisplacementCaster_GetDestMaterial(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (*arg1)->GetDestMaterial();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetNormalMapTextureLevel(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetNormalMapTextureLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetSourceMaterials(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::IMaterialTable *arg2 = (SimplygonSDK::IMaterialTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterialTable *)jarg2; 
  (*arg1)->SetSourceMaterials(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetSourceTextures(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::ITextureTable *arg2 = (SimplygonSDK::ITextureTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::ITextureTable *)jarg2; 
  (*arg1)->SetSourceTextures(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spDisplacementCaster_GetDestMaterialId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetDestMaterialId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDisplacementCaster_GetSourceMaterials(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (*arg1)->GetSourceMaterials();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetMappingImage(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::IMappingImage *arg2 = (SimplygonSDK::IMappingImage *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMappingImage *)jarg2; 
  (*arg1)->SetMappingImage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDisplacementCaster_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spDisplacementCaster_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDisplacementCaster_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDisplacementCaster_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDisplacementCaster > *arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDisplacementCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spDoubleArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IDoubleArray *arg1 = (SimplygonSDK::IDoubleArray *) 0 ;
  SimplygonSDK::CountedPointer< IDoubleArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IDoubleArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IDoubleArray > *)new SimplygonSDK::CountedPointer< IDoubleArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spDoubleArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IDoubleArray > *)new SimplygonSDK::CountedPointer< IDoubleArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spDoubleArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IDoubleArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IDoubleArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IDoubleArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IDoubleArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IDoubleArray > *)new SimplygonSDK::CountedPointer< IDoubleArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IDoubleArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spDoubleArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDoubleArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IDoubleArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDoubleArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IDoubleArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (SimplygonSDK::IDoubleArray *) &((SimplygonSDK::CountedPointer< IDoubleArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDoubleArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IDoubleArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (SimplygonSDK::IDoubleArray *)((SimplygonSDK::CountedPointer< IDoubleArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDoubleArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IDoubleArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (SimplygonSDK::IDoubleArray *)((SimplygonSDK::CountedPointer< IDoubleArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spDoubleArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDoubleArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDoubleArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDoubleArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IDoubleArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IDoubleArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spDoubleArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_SetData(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDoubleArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::IDoubleData *arg4 = (SimplygonSDK::IDoubleData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::IDoubleData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  double *arg4 = (double *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDoubleArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spDoubleArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_spDoubleArray_GetItem(void * jarg1, int jarg2) {
  double jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  double result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (double)(*arg1)->GetItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDoubleArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_SetDataRange(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (double *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_AddTuple(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (double *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spDoubleArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDoubleArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spDoubleArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IDoubleData *arg2 = (SimplygonSDK::IDoubleData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IDoubleData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_GetData__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (double *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDoubleArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_AddItem(void * jarg1, double jarg2) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  double arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (double)jarg2; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IDoubleData *arg3 = (SimplygonSDK::IDoubleData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IDoubleData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_GetTuple__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  double *arg3 = (double *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (double *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_SetTuple(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  double *arg3 = (double *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (double *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDoubleArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_SetItem(void * jarg1, int jarg2, double jarg3) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  double arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (double)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDoubleArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDoubleArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spDoubleArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDoubleArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spDoubleArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDoubleArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleArray > *arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spDoubleData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IDoubleData *arg1 = (SimplygonSDK::IDoubleData *) 0 ;
  SimplygonSDK::CountedPointer< IDoubleData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IDoubleData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IDoubleData > *)new SimplygonSDK::CountedPointer< IDoubleData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spDoubleData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IDoubleData > *)new SimplygonSDK::CountedPointer< IDoubleData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spDoubleData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IDoubleData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IDoubleData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IDoubleData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IDoubleData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IDoubleData > *)new SimplygonSDK::CountedPointer< IDoubleData >((SimplygonSDK::CountedPointer< SimplygonSDK::IDoubleData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spDoubleData(void * jarg1) {
  SimplygonSDK::CountedPointer< IDoubleData > *arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDoubleData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDoubleData > *arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IDoubleData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDoubleData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleData > *arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *) 0 ;
  SimplygonSDK::IDoubleData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *)jarg1; 
  result = (SimplygonSDK::IDoubleData *) &((SimplygonSDK::CountedPointer< IDoubleData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDoubleData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleData > *arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *) 0 ;
  SimplygonSDK::IDoubleData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *)jarg1; 
  result = (SimplygonSDK::IDoubleData *)((SimplygonSDK::CountedPointer< IDoubleData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDoubleData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleData > *arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *) 0 ;
  SimplygonSDK::IDoubleData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *)jarg1; 
  result = (SimplygonSDK::IDoubleData *)((SimplygonSDK::CountedPointer< IDoubleData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spDoubleData_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IDoubleData > *arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *) 0 ;
  double *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *)jarg1; 
  result = (double *)(*arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_spDoubleData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  double jresult ;
  SimplygonSDK::CountedPointer< IDoubleData > *arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  double *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (double *) &(*arg1)->GetItem(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IDoubleData > *arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IDoubleData > *arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spDoubleData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IDoubleData > *arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spDoubleData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IDoubleData > *arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IDoubleData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spFieldData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IFieldData *arg1 = (SimplygonSDK::IFieldData *) 0 ;
  SimplygonSDK::CountedPointer< IFieldData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IFieldData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IFieldData > *)new SimplygonSDK::CountedPointer< IFieldData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spFieldData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IFieldData > *)new SimplygonSDK::CountedPointer< IFieldData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spFieldData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IFieldData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IFieldData > *)new SimplygonSDK::CountedPointer< IFieldData >((SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spFieldData(void * jarg1) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFieldData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IFieldData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  result = (SimplygonSDK::IFieldData *) &((SimplygonSDK::CountedPointer< IFieldData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  result = (SimplygonSDK::IFieldData *)((SimplygonSDK::CountedPointer< IFieldData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  result = (SimplygonSDK::IFieldData *)((SimplygonSDK::CountedPointer< IFieldData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spFieldData_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFieldData_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFieldData_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IFieldData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IFieldData *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData_GetFirstFieldHandle(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  result = (SimplygonSDK::rhandle)(*arg1)->GetFirstFieldHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_AppendTuples(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  bool arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (*arg1)->AppendTuples(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spFieldData_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFieldData_IsSetupIdenticalTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  result = (bool)(*arg1)->IsSetupIdenticalTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData_AddBaseTypeField(void * jarg1, int jarg2, unsigned int jarg3, char * jarg4) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (char *)jarg4; 
  result = (*arg1)->AddBaseTypeField(arg2,arg3,(char const *)arg4);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData_GetNextFieldHandle(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->GetNextFieldHandle(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spFieldData_GetMaxFieldId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxFieldId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_IndexedCombine3__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_IndexedCombine3__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, int jarg6) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  SimplygonSDK::rid *arg3 = (SimplygonSDK::rid *) 0 ;
  SimplygonSDK::real *arg4 = (SimplygonSDK::real *) 0 ;
  unsigned int arg5 ;
  SimplygonSDK::rid arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  arg3 = (SimplygonSDK::rid *)jarg3; 
  arg4 = (SimplygonSDK::real *)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_AddField(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  (*arg1)->AddField(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFieldData_GetFieldCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetFieldCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_IndexedCopy__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_IndexedCopy__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  SimplygonSDK::rid *arg3 = (SimplygonSDK::rid *) 0 ;
  unsigned int arg4 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  arg3 = (SimplygonSDK::rid *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_SafeRemoveField(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SafeRemoveField((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData_GetFieldWithId(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetFieldWithId(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData_GetField(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetField((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spFieldData_IsEmpty(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  result = (int)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData_GetFieldWithHandle(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (*arg1)->GetFieldWithHandle(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_RemoveField(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->RemoveField((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_AddTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->AddTupleCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFieldData_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_RemoveAllFields(void * jarg1) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  (*arg1)->RemoveAllFields();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_DeepCopy(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  bool arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (*arg1)->DeepCopy(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_IndexedCombine__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_IndexedCombine__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, int jarg6) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  SimplygonSDK::rid *arg3 = (SimplygonSDK::rid *) 0 ;
  SimplygonSDK::real *arg4 = (SimplygonSDK::real *) 0 ;
  unsigned int arg5 ;
  SimplygonSDK::rid arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  arg3 = (SimplygonSDK::rid *)jarg3; 
  arg4 = (SimplygonSDK::real *)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::IFieldData *arg2 = (SimplygonSDK::IFieldData *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::IFieldData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spFieldData_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFieldData_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFieldData_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFieldData > *arg1 = (SimplygonSDK::CountedPointer< IFieldData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFieldData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spFloatArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IFloatArray *arg1 = (SimplygonSDK::IFloatArray *) 0 ;
  SimplygonSDK::CountedPointer< IFloatArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IFloatArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IFloatArray > *)new SimplygonSDK::CountedPointer< IFloatArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spFloatArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IFloatArray > *)new SimplygonSDK::CountedPointer< IFloatArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spFloatArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IFloatArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IFloatArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IFloatArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IFloatArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IFloatArray > *)new SimplygonSDK::CountedPointer< IFloatArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IFloatArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spFloatArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFloatArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IFloatArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFloatArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IFloatArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (SimplygonSDK::IFloatArray *) &((SimplygonSDK::CountedPointer< IFloatArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFloatArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IFloatArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (SimplygonSDK::IFloatArray *)((SimplygonSDK::CountedPointer< IFloatArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFloatArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IFloatArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (SimplygonSDK::IFloatArray *)((SimplygonSDK::CountedPointer< IFloatArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spFloatArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFloatArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFloatArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFloatArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IFloatArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IFloatArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spFloatArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFloatArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFloatArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_SetItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  float arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (float)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_AddItem(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  float arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (float)jarg2; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::IFloatData *arg4 = (SimplygonSDK::IFloatData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::IFloatData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (float *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spFloatArray_GetItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  float result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (float)(*arg1)->GetItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFloatArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFloatArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spFloatArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IFloatData *arg3 = (SimplygonSDK::IFloatData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IFloatData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_GetTuple__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (float *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_SetTuple(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (float *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_SetData(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IFloatData *arg2 = (SimplygonSDK::IFloatData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IFloatData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_GetData__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (float *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFloatArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_SetDataRange(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spFloatArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spFloatArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFloatArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFloatArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_AddTuple(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (float *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFloatArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spFloatArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFloatArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spFloatArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFloatArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatArray > *arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spFloatData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IFloatData *arg1 = (SimplygonSDK::IFloatData *) 0 ;
  SimplygonSDK::CountedPointer< IFloatData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IFloatData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IFloatData > *)new SimplygonSDK::CountedPointer< IFloatData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spFloatData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IFloatData > *)new SimplygonSDK::CountedPointer< IFloatData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spFloatData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IFloatData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IFloatData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IFloatData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IFloatData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IFloatData > *)new SimplygonSDK::CountedPointer< IFloatData >((SimplygonSDK::CountedPointer< SimplygonSDK::IFloatData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spFloatData(void * jarg1) {
  SimplygonSDK::CountedPointer< IFloatData > *arg1 = (SimplygonSDK::CountedPointer< IFloatData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFloatData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFloatData > *arg1 = (SimplygonSDK::CountedPointer< IFloatData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IFloatData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFloatData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatData > *arg1 = (SimplygonSDK::CountedPointer< IFloatData > *) 0 ;
  SimplygonSDK::IFloatData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatData > *)jarg1; 
  result = (SimplygonSDK::IFloatData *) &((SimplygonSDK::CountedPointer< IFloatData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFloatData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatData > *arg1 = (SimplygonSDK::CountedPointer< IFloatData > *) 0 ;
  SimplygonSDK::IFloatData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatData > *)jarg1; 
  result = (SimplygonSDK::IFloatData *)((SimplygonSDK::CountedPointer< IFloatData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFloatData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatData > *arg1 = (SimplygonSDK::CountedPointer< IFloatData > *) 0 ;
  SimplygonSDK::IFloatData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatData > *)jarg1; 
  result = (SimplygonSDK::IFloatData *)((SimplygonSDK::CountedPointer< IFloatData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spFloatData_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IFloatData > *arg1 = (SimplygonSDK::CountedPointer< IFloatData > *) 0 ;
  float *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatData > *)jarg1; 
  result = (float *)(*arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spFloatData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IFloatData > *arg1 = (SimplygonSDK::CountedPointer< IFloatData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  float *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (float *) &(*arg1)->GetItem(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IFloatData > *arg1 = (SimplygonSDK::CountedPointer< IFloatData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IFloatData > *arg1 = (SimplygonSDK::CountedPointer< IFloatData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spFloatData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IFloatData > *arg1 = (SimplygonSDK::CountedPointer< IFloatData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spFloatData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IFloatData > *arg1 = (SimplygonSDK::CountedPointer< IFloatData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IFloatData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IGeometryData *arg1 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::CountedPointer< IGeometryData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IGeometryData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IGeometryData > *)new SimplygonSDK::CountedPointer< IGeometryData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IGeometryData > *)new SimplygonSDK::CountedPointer< IGeometryData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IGeometryData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IGeometryData > *)new SimplygonSDK::CountedPointer< IGeometryData >((SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spGeometryData(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IGeometryData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (SimplygonSDK::IGeometryData *) &((SimplygonSDK::CountedPointer< IGeometryData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (SimplygonSDK::IGeometryData *)((SimplygonSDK::CountedPointer< IGeometryData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (SimplygonSDK::IGeometryData *)((SimplygonSDK::CountedPointer< IGeometryData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spGeometryData_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryData_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryData_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IGeometryData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IGeometryData *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetVertices(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->GetVertices();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_Compact__SWIG_0(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->Compact(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_Compact__SWIG_1(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->Compact();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryData_ExtentsContainCoords(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (bool)(*arg1)->ExtentsContainCoords();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddGroupIds(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->AddGroupIds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_FindEdgeIdsFromVertexPairs(void * jarg1, void * jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  (*arg1)->FindEdgeIdsFromVertexPairs(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddTriangles(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->AddTriangles(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddMaterialIds(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->AddMaterialIds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_CopyCombine3Triangles(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Triangles(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_ConvertHandedness(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->ConvertHandedness();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddColors(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->AddColors(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddCustomField(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  (*arg1)->AddCustomField(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveUserVertexField(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->RemoveUserVertexField((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveGroupIds(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->RemoveGroupIds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveCustomField(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->RemoveCustomField((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetGroupIds(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->GetGroupIds();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryData_GetTriangleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTriangleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetVertexIds(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->GetVertexIds();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_Weld(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->Weld(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddUserCornerField(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  (*arg1)->AddUserCornerField(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveVertexLocks(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->RemoveVertexLocks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveNormals(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->RemoveNormals();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetTriangles(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->GetTriangles();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetUserTriangleField(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetUserTriangleField((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetCoords(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->GetCoords();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddUserVertexField(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  (*arg1)->AddUserVertexField(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_ExpandVertices(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->ExpandVertices();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_CopyCorner(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyCorner(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_SetTriangleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTriangleCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddUserTriangleField(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  (*arg1)->AddUserTriangleField(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetCustomField(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetCustomField((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_GetInf(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetInf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_SetInf(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->SetInf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_ExtractTriangles(void * jarg1, void * jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  (*arg1)->ExtractTriangles(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddVertexWeighting(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->AddVertexWeighting();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryData_GetVertexCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_AddBaseTypeCustomField(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (*arg1)->AddBaseTypeCustomField(arg2,(char const *)arg3,arg4);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddBoneWeights(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->AddBoneWeights(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveBoneWeights(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->RemoveBoneWeights();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddTexCoords(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->AddTexCoords(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_CopyCombine3Vertices(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Vertices(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveMaterialIds(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->RemoveMaterialIds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveVertexWeighting(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->RemoveVertexWeighting();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_CleanupNanValues(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->CleanupNanValues();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_CleanupInvalidTriangles(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->CleanupInvalidTriangles();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_AddBaseTypeUserVertexField(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (*arg1)->AddBaseTypeUserVertexField(arg2,(char const *)arg3,arg4);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveUserTriangleField(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->RemoveUserTriangleField((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetNormals(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->GetNormals();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_AddBaseTypeUserTriangleField(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (*arg1)->AddBaseTypeUserTriangleField(arg2,(char const *)arg3,arg4);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddVertexLocks(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->AddVertexLocks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveTexCoords(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveTexCoords(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_CopyTriangle(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTriangle(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_Transform(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IMatrix4x4 *arg2 = (SimplygonSDK::IMatrix4x4 *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IMatrix4x4 *)jarg2; 
  (*arg1)->Transform(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_ExtractRange(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_CopyCombineTriangles(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTriangles(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetVertexLocks(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IBoolArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->GetVertexLocks();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IBoolArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IBoolArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetMaterialIds(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->GetMaterialIds();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetBoneWeights(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->GetBoneWeights();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveColors(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveColors(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveUserCornerField(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->RemoveUserCornerField((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_CopyCombineVertices(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineVertices(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetVertexWeighting(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->GetVertexWeighting();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AppendGeometry(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->AppendGeometry(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetColors(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetColors(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetBoneIds(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->GetBoneIds();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_CopyCombineCorners(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineCorners(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_CopyVertex(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyVertex(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetUserVertexField(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetUserVertexField((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetTexCoords(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetTexCoords(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddTangents(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->AddTangents(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_DetectEdgeNeighbours(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->DetectEdgeNeighbours();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_GetSup(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetSup(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_CopyCombine3Corners(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Corners(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveTangents(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveTangents(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetTangents(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetTangents(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetUserCornerField(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetUserCornerField((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetBitangents(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetBitangents(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetCorners(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->GetCorners();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddNormals(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->AddNormals();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_AddBaseTypeUserCornerField(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (*arg1)->AddBaseTypeUserCornerField(arg2,(char const *)arg3,arg4);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_SetSup(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->SetSup(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_CalculateExtents(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->CalculateExtents(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_NewPackedCopy(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IPackedGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->NewPackedCopy();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IPackedGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IPackedGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_DeepCopy(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  bool arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (*arg1)->DeepCopy(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_SetVertexCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetVertexCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddVertices(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->AddVertices(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spGeometryData_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryData_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryData_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryDataCollection__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IGeometryDataCollection *arg1 = (SimplygonSDK::IGeometryDataCollection *) 0 ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *result = 0 ;
  
  arg1 = (SimplygonSDK::IGeometryDataCollection *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)new SimplygonSDK::CountedPointer< IGeometryDataCollection >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryDataCollection__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)new SimplygonSDK::CountedPointer< IGeometryDataCollection >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryDataCollection__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)new SimplygonSDK::CountedPointer< IGeometryDataCollection >((SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spGeometryDataCollection(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryDataCollection_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IGeometryDataCollection > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::IGeometryDataCollection *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  result = (SimplygonSDK::IGeometryDataCollection *) &((SimplygonSDK::CountedPointer< IGeometryDataCollection > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::IGeometryDataCollection *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  result = (SimplygonSDK::IGeometryDataCollection *)((SimplygonSDK::CountedPointer< IGeometryDataCollection > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::IGeometryDataCollection *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  result = (SimplygonSDK::IGeometryDataCollection *)((SimplygonSDK::CountedPointer< IGeometryDataCollection > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spGeometryDataCollection_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryDataCollection_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryDataCollection_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IGeometryDataCollection *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IGeometryDataCollection *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_AddObject(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->AddObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryDataCollection_IsItemInCollection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (bool)(*arg1)->IsItemInCollection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_FindObject(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindObject((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_GetNextItemAsGeometryData(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rhandle *arg2 = (SimplygonSDK::rhandle *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle *)jarg2; 
  result = (*arg1)->GetNextItemAsGeometryData(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_GetItem(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  unsigned int arg2 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->GetItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryDataCollection_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_AddGeometryData(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->AddGeometryData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_FindGeometryData(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindGeometryData((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_RemoveItem(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->RemoveItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_GetItemAsObject(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (*arg1)->GetItemAsObject(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryDataCollection_IsGeometryDataInCollection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  result = (bool)(*arg1)->IsGeometryDataInCollection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_AddObjectSorted(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  bool arg3 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (SimplygonSDK::rhandle)(*arg1)->AddObjectSorted(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_GetGeometryData(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (*arg1)->GetGeometryData(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryDataCollection_RemoveAllItems(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  (*arg1)->RemoveAllItems();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryDataCollection_IsObjectInCollection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (bool)(*arg1)->IsObjectInCollection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryDataCollection_RemoveGeometryData(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->RemoveGeometryData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_GetFirstItem(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  result = (SimplygonSDK::rhandle)(*arg1)->GetFirstItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_GetNextItem(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->GetNextItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_GetItemsObject(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (*arg1)->GetItemsObject(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryDataCollection_RemoveObject(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  (*arg1)->RemoveObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryDataCollection_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryDataCollection_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryDataCollection_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryDataCollection_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spGeometryDataCollection_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryDataCollection_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryDataCollection_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryDataCollection > *arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryDataCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryGroup__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IGeometryGroup *arg1 = (SimplygonSDK::IGeometryGroup *) 0 ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *result = 0 ;
  
  arg1 = (SimplygonSDK::IGeometryGroup *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IGeometryGroup > *)new SimplygonSDK::CountedPointer< IGeometryGroup >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryGroup__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IGeometryGroup > *)new SimplygonSDK::CountedPointer< IGeometryGroup >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryGroup__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryGroup > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryGroup > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryGroup > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IGeometryGroup > *)new SimplygonSDK::CountedPointer< IGeometryGroup >((SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryGroup > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spGeometryGroup(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryGroup_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IGeometryGroup > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryGroup___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::IGeometryGroup *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  result = (SimplygonSDK::IGeometryGroup *) &((SimplygonSDK::CountedPointer< IGeometryGroup > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryGroup___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::IGeometryGroup *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  result = (SimplygonSDK::IGeometryGroup *)((SimplygonSDK::CountedPointer< IGeometryGroup > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryGroup_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::IGeometryGroup *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  result = (SimplygonSDK::IGeometryGroup *)((SimplygonSDK::CountedPointer< IGeometryGroup > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spGeometryGroup_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryGroup_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryGroup_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryGroup_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IGeometryGroup *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IGeometryGroup *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spGeometryGroup_AppendGeometryData(void * jarg1, void * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->AppendGeometryData(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryGroup_NewSplitGeometryDataCollection(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  result = (*arg1)->NewSplitGeometryDataCollection();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryGroup_GetGroupName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetGroupName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryGroup_ConnectToExistingCombinedGeometry(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->ConnectToExistingCombinedGeometry(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryGroup_GetCombinedGeometry(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  result = (*arg1)->GetCombinedGeometry();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryGroup_GetCopyNewCombinedFields(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  result = (bool)(*arg1)->GetCopyNewCombinedFields();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryGroup_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryGroup_SetGroupName(void * jarg1, int jarg2, char * jarg3) {
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char *)jarg3; 
  (*arg1)->SetGroupName(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryGroup_SetCopyNewCombinedFields(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetCopyNewCombinedFields(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryGroup_SetFromGeometryCollection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::IGeometryDataCollection *arg2 = (SimplygonSDK::IGeometryDataCollection *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryDataCollection *)jarg2; 
  result = (unsigned int)(*arg1)->SetFromGeometryCollection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryGroup_GetSplitGeometryData(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetSplitGeometryData(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryGroup_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryGroup_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryGroup_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryGroup_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryGroup_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spGeometryGroup_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryGroup_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryGroup_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryGroup > *arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryTangentCalculator__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IGeometryTangentCalculator *arg1 = (SimplygonSDK::IGeometryTangentCalculator *) 0 ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *result = 0 ;
  
  arg1 = (SimplygonSDK::IGeometryTangentCalculator *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)new SimplygonSDK::CountedPointer< IGeometryTangentCalculator >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryTangentCalculator__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)new SimplygonSDK::CountedPointer< IGeometryTangentCalculator >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryTangentCalculator__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryTangentCalculator > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryTangentCalculator > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryTangentCalculator > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)new SimplygonSDK::CountedPointer< IGeometryTangentCalculator >((SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryTangentCalculator > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spGeometryTangentCalculator(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryTangentCalculator_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IGeometryTangentCalculator > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryTangentCalculator___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::IGeometryTangentCalculator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  result = (SimplygonSDK::IGeometryTangentCalculator *) &((SimplygonSDK::CountedPointer< IGeometryTangentCalculator > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryTangentCalculator___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::IGeometryTangentCalculator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  result = (SimplygonSDK::IGeometryTangentCalculator *)((SimplygonSDK::CountedPointer< IGeometryTangentCalculator > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryTangentCalculator_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::IGeometryTangentCalculator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  result = (SimplygonSDK::IGeometryTangentCalculator *)((SimplygonSDK::CountedPointer< IGeometryTangentCalculator > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spGeometryTangentCalculator_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryTangentCalculator_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryTangentCalculator_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryTangentCalculator_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IGeometryTangentCalculator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IGeometryTangentCalculator *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryTangentCalculator_SetTexCoordsSetId(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetTexCoordsSetId(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryTangentCalculator_SetTangentCalculatorType(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetTangentCalculatorType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spGeometryTangentCalculator_GetTangentCalculatorType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetTangentCalculatorType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryTangentCalculator_CalculateTangents(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->CalculateTangents(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryTangentCalculator_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryTangentCalculator_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryTangentCalculator_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryTangentCalculator_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryTangentCalculator_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spGeometryTangentCalculator_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryTangentCalculator_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryTangentCalculator_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryTangentCalculator > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryValidator__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IGeometryValidator *arg1 = (SimplygonSDK::IGeometryValidator *) 0 ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *result = 0 ;
  
  arg1 = (SimplygonSDK::IGeometryValidator *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IGeometryValidator > *)new SimplygonSDK::CountedPointer< IGeometryValidator >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryValidator__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IGeometryValidator > *)new SimplygonSDK::CountedPointer< IGeometryValidator >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryValidator__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryValidator > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryValidator > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryValidator > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IGeometryValidator > *)new SimplygonSDK::CountedPointer< IGeometryValidator >((SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryValidator > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spGeometryValidator(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryValidator_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IGeometryValidator > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryValidator___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::IGeometryValidator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  result = (SimplygonSDK::IGeometryValidator *) &((SimplygonSDK::CountedPointer< IGeometryValidator > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryValidator___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::IGeometryValidator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  result = (SimplygonSDK::IGeometryValidator *)((SimplygonSDK::CountedPointer< IGeometryValidator > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryValidator_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::IGeometryValidator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  result = (SimplygonSDK::IGeometryValidator *)((SimplygonSDK::CountedPointer< IGeometryValidator > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spGeometryValidator_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryValidator_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryValidator_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryValidator_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IGeometryValidator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IGeometryValidator *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryValidator_ValidateGeometry(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  result = (bool)(*arg1)->ValidateGeometry(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryValidator_GetErrorString(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  result = (*arg1)->GetErrorString();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryValidator_SetCheckDegenerateFaceIndices(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetCheckDegenerateFaceIndices(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryValidator_SetAllowedBoneCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetAllowedBoneCount(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spGeometryValidator_GetErrorValue(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetErrorValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryValidator_GetCheckDegenerateFaceIndices(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  result = (bool)(*arg1)->GetCheckDegenerateFaceIndices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryValidator_SetCheckZeroAreaFaces(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetCheckZeroAreaFaces(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryValidator_GetCheckZeroAreaFaces(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  result = (bool)(*arg1)->GetCheckZeroAreaFaces();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryValidator_SetAllowedGroupCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetAllowedGroupCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryValidator_SetAllowedMaterialCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetAllowedMaterialCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryValidator_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryValidator_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryValidator_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryValidator_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryValidator_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spGeometryValidator_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryValidator_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryValidator_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryValidator > *arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryValidator > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGraphicsExporter__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IGraphicsExporter *arg1 = (SimplygonSDK::IGraphicsExporter *) 0 ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::IGraphicsExporter *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)new SimplygonSDK::CountedPointer< IGraphicsExporter >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGraphicsExporter__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)new SimplygonSDK::CountedPointer< IGraphicsExporter >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGraphicsExporter__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGraphicsExporter > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IGraphicsExporter > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IGraphicsExporter > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)new SimplygonSDK::CountedPointer< IGraphicsExporter >((SimplygonSDK::CountedPointer< SimplygonSDK::IGraphicsExporter > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spGraphicsExporter(void * jarg1) {
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGraphicsExporter_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IGraphicsExporter > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsExporter___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::IGraphicsExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  result = (SimplygonSDK::IGraphicsExporter *) &((SimplygonSDK::CountedPointer< IGraphicsExporter > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsExporter___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::IGraphicsExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  result = (SimplygonSDK::IGraphicsExporter *)((SimplygonSDK::CountedPointer< IGraphicsExporter > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsExporter_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::IGraphicsExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  result = (SimplygonSDK::IGraphicsExporter *)((SimplygonSDK::CountedPointer< IGraphicsExporter > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spGraphicsExporter_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGraphicsExporter_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGraphicsExporter_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsExporter_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IGraphicsExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IGraphicsExporter *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsExporter_SetExportFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetExportFilePath((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsExporter_GetExportFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  result = (*arg1)->GetExportFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsExporter_SetMaterials(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::IMaterialTable *arg2 = (SimplygonSDK::IMaterialTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterialTable *)jarg2; 
  (*arg1)->SetMaterials(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsExporter_SetGeometries(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::IGeometryDataCollection *arg2 = (SimplygonSDK::IGeometryDataCollection *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryDataCollection *)jarg2; 
  (*arg1)->SetGeometries(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsExporter_SetSingleGeometry(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->SetSingleGeometry(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGraphicsExporter_RunExport(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  result = (bool)(*arg1)->RunExport();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsExporter_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsExporter_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsExporter_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsExporter_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsExporter_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spGraphicsExporter_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsExporter_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsExporter_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsExporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGraphicsImporter__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IGraphicsImporter *arg1 = (SimplygonSDK::IGraphicsImporter *) 0 ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::IGraphicsImporter *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)new SimplygonSDK::CountedPointer< IGraphicsImporter >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGraphicsImporter__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)new SimplygonSDK::CountedPointer< IGraphicsImporter >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGraphicsImporter__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGraphicsImporter > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IGraphicsImporter > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IGraphicsImporter > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)new SimplygonSDK::CountedPointer< IGraphicsImporter >((SimplygonSDK::CountedPointer< SimplygonSDK::IGraphicsImporter > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spGraphicsImporter(void * jarg1) {
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGraphicsImporter_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IGraphicsImporter > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsImporter___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::IGraphicsImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  result = (SimplygonSDK::IGraphicsImporter *) &((SimplygonSDK::CountedPointer< IGraphicsImporter > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsImporter___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::IGraphicsImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  result = (SimplygonSDK::IGraphicsImporter *)((SimplygonSDK::CountedPointer< IGraphicsImporter > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsImporter_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::IGraphicsImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  result = (SimplygonSDK::IGraphicsImporter *)((SimplygonSDK::CountedPointer< IGraphicsImporter > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spGraphicsImporter_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGraphicsImporter_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGraphicsImporter_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsImporter_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IGraphicsImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IGraphicsImporter *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsImporter_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsImporter_GetImportFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  result = (*arg1)->GetImportFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsImporter_SetImportFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetImportFilePath((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsImporter_GetGeometries(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  result = (*arg1)->GetGeometries();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsImporter_GetFirstGeometry(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  result = (*arg1)->GetFirstGeometry();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGraphicsImporter_RunImport(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  result = (bool)(*arg1)->RunImport();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsImporter_GetMaterials(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  result = (*arg1)->GetMaterials();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsImporter_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsImporter_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsImporter_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsImporter_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsImporter_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spGraphicsImporter_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGraphicsImporter_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGraphicsImporter_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGraphicsImporter > *arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGraphicsImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImageData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IImageData *arg1 = (SimplygonSDK::IImageData *) 0 ;
  SimplygonSDK::CountedPointer< IImageData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IImageData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IImageData > *)new SimplygonSDK::CountedPointer< IImageData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImageData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IImageData > *)new SimplygonSDK::CountedPointer< IImageData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImageData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IImageData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IImageData > *)new SimplygonSDK::CountedPointer< IImageData >((SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spImageData(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IImageData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::IImageData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (SimplygonSDK::IImageData *) &((SimplygonSDK::CountedPointer< IImageData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::IImageData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (SimplygonSDK::IImageData *)((SimplygonSDK::CountedPointer< IImageData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::IImageData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (SimplygonSDK::IImageData *)((SimplygonSDK::CountedPointer< IImageData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spImageData_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageData_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageData_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageData_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IImageData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IImageData *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageData_GetXSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetXSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageData_GetImageFields(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (*arg1)->GetImageFields();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageData_GetType(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spImageData_GetColorsValueType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetColorsValueType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_Set3DSize(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->Set3DSize(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_Set2DSize(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->Set2DSize(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spImageData_GetFieldValueType(void * jarg1, char * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->GetFieldValueType((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageData_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_RemoveColors(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  (*arg1)->RemoveColors();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageData_GetYSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetYSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_DeepCopy(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::IImageData *arg2 = (SimplygonSDK::IImageData *) 0 ;
  bool arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (SimplygonSDK::IImageData *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (*arg1)->DeepCopy(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageData_HasColors(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (bool)(*arg1)->HasColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageData_GetColorsFormat(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (*arg1)->GetColorsFormat();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageData_GetColors(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (*arg1)->GetColors();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageData_HasField(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(*arg1)->HasField((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_AddColors(void * jarg1, int jarg2, char * jarg3) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char *)jarg3; 
  (*arg1)->AddColors(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_AddField(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->AddField((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_RemoveField(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->RemoveField((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageData_GetField(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetField((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageData_GetZSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetZSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_Set1DSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->Set1DSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_Reset(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  (*arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_SetCubeSize(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetCubeSize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageData_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spImageData_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageData_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageData_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageData > *arg1 = (SimplygonSDK::CountedPointer< IImageData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImageDataImporter__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IImageDataImporter *arg1 = (SimplygonSDK::IImageDataImporter *) 0 ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::IImageDataImporter *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IImageDataImporter > *)new SimplygonSDK::CountedPointer< IImageDataImporter >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImageDataImporter__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IImageDataImporter > *)new SimplygonSDK::CountedPointer< IImageDataImporter >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImageDataImporter__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataImporter > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataImporter > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataImporter > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IImageDataImporter > *)new SimplygonSDK::CountedPointer< IImageDataImporter >((SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataImporter > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spImageDataImporter(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataImporter_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IImageDataImporter > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataImporter___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::IImageDataImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (SimplygonSDK::IImageDataImporter *) &((SimplygonSDK::CountedPointer< IImageDataImporter > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataImporter___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::IImageDataImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (SimplygonSDK::IImageDataImporter *)((SimplygonSDK::CountedPointer< IImageDataImporter > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataImporter_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::IImageDataImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (SimplygonSDK::IImageDataImporter *)((SimplygonSDK::CountedPointer< IImageDataImporter > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spImageDataImporter_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataImporter_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataImporter_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataImporter_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IImageDataImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IImageDataImporter *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataImporter_SetMaxHeight(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetMaxHeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataImporter_SetOnlyHeader(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetOnlyHeader(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataImporter_SetMaxWidth(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetMaxWidth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataImporter_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataImporter_GetNumberOfChannels(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (unsigned int)(*arg1)->GetNumberOfChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataImporter_GetCapToPowerOfTwo(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (bool)(*arg1)->GetCapToPowerOfTwo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataImporter_SetImportFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetImportFilePath((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataImporter_GetImportFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (*arg1)->GetImportFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataImporter_GetMaxWidth(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (unsigned int)(*arg1)->GetMaxWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataImporter_RunImport(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (bool)(*arg1)->RunImport();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataImporter_GetMaxHeight(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (unsigned int)(*arg1)->GetMaxHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataImporter_GetBitsPerPixel(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (unsigned int)(*arg1)->GetBitsPerPixel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataImporter_SetExtensionOverride(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetExtensionOverride((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataImporter_GetExtensionOverride(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (*arg1)->GetExtensionOverride();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataImporter_GetImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (*arg1)->GetImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataImporter_SetCapToPowerOfTwo(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetCapToPowerOfTwo(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spImageDataImporter_GetImageType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetImageType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataImporter_GetOnlyHeader(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (bool)(*arg1)->GetOnlyHeader();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataImporter_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataImporter_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataImporter_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataImporter_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataImporter_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spImageDataImporter_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataImporter_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataImporter_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataImporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spIntArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IIntArray *arg1 = (SimplygonSDK::IIntArray *) 0 ;
  SimplygonSDK::CountedPointer< IIntArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IIntArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IIntArray > *)new SimplygonSDK::CountedPointer< IIntArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spIntArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IIntArray > *)new SimplygonSDK::CountedPointer< IIntArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spIntArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IIntArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IIntArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IIntArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IIntArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IIntArray > *)new SimplygonSDK::CountedPointer< IIntArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IIntArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spIntArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spIntArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IIntArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spIntArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IIntArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (SimplygonSDK::IIntArray *) &((SimplygonSDK::CountedPointer< IIntArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spIntArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IIntArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (SimplygonSDK::IIntArray *)((SimplygonSDK::CountedPointer< IIntArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spIntArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IIntArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (SimplygonSDK::IIntArray *)((SimplygonSDK::CountedPointer< IIntArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spIntArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spIntArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spIntArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spIntArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IIntArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IIntArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_SetData(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  int *arg2 = (int *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_SetTuple(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (int *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spIntArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_SetDataRange(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  int *arg3 = (int *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spIntArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spIntArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spIntArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spIntArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::IIntData *arg4 = (SimplygonSDK::IIntData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::IIntData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (int *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spIntArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spIntArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spIntArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spIntArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spIntArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_SetItem(void * jarg1, int jarg2, int jarg3) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (int)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spIntArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spIntArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spIntArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_AddItem(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IIntData *arg3 = (SimplygonSDK::IIntData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IIntData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_GetTuple__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (int *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spIntArray_GetItem(void * jarg1, int jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (int)(*arg1)->GetItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_AddTuple(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (int *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::IIntData *arg2 = (SimplygonSDK::IIntData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IIntData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_GetData__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (int *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spIntArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spIntArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spIntArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntArray > *arg1 = (SimplygonSDK::CountedPointer< IIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spIntData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IIntData *arg1 = (SimplygonSDK::IIntData *) 0 ;
  SimplygonSDK::CountedPointer< IIntData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IIntData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IIntData > *)new SimplygonSDK::CountedPointer< IIntData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spIntData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IIntData > *)new SimplygonSDK::CountedPointer< IIntData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spIntData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IIntData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IIntData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IIntData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IIntData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IIntData > *)new SimplygonSDK::CountedPointer< IIntData >((SimplygonSDK::CountedPointer< SimplygonSDK::IIntData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spIntData(void * jarg1) {
  SimplygonSDK::CountedPointer< IIntData > *arg1 = (SimplygonSDK::CountedPointer< IIntData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spIntData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IIntData > *arg1 = (SimplygonSDK::CountedPointer< IIntData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IIntData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spIntData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntData > *arg1 = (SimplygonSDK::CountedPointer< IIntData > *) 0 ;
  SimplygonSDK::IIntData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntData > *)jarg1; 
  result = (SimplygonSDK::IIntData *) &((SimplygonSDK::CountedPointer< IIntData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spIntData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntData > *arg1 = (SimplygonSDK::CountedPointer< IIntData > *) 0 ;
  SimplygonSDK::IIntData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntData > *)jarg1; 
  result = (SimplygonSDK::IIntData *)((SimplygonSDK::CountedPointer< IIntData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spIntData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntData > *arg1 = (SimplygonSDK::CountedPointer< IIntData > *) 0 ;
  SimplygonSDK::IIntData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntData > *)jarg1; 
  result = (SimplygonSDK::IIntData *)((SimplygonSDK::CountedPointer< IIntData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spIntData_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IIntData > *arg1 = (SimplygonSDK::CountedPointer< IIntData > *) 0 ;
  int *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntData > *)jarg1; 
  result = (int *)(*arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spIntData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IIntData > *arg1 = (SimplygonSDK::CountedPointer< IIntData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  int *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (int *) &(*arg1)->GetItem(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IIntData > *arg1 = (SimplygonSDK::CountedPointer< IIntData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IIntData > *arg1 = (SimplygonSDK::CountedPointer< IIntData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spIntData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IIntData > *arg1 = (SimplygonSDK::CountedPointer< IIntData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spIntData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IIntData > *arg1 = (SimplygonSDK::CountedPointer< IIntData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IIntData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spLongArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ILongArray *arg1 = (SimplygonSDK::ILongArray *) 0 ;
  SimplygonSDK::CountedPointer< ILongArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::ILongArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ILongArray > *)new SimplygonSDK::CountedPointer< ILongArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spLongArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ILongArray > *)new SimplygonSDK::CountedPointer< ILongArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spLongArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ILongArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ILongArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ILongArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ILongArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ILongArray > *)new SimplygonSDK::CountedPointer< ILongArray >((SimplygonSDK::CountedPointer< SimplygonSDK::ILongArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spLongArray(void * jarg1) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spLongArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ILongArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spLongArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::ILongArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (SimplygonSDK::ILongArray *) &((SimplygonSDK::CountedPointer< ILongArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spLongArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::ILongArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (SimplygonSDK::ILongArray *)((SimplygonSDK::CountedPointer< ILongArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spLongArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::ILongArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (SimplygonSDK::ILongArray *)((SimplygonSDK::CountedPointer< ILongArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spLongArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spLongArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spLongArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spLongArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ILongArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ILongArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spLongArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spLongArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::ILongData *arg2 = (SimplygonSDK::ILongData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::ILongData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_GetData__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  long *arg2 = (long *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (long *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spLongArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spLongArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spLongArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_SetData(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  long *arg2 = (long *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (long *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_SetTuple(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  long *arg3 = (long *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (long *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spLongArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::ILongData *arg4 = (SimplygonSDK::ILongData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::ILongData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  long *arg4 = (long *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (long *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_SetDataRange(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  long *arg3 = (long *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (long *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_AddTuple(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  long *arg2 = (long *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (long *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spLongArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::ILongData *arg3 = (SimplygonSDK::ILongData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::ILongData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_GetTuple__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  long *arg3 = (long *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (long *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spLongArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spLongArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spLongArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spLongArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_spLongArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_AddItem(void * jarg1, long jarg2) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  long arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (long)jarg2; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_SetItem(void * jarg1, int jarg2, long jarg3) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  long arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (long)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT long SWIGSTDCALL CSharp_spLongArray_GetItem(void * jarg1, int jarg2) {
  long jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  long result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (long)(*arg1)->GetItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spLongArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spLongArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spLongArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spLongArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongArray > *arg1 = (SimplygonSDK::CountedPointer< ILongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spLongData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ILongData *arg1 = (SimplygonSDK::ILongData *) 0 ;
  SimplygonSDK::CountedPointer< ILongData > *result = 0 ;
  
  arg1 = (SimplygonSDK::ILongData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ILongData > *)new SimplygonSDK::CountedPointer< ILongData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spLongData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ILongData > *)new SimplygonSDK::CountedPointer< ILongData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spLongData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ILongData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ILongData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ILongData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ILongData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ILongData > *)new SimplygonSDK::CountedPointer< ILongData >((SimplygonSDK::CountedPointer< SimplygonSDK::ILongData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spLongData(void * jarg1) {
  SimplygonSDK::CountedPointer< ILongData > *arg1 = (SimplygonSDK::CountedPointer< ILongData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spLongData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ILongData > *arg1 = (SimplygonSDK::CountedPointer< ILongData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ILongData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spLongData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongData > *arg1 = (SimplygonSDK::CountedPointer< ILongData > *) 0 ;
  SimplygonSDK::ILongData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongData > *)jarg1; 
  result = (SimplygonSDK::ILongData *) &((SimplygonSDK::CountedPointer< ILongData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spLongData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongData > *arg1 = (SimplygonSDK::CountedPointer< ILongData > *) 0 ;
  SimplygonSDK::ILongData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongData > *)jarg1; 
  result = (SimplygonSDK::ILongData *)((SimplygonSDK::CountedPointer< ILongData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spLongData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongData > *arg1 = (SimplygonSDK::CountedPointer< ILongData > *) 0 ;
  SimplygonSDK::ILongData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongData > *)jarg1; 
  result = (SimplygonSDK::ILongData *)((SimplygonSDK::CountedPointer< ILongData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spLongData_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ILongData > *arg1 = (SimplygonSDK::CountedPointer< ILongData > *) 0 ;
  long *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongData > *)jarg1; 
  result = (long *)(*arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_spLongData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  long jresult ;
  SimplygonSDK::CountedPointer< ILongData > *arg1 = (SimplygonSDK::CountedPointer< ILongData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  long *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (long *) &(*arg1)->GetItem(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ILongData > *arg1 = (SimplygonSDK::CountedPointer< ILongData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ILongData > *arg1 = (SimplygonSDK::CountedPointer< ILongData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spLongData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ILongData > *arg1 = (SimplygonSDK::CountedPointer< ILongData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spLongData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ILongData > *arg1 = (SimplygonSDK::CountedPointer< ILongData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ILongData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMappingImage__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IMappingImage *arg1 = (SimplygonSDK::IMappingImage *) 0 ;
  SimplygonSDK::CountedPointer< IMappingImage > *result = 0 ;
  
  arg1 = (SimplygonSDK::IMappingImage *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IMappingImage > *)new SimplygonSDK::CountedPointer< IMappingImage >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMappingImage__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IMappingImage > *)new SimplygonSDK::CountedPointer< IMappingImage >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMappingImage__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IMappingImage > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IMappingImage > *)new SimplygonSDK::CountedPointer< IMappingImage >((SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spMappingImage(void * jarg1) {
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImage_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IMappingImage > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImage___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::IMappingImage *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  result = (SimplygonSDK::IMappingImage *) &((SimplygonSDK::CountedPointer< IMappingImage > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImage___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::IMappingImage *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  result = (SimplygonSDK::IMappingImage *)((SimplygonSDK::CountedPointer< IMappingImage > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImage_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::IMappingImage *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  result = (SimplygonSDK::IMappingImage *)((SimplygonSDK::CountedPointer< IMappingImage > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spMappingImage_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImage_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImage_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImage_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IMappingImage *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IMappingImage *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImage_GetLayerCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  result = (unsigned int)(*arg1)->GetLayerCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImage_GetMultisamplingWidth(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  result = (unsigned int)(*arg1)->GetMultisamplingWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImage_GetMultisamplingHeight(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  result = (unsigned int)(*arg1)->GetMultisamplingHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImage_GetImageData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IChunkedImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  result = (*arg1)->GetImageData();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IChunkedImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IChunkedImageData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImage_GetMappingMeshData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageMeshData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  result = (*arg1)->GetMappingMeshData();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageMeshData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageMeshData > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImage_GetHeight(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  result = (unsigned int)(*arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImage_GetWidth(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  result = (unsigned int)(*arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImage_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImage_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImage_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImage_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImage_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMappingImage_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImage_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImage_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImage > *arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImage > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMappingImageMeshData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IMappingImageMeshData *arg1 = (SimplygonSDK::IMappingImageMeshData *) 0 ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IMappingImageMeshData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)new SimplygonSDK::CountedPointer< IMappingImageMeshData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMappingImageMeshData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)new SimplygonSDK::CountedPointer< IMappingImageMeshData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMappingImageMeshData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageMeshData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageMeshData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageMeshData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)new SimplygonSDK::CountedPointer< IMappingImageMeshData >((SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageMeshData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spMappingImageMeshData(void * jarg1) {
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageMeshData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IMappingImageMeshData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImageMeshData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::IMappingImageMeshData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  result = (SimplygonSDK::IMappingImageMeshData *) &((SimplygonSDK::CountedPointer< IMappingImageMeshData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImageMeshData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::IMappingImageMeshData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  result = (SimplygonSDK::IMappingImageMeshData *)((SimplygonSDK::CountedPointer< IMappingImageMeshData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImageMeshData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::IMappingImageMeshData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  result = (SimplygonSDK::IMappingImageMeshData *)((SimplygonSDK::CountedPointer< IMappingImageMeshData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spMappingImageMeshData_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageMeshData_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageMeshData_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImageMeshData_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IMappingImageMeshData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IMappingImageMeshData *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImageMeshData_GetScenePathOfGeometry(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetScenePathOfGeometry(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageMeshData_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageMeshData_GetMappedGeometriesCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetMappedGeometriesCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMappingImageMeshData_GetStartTriangleIdOfGeometry(void * jarg1, int jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->GetStartTriangleIdOfGeometry(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageMeshData_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageMeshData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageMeshData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageMeshData_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImageMeshData_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMappingImageMeshData_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageMeshData_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImageMeshData_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageMeshData > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageMeshData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMappingImageSettings__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IMappingImageSettings *arg1 = (SimplygonSDK::IMappingImageSettings *) 0 ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::IMappingImageSettings *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)new SimplygonSDK::CountedPointer< IMappingImageSettings >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMappingImageSettings__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)new SimplygonSDK::CountedPointer< IMappingImageSettings >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMappingImageSettings__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)new SimplygonSDK::CountedPointer< IMappingImageSettings >((SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spMappingImageSettings(void * jarg1) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IMappingImageSettings > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImageSettings___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::IMappingImageSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (SimplygonSDK::IMappingImageSettings *) &((SimplygonSDK::CountedPointer< IMappingImageSettings > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImageSettings___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::IMappingImageSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (SimplygonSDK::IMappingImageSettings *)((SimplygonSDK::CountedPointer< IMappingImageSettings > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImageSettings_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::IMappingImageSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (SimplygonSDK::IMappingImageSettings *)((SimplygonSDK::CountedPointer< IMappingImageSettings > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spMappingImageSettings_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImageSettings_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IMappingImageSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IMappingImageSettings *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetTexCoordLevel(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetTexCoordLevel(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetHeight__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetHeight__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(*arg1)->GetHeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetInputMaterialCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetInputMaterialCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetGutterSpace__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetGutterSpace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetGutterSpace__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(*arg1)->GetGutterSpace(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMappingImageSettings_GetInputOutputMaterialMapping(void * jarg1, unsigned int jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->GetInputOutputMaterialMapping(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetInputMaterialCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetInputMaterialCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetGutterSpace__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetGutterSpace(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetGutterSpace__SWIG_1(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetGutterSpace(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetMaxStretch(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetMaxStretch(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetOutputMaterialCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOutputMaterialCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetWidth__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(*arg1)->GetWidth(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetWidth__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetGenerateTexCoords(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetGenerateTexCoords(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetMaximumLayers(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetMaximumLayers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetFullRetexturing(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (bool)(*arg1)->GetFullRetexturing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetFullRetexturing(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetFullRetexturing(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetBaseAtlasOnOriginalUseAreaWeighting(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (bool)(*arg1)->GetBaseAtlasOnOriginalUseAreaWeighting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetHeight__SWIG_0(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetHeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetHeight__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetHeight(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetForcePower2Texture(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (bool)(*arg1)->GetForcePower2Texture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetGenerateTangents(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetGenerateTangents(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetMaximumLayers(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetMaximumLayers(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetOutputMaterialCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOutputMaterialCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetMultisamplingLevel__SWIG_0(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetMultisamplingLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetMultisamplingLevel__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetMultisamplingLevel(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMappingImageSettings_GetTexCoordLevel(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetTexCoordLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetGenerateMappingImage(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetGenerateMappingImage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetAutomaticTextureSizeMultiplier(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetAutomaticTextureSizeMultiplier(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMappingImageSettings_GetAutomaticTextureSizeMultiplier(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetAutomaticTextureSizeMultiplier();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetUseVisibilityWeights(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseVisibilityWeights(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetGenerateTexCoords(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (bool)(*arg1)->GetGenerateTexCoords();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetInputOutputMaterialMapping(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetInputOutputMaterialMapping(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMappingImageSettings_GetBaseAtlasOnOriginalTexCoordLevel(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseAtlasOnOriginalTexCoordLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetMultisamplingLevel__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(*arg1)->GetMultisamplingLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetMultisamplingLevel__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetMultisamplingLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetUseVisibilityWeights(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (bool)(*arg1)->GetUseVisibilityWeights();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetWidth__SWIG_0(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetWidth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetWidth__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetWidth(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetUseVertexWeights(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (bool)(*arg1)->GetUseVertexWeights();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetAutomaticTextureSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetAutomaticTextureSize(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMappingImageSettings_GetMaxStretch(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMaxStretch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetForcePower2Texture(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetForcePower2Texture(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetGenerateMappingImage(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (bool)(*arg1)->GetGenerateMappingImage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetGenerateTangents(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (bool)(*arg1)->GetGenerateTangents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetAutomaticTextureSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (bool)(*arg1)->GetAutomaticTextureSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetUseVertexWeights(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseVertexWeights(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetBaseAtlasOnOriginalTexCoords(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetBaseAtlasOnOriginalTexCoords(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMappingImageSettings_GetBaseAtlasOnOriginalTexCoords(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (bool)(*arg1)->GetBaseAtlasOnOriginalTexCoords();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetBaseAtlasOnOriginalTexCoordLevel(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetBaseAtlasOnOriginalTexCoordLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetBaseAtlasOnOriginalUseAreaWeighting(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetBaseAtlasOnOriginalUseAreaWeighting(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImageSettings_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMappingImageSettings_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMappingImageSettings_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMappingImageSettings_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMappingImageSettings > *arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMappingImageSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMaterial__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IMaterial *arg1 = (SimplygonSDK::IMaterial *) 0 ;
  SimplygonSDK::CountedPointer< IMaterial > *result = 0 ;
  
  arg1 = (SimplygonSDK::IMaterial *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IMaterial > *)new SimplygonSDK::CountedPointer< IMaterial >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMaterial__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IMaterial > *)new SimplygonSDK::CountedPointer< IMaterial >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMaterial__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IMaterial > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IMaterial > *)new SimplygonSDK::CountedPointer< IMaterial >((SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spMaterial(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterial_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IMaterial > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterial___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::IMaterial *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::IMaterial *) &((SimplygonSDK::CountedPointer< IMaterial > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterial___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::IMaterial *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::IMaterial *)((SimplygonSDK::CountedPointer< IMaterial > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterial_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::IMaterial *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::IMaterial *)((SimplygonSDK::CountedPointer< IMaterial > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spMaterial_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterial_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterial_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterial_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IMaterial *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IMaterial *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetColorRed(void * jarg1, char * jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetColorRed((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetLuminanceComponentIndex(void * jarg1, char * jarg2, int jarg3) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  (*arg1)->SetLuminanceComponentIndex((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_LoadShadingNetworkFromXML(void * jarg1, char * jarg2, char * jarg3) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (*arg1)->LoadShadingNetworkFromXML((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterial_GetChannelFromIndex(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetChannelFromIndex(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetDiffuseGreen(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetDiffuseGreen(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterial_GetLayeredTextureBlendType(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->GetLayeredTextureBlendType((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetSpecularBlue(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetSpecularBlue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetSpecularGreen(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetSpecularGreen(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetDisplacement(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetDisplacement(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterial_GetLuminanceComponentIndex(void * jarg1, char * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->GetLuminanceComponentIndex((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetDiffuseTextureHasAlpha(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetDiffuseTextureHasAlpha(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetAmbientBlue(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetAmbientBlue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetDiffuseRed(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetDiffuseRed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterial_IsTransparent(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (bool)(*arg1)->IsTransparent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterial_GetTexture(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetTexture((char const *)arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterial_GetVertexColorChannel(void * jarg1, char * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->GetVertexColorChannel((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterial_GetShadingNetwork(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetShadingNetwork((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterial_SaveShadingNetworkToXML(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->SaveShadingNetworkToXML((char const *)arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetAmbientRed(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetAmbientRed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetDisplacement(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetDisplacement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetColorGreen(void * jarg1, char * jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetColorGreen((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetSpecularRed(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetSpecularRed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetTextureImage(void * jarg1, char * jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::IImageData *arg3 = (SimplygonSDK::IImageData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::IImageData *)jarg3; 
  (*arg1)->SetTextureImage((char const *)arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetLuminance(void * jarg1, char * jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetLuminance((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetColor(void * jarg1, char * jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetColor((char const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetSpecularGreen(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetSpecularGreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_ChangeTexturePrefixPath(void * jarg1, char * jarg2, char * jarg3) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (*arg1)->ChangeTexturePrefixPath((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterial_GetLayeredTextureSize(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (unsigned int)(*arg1)->GetLayeredTextureSize((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterial_GetTextureImage(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetTextureImage((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetShininess(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetShininess(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetTextureLevel(void * jarg1, char * jarg2, int jarg3) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  (*arg1)->SetTextureLevel((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetLayeredTextureImage(void * jarg1, char * jarg2, int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::IImageData *arg4 = (SimplygonSDK::IImageData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::IImageData *)jarg4; 
  (*arg1)->SetLayeredTextureImage((char const *)arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetDiffuseRed(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetDiffuseRed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetAmbientBlue(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetAmbientBlue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_AddUserChannel(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->AddUserChannel((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetTexture(void * jarg1, char * jarg2, char * jarg3) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (*arg1)->SetTexture((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterial_GetLayeredTextureImage(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (*arg1)->GetLayeredTextureImage((char const *)arg2,arg3);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetAmbientRed(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetAmbientRed(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetAmbientGreen(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetAmbientGreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterial_GetTextureLevel(void * jarg1, char * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->GetTextureLevel((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetLayeredTextureLevel(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->SetLayeredTextureLevel((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetLayeredTextureSize(void * jarg1, char * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetLayeredTextureSize((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetDiffuseBlue(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetDiffuseBlue(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetSpecularBlue(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetSpecularBlue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetDiffuseColor(void * jarg1, float jarg2, float jarg3, float jarg4) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  (*arg1)->SetDiffuseColor(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterial_IsIdenticalTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::IMaterial *arg2 = (SimplygonSDK::IMaterial *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterial *)jarg2; 
  result = (bool)(*arg1)->IsIdenticalTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetAmbientColor(void * jarg1, float jarg2, float jarg3, float jarg4) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  (*arg1)->SetAmbientColor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetOpacity(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetOpacity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetSpecularColor(void * jarg1, float jarg2, float jarg3, float jarg4) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  (*arg1)->SetSpecularColor(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetOpacity(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetOpacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetLuminance(void * jarg1, char * jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetLuminance((char const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterial_GetLayeredTextureLevel(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->GetLayeredTextureLevel((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetLayeredTextureBlendType(void * jarg1, char * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->SetLayeredTextureBlendType((char const *)arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetDiffuseGreen(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetDiffuseGreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetLayeredTexture(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (char *)jarg4; 
  (*arg1)->SetLayeredTexture((char const *)arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterial_GetLayeredTexture(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (*arg1)->GetLayeredTexture((char const *)arg2,arg3);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetShininess(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetShininess();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetTangentSpaceNormals(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetTangentSpaceNormals(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetDiffuseBlue(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetDiffuseBlue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetSpecularRed(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetSpecularRed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetShadingNetwork(void * jarg1, char * jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::IShadingNode *arg3 = (SimplygonSDK::IShadingNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::IShadingNode *)jarg3; 
  (*arg1)->SetShadingNetwork((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetAmbientGreen(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetAmbientGreen(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterial_GetTangentSpaceNormals(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (bool)(*arg1)->GetTangentSpaceNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterial_GetDiffuseTextureHasAlpha(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (bool)(*arg1)->GetDiffuseTextureHasAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterial_GetChannelCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (unsigned int)(*arg1)->GetChannelCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_RemoveUserChannel(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->RemoveUserChannel((char const *)arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetColorBlue(void * jarg1, char * jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetColorBlue((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterial_HasUserChannel(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(*arg1)->HasUserChannel((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetColorRGB(void * jarg1, char * jarg2, float jarg3, float jarg4, float jarg5) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  (*arg1)->SetColorRGB((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMaterial_GetColorAlpha(void * jarg1, char * jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetColorAlpha((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetVertexColorChannel(void * jarg1, char * jarg2, int jarg3) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  (*arg1)->SetVertexColorChannel((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterial_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterial_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterial_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterial_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterial > *arg1 = (SimplygonSDK::CountedPointer< IMaterial > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterial > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMaterialCaster__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IMaterialCaster *arg1 = (SimplygonSDK::IMaterialCaster *) 0 ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *result = 0 ;
  
  arg1 = (SimplygonSDK::IMaterialCaster *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IMaterialCaster > *)new SimplygonSDK::CountedPointer< IMaterialCaster >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMaterialCaster__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IMaterialCaster > *)new SimplygonSDK::CountedPointer< IMaterialCaster >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMaterialCaster__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialCaster > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialCaster > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialCaster > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IMaterialCaster > *)new SimplygonSDK::CountedPointer< IMaterialCaster >((SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialCaster > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spMaterialCaster(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterialCaster_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IMaterialCaster > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialCaster___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::IMaterialCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (SimplygonSDK::IMaterialCaster *) &((SimplygonSDK::CountedPointer< IMaterialCaster > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialCaster___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::IMaterialCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (SimplygonSDK::IMaterialCaster *)((SimplygonSDK::CountedPointer< IMaterialCaster > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialCaster_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::IMaterialCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (SimplygonSDK::IMaterialCaster *)((SimplygonSDK::CountedPointer< IMaterialCaster > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spMaterialCaster_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterialCaster_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterialCaster_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialCaster_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IMaterialCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IMaterialCaster *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_SetDestMaterialId(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetDestMaterialId(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_RunProcessing(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  (*arg1)->RunProcessing();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialCaster_GetMappingImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (*arg1)->GetMappingImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialCaster_GetOutputFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (*arg1)->GetOutputFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterialCaster_GetDestMaterialId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetDestMaterialId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterialCaster_GetOutputChannelBitDepth(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOutputChannelBitDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialCaster_GetSourceMaterials(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (*arg1)->GetSourceMaterials();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterialCaster_GetOutputChannels(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOutputChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_SetOutputFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetOutputFilePath((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_SetOutputChannels(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOutputChannels(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_SetDestMaterial(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::IMaterial *arg2 = (SimplygonSDK::IMaterial *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterial *)jarg2; 
  (*arg1)->SetDestMaterial(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialCaster_GetOutputImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (*arg1)->GetOutputImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_SetOutputImage(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::IImageData *arg2 = (SimplygonSDK::IImageData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IImageData *)jarg2; 
  (*arg1)->SetOutputImage(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialCaster_GetDestMaterial(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (*arg1)->GetDestMaterial();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_SetSourceTextures(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::ITextureTable *arg2 = (SimplygonSDK::ITextureTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (SimplygonSDK::ITextureTable *)jarg2; 
  (*arg1)->SetSourceTextures(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_SetMappingImage(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::IMappingImage *arg2 = (SimplygonSDK::IMappingImage *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMappingImage *)jarg2; 
  (*arg1)->SetMappingImage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_SetDilation(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetDilation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_CastMaterials(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  (*arg1)->CastMaterials();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterialCaster_GetDilation(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetDilation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_SetOutputChannelBitDepth(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOutputChannelBitDepth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialCaster_GetSourceTextures(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (*arg1)->GetSourceTextures();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_SetSourceMaterials(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::IMaterialTable *arg2 = (SimplygonSDK::IMaterialTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterialTable *)jarg2; 
  (*arg1)->SetSourceMaterials(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialCaster_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterialCaster_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialCaster_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialCaster_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialCaster > *arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMaterialTable__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IMaterialTable *arg1 = (SimplygonSDK::IMaterialTable *) 0 ;
  SimplygonSDK::CountedPointer< IMaterialTable > *result = 0 ;
  
  arg1 = (SimplygonSDK::IMaterialTable *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IMaterialTable > *)new SimplygonSDK::CountedPointer< IMaterialTable >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMaterialTable__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IMaterialTable > *)new SimplygonSDK::CountedPointer< IMaterialTable >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMaterialTable__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IMaterialTable > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IMaterialTable > *)new SimplygonSDK::CountedPointer< IMaterialTable >((SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spMaterialTable(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterialTable_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IMaterialTable > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialTable___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::IMaterialTable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  result = (SimplygonSDK::IMaterialTable *) &((SimplygonSDK::CountedPointer< IMaterialTable > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialTable___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::IMaterialTable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  result = (SimplygonSDK::IMaterialTable *)((SimplygonSDK::CountedPointer< IMaterialTable > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialTable_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::IMaterialTable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  result = (SimplygonSDK::IMaterialTable *)((SimplygonSDK::CountedPointer< IMaterialTable > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spMaterialTable_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterialTable_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterialTable_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialTable_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IMaterialTable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IMaterialTable *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialTable_FindIdenticalMaterial(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::IMaterial *arg2 = (SimplygonSDK::IMaterial *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterial *)jarg2; 
  result = (*arg1)->FindIdenticalMaterial(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterialTable_AddMaterial(void * jarg1, void * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::IMaterial *arg2 = (SimplygonSDK::IMaterial *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterial *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->AddMaterial(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterialTable_FindMaterialId(void * jarg1, char * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->FindMaterialId((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialTable_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialTable_SetItem(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IObject *arg3 = (SimplygonSDK::IObject *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IObject *)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialTable_SetMaterial(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IMaterial *arg3 = (SimplygonSDK::IMaterial *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IMaterial *)jarg3; 
  (*arg1)->SetMaterial(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialTable_FindIdenticalMaterialIds(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::IMaterial *arg2 = (SimplygonSDK::IMaterial *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterial *)jarg2; 
  result = (*arg1)->FindIdenticalMaterialIds(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialTable_GetMaterial(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetMaterial(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialTable_RemoveMaterial(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveMaterial(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterialTable_AddItem(void * jarg1, void * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->AddItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterialTable_FindItemId(void * jarg1, char * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->FindItemId((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialTable_RemoveItem(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveItem(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterialTable_GetItemsCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialTable_GetItem(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetItem(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialTable_FindMaterial(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindMaterial((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterialTable_FindIdenticalMaterialId(void * jarg1, void * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::IMaterial *arg2 = (SimplygonSDK::IMaterial *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterial *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->FindIdenticalMaterialId(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMaterialTable_GetMaterialsCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  result = (unsigned int)(*arg1)->GetMaterialsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialTable_ChangeTexturePrefixPath(void * jarg1, char * jarg2, char * jarg3) {
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (*arg1)->ChangeTexturePrefixPath((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialTable_FindItem(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindItem((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialTable_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialTable_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialTable_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialTable_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialTable_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMaterialTable_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMaterialTable_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMaterialTable_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMaterialTable > *arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMaterialTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMatrix4x4__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IMatrix4x4 *arg1 = (SimplygonSDK::IMatrix4x4 *) 0 ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *result = 0 ;
  
  arg1 = (SimplygonSDK::IMatrix4x4 *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)new SimplygonSDK::CountedPointer< IMatrix4x4 >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMatrix4x4__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)new SimplygonSDK::CountedPointer< IMatrix4x4 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spMatrix4x4__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)new SimplygonSDK::CountedPointer< IMatrix4x4 >((SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spMatrix4x4(void * jarg1) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMatrix4x4_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IMatrix4x4 > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMatrix4x4___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::IMatrix4x4 *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  result = (SimplygonSDK::IMatrix4x4 *) &((SimplygonSDK::CountedPointer< IMatrix4x4 > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMatrix4x4___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::IMatrix4x4 *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  result = (SimplygonSDK::IMatrix4x4 *)((SimplygonSDK::CountedPointer< IMatrix4x4 > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMatrix4x4_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::IMatrix4x4 *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  result = (SimplygonSDK::IMatrix4x4 *)((SimplygonSDK::CountedPointer< IMatrix4x4 > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spMatrix4x4_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMatrix4x4_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spMatrix4x4_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMatrix4x4_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IMatrix4x4 *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IMatrix4x4 *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_Zero(void * jarg1) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  (*arg1)->Zero();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_Point3ArrayMultiply(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::IRealArray *arg2 = (SimplygonSDK::IRealArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::IRealArray *)jarg2; 
  (*arg1)->Point3ArrayMultiply(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_SetElement(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::real arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  (*arg1)->SetElement(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_Identity(void * jarg1) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  (*arg1)->Identity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_SetToScalingTransform(void * jarg1, float jarg2, float jarg3, float jarg4) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::real arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  (*arg1)->SetToScalingTransform(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_SetToTranslationTransform(void * jarg1, float jarg2, float jarg3, float jarg4) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::real arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  (*arg1)->SetToTranslationTransform(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_Invert__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::IMatrix4x4 *arg2 = (SimplygonSDK::IMatrix4x4 *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::IMatrix4x4 *)jarg2; 
  (*arg1)->Invert(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_Invert__SWIG_1(void * jarg1) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  (*arg1)->Invert();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_Direction3ArrayMultiply(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::IRealArray *arg2 = (SimplygonSDK::IRealArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::IRealArray *)jarg2; 
  (*arg1)->Direction3ArrayMultiply(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_Vector4ArrayMultiply(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::IRealArray *arg2 = (SimplygonSDK::IRealArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::IRealArray *)jarg2; 
  (*arg1)->Vector4ArrayMultiply(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spMatrix4x4_GetElement(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  float jresult ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (SimplygonSDK::real)(*arg1)->GetElement(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_SetToRotationTransform(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::real arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  (*arg1)->SetToRotationTransform(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_GetElements(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetElements(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::IMatrix4x4 *arg2 = (SimplygonSDK::IMatrix4x4 *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::IMatrix4x4 *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_Transpose__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::IMatrix4x4 *arg2 = (SimplygonSDK::IMatrix4x4 *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::IMatrix4x4 *)jarg2; 
  (*arg1)->Transpose(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_Transpose__SWIG_1(void * jarg1) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  (*arg1)->Transpose();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMatrix4x4_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spMatrix4x4_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spMatrix4x4_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spMatrix4x4_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IMatrix4x4 > *arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IMatrix4x4 > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spNormalCalculationSettings__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::INormalCalculationSettings *arg1 = (SimplygonSDK::INormalCalculationSettings *) 0 ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::INormalCalculationSettings *)jarg1; 
  result = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)new SimplygonSDK::CountedPointer< INormalCalculationSettings >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spNormalCalculationSettings__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)new SimplygonSDK::CountedPointer< INormalCalculationSettings >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spNormalCalculationSettings__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::INormalCalculationSettings > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::INormalCalculationSettings > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::INormalCalculationSettings > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)new SimplygonSDK::CountedPointer< INormalCalculationSettings >((SimplygonSDK::CountedPointer< SimplygonSDK::INormalCalculationSettings > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spNormalCalculationSettings(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCalculationSettings_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< INormalCalculationSettings > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCalculationSettings___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::INormalCalculationSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  result = (SimplygonSDK::INormalCalculationSettings *) &((SimplygonSDK::CountedPointer< INormalCalculationSettings > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCalculationSettings___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::INormalCalculationSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  result = (SimplygonSDK::INormalCalculationSettings *)((SimplygonSDK::CountedPointer< INormalCalculationSettings > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCalculationSettings_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::INormalCalculationSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  result = (SimplygonSDK::INormalCalculationSettings *)((SimplygonSDK::CountedPointer< INormalCalculationSettings > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spNormalCalculationSettings_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCalculationSettings_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCalculationSettings_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCalculationSettings_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::INormalCalculationSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::INormalCalculationSettings *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spNormalCalculationSettings_GetHardEdgeAngle(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetHardEdgeAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCalculationSettings_SetRepairInvalidNormals(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetRepairInvalidNormals(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCalculationSettings_GetScaleByArea(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  result = (bool)(*arg1)->GetScaleByArea();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCalculationSettings_SetHardEdgeAngle(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetHardEdgeAngle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCalculationSettings_SetReplaceNormals(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetReplaceNormals(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCalculationSettings_GetRepairInvalidNormals(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  result = (bool)(*arg1)->GetRepairInvalidNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCalculationSettings_SetScaleByArea(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetScaleByArea(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCalculationSettings_GetScaleByAngle(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  result = (bool)(*arg1)->GetScaleByAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCalculationSettings_SetScaleByAngle(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetScaleByAngle(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCalculationSettings_GetReplaceNormals(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  result = (bool)(*arg1)->GetReplaceNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCalculationSettings_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCalculationSettings_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCalculationSettings_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCalculationSettings_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCalculationSettings_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spNormalCalculationSettings_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCalculationSettings_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCalculationSettings_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCalculationSettings > *arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCalculationSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spNormalCaster__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::INormalCaster *arg1 = (SimplygonSDK::INormalCaster *) 0 ;
  SimplygonSDK::CountedPointer< INormalCaster > *result = 0 ;
  
  arg1 = (SimplygonSDK::INormalCaster *)jarg1; 
  result = (SimplygonSDK::CountedPointer< INormalCaster > *)new SimplygonSDK::CountedPointer< INormalCaster >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spNormalCaster__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< INormalCaster > *)new SimplygonSDK::CountedPointer< INormalCaster >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spNormalCaster__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::INormalCaster > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< INormalCaster > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::INormalCaster > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::INormalCaster > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< INormalCaster > *)new SimplygonSDK::CountedPointer< INormalCaster >((SimplygonSDK::CountedPointer< SimplygonSDK::INormalCaster > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spNormalCaster(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCaster_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< INormalCaster > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCaster___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::INormalCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (SimplygonSDK::INormalCaster *) &((SimplygonSDK::CountedPointer< INormalCaster > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCaster___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::INormalCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (SimplygonSDK::INormalCaster *)((SimplygonSDK::CountedPointer< INormalCaster > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCaster_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::INormalCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (SimplygonSDK::INormalCaster *)((SimplygonSDK::CountedPointer< INormalCaster > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spNormalCaster_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCaster_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCaster_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCaster_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::INormalCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::INormalCaster *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCaster_GetDilation(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetDilation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetOutputChannelBitDepth(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOutputChannelBitDepth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetFlipBackfacingNormals(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetFlipBackfacingNormals(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetMappingImage(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::IMappingImage *arg2 = (SimplygonSDK::IMappingImage *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMappingImage *)jarg2; 
  (*arg1)->SetMappingImage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetOutputChannels(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOutputChannels(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetSourceTextures(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::ITextureTable *arg2 = (SimplygonSDK::ITextureTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::ITextureTable *)jarg2; 
  (*arg1)->SetSourceTextures(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCaster_GetOutputChannels(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOutputChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCaster_GetFlippedGreen(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (bool)(*arg1)->GetFlippedGreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetFlippedGreen(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetFlippedGreen(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCaster_GetOutputImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (*arg1)->GetOutputImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetDestMaterial(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::IMaterial *arg2 = (SimplygonSDK::IMaterial *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterial *)jarg2; 
  (*arg1)->SetDestMaterial(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCaster_GetSourceTextures(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (*arg1)->GetSourceTextures();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spNormalCaster_GetNormalMapTextureLevel(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetNormalMapTextureLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCaster_GetDestMaterial(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (*arg1)->GetDestMaterial();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spNormalCaster_GetDestMaterialId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetDestMaterialId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCaster_GetMappingImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (*arg1)->GetMappingImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCaster_GetOutputChannelBitDepth(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOutputChannelBitDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCaster_GetSourceMaterials(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (*arg1)->GetSourceMaterials();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_RunProcessing(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  (*arg1)->RunProcessing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetDilation(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetDilation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetSourceMaterials(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::IMaterialTable *arg2 = (SimplygonSDK::IMaterialTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterialTable *)jarg2; 
  (*arg1)->SetSourceMaterials(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetDestMaterialId(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetDestMaterialId(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCaster_GetFlipBackfacingNormals(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (bool)(*arg1)->GetFlipBackfacingNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetOutputFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetOutputFilePath((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetOutputImage(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::IImageData *arg2 = (SimplygonSDK::IImageData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IImageData *)jarg2; 
  (*arg1)->SetOutputImage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCaster_GetOutputFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (*arg1)->GetOutputFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_CastMaterials(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  (*arg1)->CastMaterials();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetGenerateTangentSpaceNormals(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetGenerateTangentSpaceNormals(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetFillMode(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFillMode(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalCaster_GetGenerateTangentSpaceNormals(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (bool)(*arg1)->GetGenerateTangentSpaceNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetNormalMapTextureLevel(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetNormalMapTextureLevel(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spNormalCaster_GetFillMode(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (int)(*arg1)->GetFillMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCaster_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spNormalCaster_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalCaster_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalCaster_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalCaster > *arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spNormalRepairer__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::INormalRepairer *arg1 = (SimplygonSDK::INormalRepairer *) 0 ;
  SimplygonSDK::CountedPointer< INormalRepairer > *result = 0 ;
  
  arg1 = (SimplygonSDK::INormalRepairer *)jarg1; 
  result = (SimplygonSDK::CountedPointer< INormalRepairer > *)new SimplygonSDK::CountedPointer< INormalRepairer >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spNormalRepairer__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< INormalRepairer > *)new SimplygonSDK::CountedPointer< INormalRepairer >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spNormalRepairer__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::INormalRepairer > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< INormalRepairer > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::INormalRepairer > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::INormalRepairer > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< INormalRepairer > *)new SimplygonSDK::CountedPointer< INormalRepairer >((SimplygonSDK::CountedPointer< SimplygonSDK::INormalRepairer > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spNormalRepairer(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalRepairer_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< INormalRepairer > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalRepairer___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::INormalRepairer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  result = (SimplygonSDK::INormalRepairer *) &((SimplygonSDK::CountedPointer< INormalRepairer > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalRepairer___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::INormalRepairer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  result = (SimplygonSDK::INormalRepairer *)((SimplygonSDK::CountedPointer< INormalRepairer > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalRepairer_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::INormalRepairer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  result = (SimplygonSDK::INormalRepairer *)((SimplygonSDK::CountedPointer< INormalRepairer > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spNormalRepairer_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalRepairer_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalRepairer_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalRepairer_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::INormalRepairer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::INormalRepairer *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalRepairer_GetBorderFlagsMask(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  result = (unsigned int)(*arg1)->GetBorderFlagsMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalRepairer_RunProcessing(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  (*arg1)->RunProcessing();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalRepairer_GetScaleByArea(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  result = (bool)(*arg1)->GetScaleByArea();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalRepairer_GetScaleByAngle(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  result = (bool)(*arg1)->GetScaleByAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spNormalRepairer_GetHardEdgeAngle(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetHardEdgeAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalRepairer_SetScaleByAngle(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetScaleByAngle(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalRepairer_GetRepairOnlyInvalidNormals(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  result = (bool)(*arg1)->GetRepairOnlyInvalidNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalRepairer_SetRepairOnlyInvalidNormals(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetRepairOnlyInvalidNormals(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalRepairer_SetHardEdgeAngle(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetHardEdgeAngle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalRepairer_SetBorderFlagsMask(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetBorderFlagsMask(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalRepairer_SetGeometry(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->SetGeometry(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalRepairer_GetGeometry(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  result = (*arg1)->GetGeometry();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalRepairer_SetScaleByArea(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetScaleByArea(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalRepairer_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalRepairer_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalRepairer_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalRepairer_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalRepairer_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spNormalRepairer_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalRepairer_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalRepairer_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalRepairer > *arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalRepairer > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spObjectCollection__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IObjectCollection *arg1 = (SimplygonSDK::IObjectCollection *) 0 ;
  SimplygonSDK::CountedPointer< IObjectCollection > *result = 0 ;
  
  arg1 = (SimplygonSDK::IObjectCollection *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IObjectCollection > *)new SimplygonSDK::CountedPointer< IObjectCollection >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spObjectCollection__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IObjectCollection > *)new SimplygonSDK::CountedPointer< IObjectCollection >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spObjectCollection__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IObjectCollection > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IObjectCollection > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IObjectCollection > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IObjectCollection > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IObjectCollection > *)new SimplygonSDK::CountedPointer< IObjectCollection >((SimplygonSDK::CountedPointer< SimplygonSDK::IObjectCollection > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spObjectCollection(void * jarg1) {
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spObjectCollection_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IObjectCollection > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::IObjectCollection *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  result = (SimplygonSDK::IObjectCollection *) &((SimplygonSDK::CountedPointer< IObjectCollection > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::IObjectCollection *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  result = (SimplygonSDK::IObjectCollection *)((SimplygonSDK::CountedPointer< IObjectCollection > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::IObjectCollection *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  result = (SimplygonSDK::IObjectCollection *)((SimplygonSDK::CountedPointer< IObjectCollection > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spObjectCollection_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spObjectCollection_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spObjectCollection_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IObjectCollection *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IObjectCollection *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection_GetNextItem(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->GetNextItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spObjectCollection_IsObjectInCollection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (bool)(*arg1)->IsObjectInCollection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection_AddObjectSorted(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  bool arg3 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (SimplygonSDK::rhandle)(*arg1)->AddObjectSorted(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection_AddObject(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->AddObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection_FindObject(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindObject((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection_GetItem(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  unsigned int arg2 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->GetItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection_GetFirstItem(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  result = (SimplygonSDK::rhandle)(*arg1)->GetFirstItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection_GetItemAsObject(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (*arg1)->GetItemAsObject(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection_GetItemsObject(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (*arg1)->GetItemsObject(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spObjectCollection_IsItemInCollection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (bool)(*arg1)->IsItemInCollection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection_RemoveItem(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->RemoveItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spObjectCollection_RemoveObject(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  (*arg1)->RemoveObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spObjectCollection_RemoveAllItems(void * jarg1) {
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  (*arg1)->RemoveAllItems();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spObjectCollection_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spObjectCollection_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spObjectCollection_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spObjectCollection_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spObjectCollection_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spObjectCollection_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spObjectCollection_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spObjectCollection_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IObjectCollection > *arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IObjectCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spOpacityCaster__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IOpacityCaster *arg1 = (SimplygonSDK::IOpacityCaster *) 0 ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *result = 0 ;
  
  arg1 = (SimplygonSDK::IOpacityCaster *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IOpacityCaster > *)new SimplygonSDK::CountedPointer< IOpacityCaster >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spOpacityCaster__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IOpacityCaster > *)new SimplygonSDK::CountedPointer< IOpacityCaster >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spOpacityCaster__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IOpacityCaster > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IOpacityCaster > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IOpacityCaster > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IOpacityCaster > *)new SimplygonSDK::CountedPointer< IOpacityCaster >((SimplygonSDK::CountedPointer< SimplygonSDK::IOpacityCaster > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spOpacityCaster(void * jarg1) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spOpacityCaster_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IOpacityCaster > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spOpacityCaster___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::IOpacityCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (SimplygonSDK::IOpacityCaster *) &((SimplygonSDK::CountedPointer< IOpacityCaster > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spOpacityCaster___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::IOpacityCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (SimplygonSDK::IOpacityCaster *)((SimplygonSDK::CountedPointer< IOpacityCaster > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spOpacityCaster_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::IOpacityCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (SimplygonSDK::IOpacityCaster *)((SimplygonSDK::CountedPointer< IOpacityCaster > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spOpacityCaster_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spOpacityCaster_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spOpacityCaster_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spOpacityCaster_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IOpacityCaster *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IOpacityCaster *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetColorType(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetColorType((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetOutputChannels(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOutputChannels(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetSourceTextures(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::ITextureTable *arg2 = (SimplygonSDK::ITextureTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (SimplygonSDK::ITextureTable *)jarg2; 
  (*arg1)->SetSourceTextures(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetOutputFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetOutputFilePath((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetOutputChannelBitDepth(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOutputChannelBitDepth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetDilation(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetDilation(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spOpacityCaster_GetFillMode(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (int)(*arg1)->GetFillMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetOutputImage(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::IImageData *arg2 = (SimplygonSDK::IImageData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IImageData *)jarg2; 
  (*arg1)->SetOutputImage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetSourceMaterials(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::IMaterialTable *arg2 = (SimplygonSDK::IMaterialTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterialTable *)jarg2; 
  (*arg1)->SetSourceMaterials(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spOpacityCaster_GetSourceMaterials(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (*arg1)->GetSourceMaterials();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spOpacityCaster_GetDestMaterialId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetDestMaterialId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spOpacityCaster_GetBakeOpacityInAlpha(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (bool)(*arg1)->GetBakeOpacityInAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spOpacityCaster_GetBakeVertexColors(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (bool)(*arg1)->GetBakeVertexColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spOpacityCaster_GetOutputImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (*arg1)->GetOutputImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetBakeVertexColors(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetBakeVertexColors(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetDestMaterial(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::IMaterial *arg2 = (SimplygonSDK::IMaterial *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterial *)jarg2; 
  (*arg1)->SetDestMaterial(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetBakeOpacityInAlpha(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetBakeOpacityInAlpha(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spOpacityCaster_GetMappingImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (*arg1)->GetMappingImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spOpacityCaster_GetOutputChannelBitDepth(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOutputChannelBitDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetFillMode(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (int)jarg2; 
  (*arg1)->SetFillMode(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spOpacityCaster_GetDilation(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetDilation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_CastMaterials(void * jarg1) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  (*arg1)->CastMaterials();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spOpacityCaster_GetSourceTextures(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (*arg1)->GetSourceTextures();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spOpacityCaster_GetDestMaterial(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (*arg1)->GetDestMaterial();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetDestMaterialId(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetDestMaterialId(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spOpacityCaster_GetOutputFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (*arg1)->GetOutputFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spOpacityCaster_GetOutputChannels(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOutputChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetMappingImage(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::IMappingImage *arg2 = (SimplygonSDK::IMappingImage *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (SimplygonSDK::IMappingImage *)jarg2; 
  (*arg1)->SetMappingImage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_RunProcessing(void * jarg1) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  (*arg1)->RunProcessing();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spOpacityCaster_GetColorType(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (*arg1)->GetColorType();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spOpacityCaster_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spOpacityCaster_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spOpacityCaster_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spOpacityCaster_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IOpacityCaster > *arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IOpacityCaster > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spPackedGeometryData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IPackedGeometryData *arg1 = (SimplygonSDK::IPackedGeometryData *) 0 ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IPackedGeometryData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)new SimplygonSDK::CountedPointer< IPackedGeometryData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spPackedGeometryData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)new SimplygonSDK::CountedPointer< IPackedGeometryData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spPackedGeometryData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IPackedGeometryData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IPackedGeometryData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IPackedGeometryData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)new SimplygonSDK::CountedPointer< IPackedGeometryData >((SimplygonSDK::CountedPointer< SimplygonSDK::IPackedGeometryData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spPackedGeometryData(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spPackedGeometryData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IPackedGeometryData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::IPackedGeometryData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (SimplygonSDK::IPackedGeometryData *) &((SimplygonSDK::CountedPointer< IPackedGeometryData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::IPackedGeometryData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (SimplygonSDK::IPackedGeometryData *)((SimplygonSDK::CountedPointer< IPackedGeometryData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::IPackedGeometryData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (SimplygonSDK::IPackedGeometryData *)((SimplygonSDK::CountedPointer< IPackedGeometryData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spPackedGeometryData_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spPackedGeometryData_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spPackedGeometryData_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IPackedGeometryData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IPackedGeometryData *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_SetSup(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->SetSup(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetGroupIds(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (*arg1)->GetGroupIds();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetBoneIds(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (*arg1)->GetBoneIds();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetTriangles(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (*arg1)->GetTriangles();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetColors(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetColors(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetVertexIds(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (*arg1)->GetVertexIds();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_GetInf(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetInf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_RemoveMaterialIds(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->RemoveMaterialIds();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_NewUnpackedCopy(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (*arg1)->NewUnpackedCopy();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddMaterialIds(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->AddMaterialIds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_RemoveUserTriangleField(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->RemoveUserTriangleField((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_RemoveVertexWeighting(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->RemoveVertexWeighting();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_SetInf(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->SetInf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddTriangles(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->AddTriangles(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_RemoveGroupIds(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->RemoveGroupIds();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetCoords(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (*arg1)->GetCoords();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_DeepCopy(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::IPackedGeometryData *arg2 = (SimplygonSDK::IPackedGeometryData *) 0 ;
  bool arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IPackedGeometryData *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (*arg1)->DeepCopy(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_RemoveTexCoords(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveTexCoords(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetVertices(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (*arg1)->GetVertices();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IFieldData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddTangents(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->AddTangents(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_RemoveUserVertexField(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->RemoveUserVertexField((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetMaterialIds(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (*arg1)->GetMaterialIds();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spPackedGeometryData_GetTriangleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTriangleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetVertexWeighting(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (*arg1)->GetVertexWeighting();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddVertexLocks(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->AddVertexLocks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddTexCoords(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->AddTexCoords(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetTangents(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetTangents(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddGroupIds(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->AddGroupIds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddVertices(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->AddVertices(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spPackedGeometryData_AppendPackedGeometry(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  bool arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(*arg1)->AppendPackedGeometry(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddNormals(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->AddNormals();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddVertexWeighting(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->AddVertexWeighting();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddUserVertexField(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  (*arg1)->AddUserVertexField(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddUserTriangleField(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  (*arg1)->AddUserTriangleField(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetUserTriangleField(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetUserTriangleField((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_RemoveColors(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveColors(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_RemoveBoneWeights(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->RemoveBoneWeights();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IPackedGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IPackedGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IPackedGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetTexCoords(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetTexCoords(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_AddBaseTypeUserTriangleField(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (*arg1)->AddBaseTypeUserTriangleField(arg2,(char const *)arg3,arg4);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_SetVertexCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetVertexCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_GetSup(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetSup(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spPackedGeometryData_GetVertexCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetVertexCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetBoneWeights(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (*arg1)->GetBoneWeights();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddColors(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->AddColors(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetUserVertexField(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetUserVertexField((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_SetTriangleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTriangleCount(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_AddBaseTypeUserVertexField(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (*arg1)->AddBaseTypeUserVertexField(arg2,(char const *)arg3,arg4);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetBitangents(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetBitangents(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_RemoveVertexLocks(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->RemoveVertexLocks();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetVertexLocks(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IBoolArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (*arg1)->GetVertexLocks();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IBoolArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IBoolArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddBoneWeights(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->AddBoneWeights(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_RemoveTangents(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveTangents(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_RemoveNormals(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->RemoveNormals();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetNormals(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (*arg1)->GetNormals();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spPackedGeometryData_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spPackedGeometryData_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spPackedGeometryData_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IPackedGeometryData > *arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IPackedGeometryData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spParameterizer__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IParameterizer *arg1 = (SimplygonSDK::IParameterizer *) 0 ;
  SimplygonSDK::CountedPointer< IParameterizer > *result = 0 ;
  
  arg1 = (SimplygonSDK::IParameterizer *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IParameterizer > *)new SimplygonSDK::CountedPointer< IParameterizer >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spParameterizer__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IParameterizer > *)new SimplygonSDK::CountedPointer< IParameterizer >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spParameterizer__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IParameterizer > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IParameterizer > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IParameterizer > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IParameterizer > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IParameterizer > *)new SimplygonSDK::CountedPointer< IParameterizer >((SimplygonSDK::CountedPointer< SimplygonSDK::IParameterizer > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spParameterizer(void * jarg1) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IParameterizer > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spParameterizer___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::IParameterizer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (SimplygonSDK::IParameterizer *) &((SimplygonSDK::CountedPointer< IParameterizer > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spParameterizer___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::IParameterizer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (SimplygonSDK::IParameterizer *)((SimplygonSDK::CountedPointer< IParameterizer > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spParameterizer_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::IParameterizer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (SimplygonSDK::IParameterizer *)((SimplygonSDK::CountedPointer< IParameterizer > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spParameterizer_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spParameterizer_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IParameterizer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IParameterizer *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_GetUseVisibilityWeights(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (bool)(*arg1)->GetUseVisibilityWeights();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_GetOutputMaterialCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOutputMaterialCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetTextureHeight__SWIG_0(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTextureHeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetTextureHeight__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetTextureHeight(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_GetInputMaterialCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (unsigned int)(*arg1)->GetInputMaterialCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetUseVertexWeights(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseVertexWeights(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetPackingEfficency(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetPackingEfficency(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetAutomaticTextureSizeMultiplier(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetAutomaticTextureSizeMultiplier(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_GetTextureWidth__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTextureWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_GetTextureWidth__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(*arg1)->GetTextureWidth(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetAutomaticTextureSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetAutomaticTextureSize(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spParameterizer_GetPackingEfficency(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetPackingEfficency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_GetUseVertexWeights(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (bool)(*arg1)->GetUseVertexWeights();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_GetGutterSpace__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(*arg1)->GetGutterSpace(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_GetGutterSpace__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (unsigned int)(*arg1)->GetGutterSpace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_Parameterize(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::IRealArray *arg3 = (SimplygonSDK::IRealArray *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::IRealArray *)jarg3; 
  result = (bool)(*arg1)->Parameterize(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetInputMaterialCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetInputMaterialCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetInputOutputMaterialMapping(void * jarg1, unsigned int jarg2, int jarg3) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (int)jarg3; 
  (*arg1)->SetInputOutputMaterialMapping(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetUseVisibilityWeights(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseVisibilityWeights(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_GetForcePower2Texture(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (bool)(*arg1)->GetForcePower2Texture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_GetAutomaticTextureSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (bool)(*arg1)->GetAutomaticTextureSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_GetTextureHeight__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTextureHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_GetTextureHeight__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)(*arg1)->GetTextureHeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetMaxStretch(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetMaxStretch(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spParameterizer_GetInputOutputMaterialMapping(void * jarg1, unsigned int jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(*arg1)->GetInputOutputMaterialMapping(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetTextureWidth__SWIG_0(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTextureWidth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetTextureWidth__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetTextureWidth(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetOutputMaterialCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOutputMaterialCount(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spParameterizer_GetAutomaticTextureSizeMultiplier(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetAutomaticTextureSizeMultiplier();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spParameterizer_GetMaxStretch(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMaxStretch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetForcePower2Texture(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetForcePower2Texture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetGutterSpace__SWIG_0(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetGutterSpace(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetGutterSpace__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetGutterSpace(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spParameterizer_GetFeatureFlagsMask(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (unsigned int)(*arg1)->GetFeatureFlagsMask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetFeatureFlagsMask(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetFeatureFlagsMask(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spParameterizer_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spParameterizer_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spParameterizer_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spParameterizer_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IParameterizer > *arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IParameterizer > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spProcessingObject__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IProcessingObject *arg1 = (SimplygonSDK::IProcessingObject *) 0 ;
  SimplygonSDK::CountedPointer< IProcessingObject > *result = 0 ;
  
  arg1 = (SimplygonSDK::IProcessingObject *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IProcessingObject > *)new SimplygonSDK::CountedPointer< IProcessingObject >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spProcessingObject__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IProcessingObject > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IProcessingObject > *)new SimplygonSDK::CountedPointer< IProcessingObject >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spProcessingObject__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IProcessingObject > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IProcessingObject > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IProcessingObject > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IProcessingObject > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IProcessingObject > *)new SimplygonSDK::CountedPointer< IProcessingObject >((SimplygonSDK::CountedPointer< SimplygonSDK::IProcessingObject > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spProcessingObject(void * jarg1) {
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spProcessingObject_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IProcessingObject > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spProcessingObject___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  SimplygonSDK::IProcessingObject *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  result = (SimplygonSDK::IProcessingObject *) &((SimplygonSDK::CountedPointer< IProcessingObject > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spProcessingObject___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  SimplygonSDK::IProcessingObject *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  result = (SimplygonSDK::IProcessingObject *)((SimplygonSDK::CountedPointer< IProcessingObject > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spProcessingObject_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  SimplygonSDK::IProcessingObject *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  result = (SimplygonSDK::IProcessingObject *)((SimplygonSDK::CountedPointer< IProcessingObject > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spProcessingObject_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spProcessingObject_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spProcessingObject_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spProcessingObject_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IProcessingObject *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IProcessingObject *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spProcessingObject_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spProcessingObject_RunProcessing(void * jarg1) {
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  (*arg1)->RunProcessing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spProcessingObject_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spProcessingObject_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spProcessingObject_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spProcessingObject_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spProcessingObject_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spProcessingObject_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spProcessingObject_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spProcessingObject_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IProcessingObject > *arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IProcessingObject > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRcharArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IRcharArray *arg1 = (SimplygonSDK::IRcharArray *) 0 ;
  SimplygonSDK::CountedPointer< IRcharArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IRcharArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IRcharArray > *)new SimplygonSDK::CountedPointer< IRcharArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRcharArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IRcharArray > *)new SimplygonSDK::CountedPointer< IRcharArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRcharArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRcharArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IRcharArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IRcharArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IRcharArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IRcharArray > *)new SimplygonSDK::CountedPointer< IRcharArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IRcharArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spRcharArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRcharArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IRcharArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRcharArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IRcharArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (SimplygonSDK::IRcharArray *) &((SimplygonSDK::CountedPointer< IRcharArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRcharArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IRcharArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (SimplygonSDK::IRcharArray *)((SimplygonSDK::CountedPointer< IRcharArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRcharArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IRcharArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (SimplygonSDK::IRcharArray *)((SimplygonSDK::CountedPointer< IRcharArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spRcharArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRcharArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRcharArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRcharArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IRcharArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IRcharArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRcharArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRcharArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRcharArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRcharArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRcharArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRcharArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spRcharArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRcharArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRcharArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRcharArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRcharArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRcharArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRcharArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRcharArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRcharArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRcharArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharArray > *arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRcharData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IRcharData *arg1 = (SimplygonSDK::IRcharData *) 0 ;
  SimplygonSDK::CountedPointer< IRcharData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IRcharData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IRcharData > *)new SimplygonSDK::CountedPointer< IRcharData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRcharData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IRcharData > *)new SimplygonSDK::CountedPointer< IRcharData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRcharData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRcharData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IRcharData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IRcharData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IRcharData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IRcharData > *)new SimplygonSDK::CountedPointer< IRcharData >((SimplygonSDK::CountedPointer< SimplygonSDK::IRcharData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spRcharData(void * jarg1) {
  SimplygonSDK::CountedPointer< IRcharData > *arg1 = (SimplygonSDK::CountedPointer< IRcharData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRcharData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRcharData > *arg1 = (SimplygonSDK::CountedPointer< IRcharData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IRcharData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRcharData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharData > *arg1 = (SimplygonSDK::CountedPointer< IRcharData > *) 0 ;
  SimplygonSDK::IRcharData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharData > *)jarg1; 
  result = (SimplygonSDK::IRcharData *) &((SimplygonSDK::CountedPointer< IRcharData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRcharData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharData > *arg1 = (SimplygonSDK::CountedPointer< IRcharData > *) 0 ;
  SimplygonSDK::IRcharData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharData > *)jarg1; 
  result = (SimplygonSDK::IRcharData *)((SimplygonSDK::CountedPointer< IRcharData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRcharData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRcharData > *arg1 = (SimplygonSDK::CountedPointer< IRcharData > *) 0 ;
  SimplygonSDK::IRcharData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharData > *)jarg1; 
  result = (SimplygonSDK::IRcharData *)((SimplygonSDK::CountedPointer< IRcharData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spRcharData_GetData__SWIG_0(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IRcharData > *arg1 = (SimplygonSDK::CountedPointer< IRcharData > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharData > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetData();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_spRcharData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  char jresult ;
  SimplygonSDK::CountedPointer< IRcharData > *arg1 = (SimplygonSDK::CountedPointer< IRcharData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::rchar *) &(*arg1)->GetItem(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IRcharData > *arg1 = (SimplygonSDK::CountedPointer< IRcharData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IRcharData > *arg1 = (SimplygonSDK::CountedPointer< IRcharData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRcharData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRcharData > *arg1 = (SimplygonSDK::CountedPointer< IRcharData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRcharData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRcharData > *arg1 = (SimplygonSDK::CountedPointer< IRcharData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRcharData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRealArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IRealArray *arg1 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::CountedPointer< IRealArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IRealArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IRealArray > *)new SimplygonSDK::CountedPointer< IRealArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRealArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IRealArray > *)new SimplygonSDK::CountedPointer< IRealArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRealArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IRealArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IRealArray > *)new SimplygonSDK::CountedPointer< IRealArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spRealArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRealArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IRealArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRealArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IRealArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (SimplygonSDK::IRealArray *) &((SimplygonSDK::CountedPointer< IRealArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRealArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IRealArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (SimplygonSDK::IRealArray *)((SimplygonSDK::CountedPointer< IRealArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRealArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IRealArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (SimplygonSDK::IRealArray *)((SimplygonSDK::CountedPointer< IRealArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spRealArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRealArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRealArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRealArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IRealArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IRealArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_SetData(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::real *arg2 = (SimplygonSDK::real *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRealArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRealArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::IRealData *arg4 = (SimplygonSDK::IRealData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::IRealData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::real *arg4 = (SimplygonSDK::real *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::real *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRealArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_AddTuple(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::real *arg2 = (SimplygonSDK::real *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_SetDataRange(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real *arg3 = (SimplygonSDK::real *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRealArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRealArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spRealArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRealArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRealArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRealArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRealArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_AddItem(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IRealData *arg3 = (SimplygonSDK::IRealData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IRealData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_GetTuple__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real *arg3 = (SimplygonSDK::real *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRealArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spRealArray_GetItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_SetItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_SetTuple(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real *arg3 = (SimplygonSDK::real *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRealArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRealArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::IRealData *arg2 = (SimplygonSDK::IRealData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRealData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_GetData__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::real *arg2 = (SimplygonSDK::real *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRealArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRealArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRealArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealArray > *arg1 = (SimplygonSDK::CountedPointer< IRealArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRealData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IRealData *arg1 = (SimplygonSDK::IRealData *) 0 ;
  SimplygonSDK::CountedPointer< IRealData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IRealData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IRealData > *)new SimplygonSDK::CountedPointer< IRealData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRealData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IRealData > *)new SimplygonSDK::CountedPointer< IRealData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRealData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IRealData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IRealData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IRealData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IRealData > *)new SimplygonSDK::CountedPointer< IRealData >((SimplygonSDK::CountedPointer< SimplygonSDK::IRealData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spRealData(void * jarg1) {
  SimplygonSDK::CountedPointer< IRealData > *arg1 = (SimplygonSDK::CountedPointer< IRealData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRealData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRealData > *arg1 = (SimplygonSDK::CountedPointer< IRealData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IRealData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRealData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealData > *arg1 = (SimplygonSDK::CountedPointer< IRealData > *) 0 ;
  SimplygonSDK::IRealData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealData > *)jarg1; 
  result = (SimplygonSDK::IRealData *) &((SimplygonSDK::CountedPointer< IRealData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRealData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealData > *arg1 = (SimplygonSDK::CountedPointer< IRealData > *) 0 ;
  SimplygonSDK::IRealData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealData > *)jarg1; 
  result = (SimplygonSDK::IRealData *)((SimplygonSDK::CountedPointer< IRealData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRealData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealData > *arg1 = (SimplygonSDK::CountedPointer< IRealData > *) 0 ;
  SimplygonSDK::IRealData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealData > *)jarg1; 
  result = (SimplygonSDK::IRealData *)((SimplygonSDK::CountedPointer< IRealData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRealData_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRealData > *arg1 = (SimplygonSDK::CountedPointer< IRealData > *) 0 ;
  SimplygonSDK::real *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealData > *)jarg1; 
  result = (SimplygonSDK::real *)(*arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spRealData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IRealData > *arg1 = (SimplygonSDK::CountedPointer< IRealData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real *) &(*arg1)->GetItem(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IRealData > *arg1 = (SimplygonSDK::CountedPointer< IRealData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IRealData > *arg1 = (SimplygonSDK::CountedPointer< IRealData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRealData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRealData > *arg1 = (SimplygonSDK::CountedPointer< IRealData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRealData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRealData > *arg1 = (SimplygonSDK::CountedPointer< IRealData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRealData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spReductionProcessor__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IReductionProcessor *arg1 = (SimplygonSDK::IReductionProcessor *) 0 ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *result = 0 ;
  
  arg1 = (SimplygonSDK::IReductionProcessor *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IReductionProcessor > *)new SimplygonSDK::CountedPointer< IReductionProcessor >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spReductionProcessor__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IReductionProcessor > *)new SimplygonSDK::CountedPointer< IReductionProcessor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spReductionProcessor__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IReductionProcessor > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IReductionProcessor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IReductionProcessor > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IReductionProcessor > *)new SimplygonSDK::CountedPointer< IReductionProcessor >((SimplygonSDK::CountedPointer< SimplygonSDK::IReductionProcessor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spReductionProcessor(void * jarg1) {
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionProcessor_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IReductionProcessor > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::IReductionProcessor *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (SimplygonSDK::IReductionProcessor *) &((SimplygonSDK::CountedPointer< IReductionProcessor > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::IReductionProcessor *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (SimplygonSDK::IReductionProcessor *)((SimplygonSDK::CountedPointer< IReductionProcessor > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::IReductionProcessor *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (SimplygonSDK::IReductionProcessor *)((SimplygonSDK::CountedPointer< IReductionProcessor > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spReductionProcessor_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionProcessor_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionProcessor_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IReductionProcessor *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IReductionProcessor *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionProcessor_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetGeomorphGeometry(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (*arg1)->GetGeomorphGeometry();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionProcessor_GetMaxDeviation(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMaxDeviation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetNormalCalculationSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::INormalCalculationSettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (*arg1)->GetNormalCalculationSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::INormalCalculationSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::INormalCalculationSettings > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionProcessor_SetGeometry(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->SetGeometry(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetSceneRoot(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (*arg1)->GetSceneRoot();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetBoneSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IBoneSettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (*arg1)->GetBoneSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IBoneSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IBoneSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetReductionSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IReductionSettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (*arg1)->GetReductionSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IReductionSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IReductionSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetMappingImage__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (*arg1)->GetMappingImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetMappingImage__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetMappingImage(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionProcessor_SetSceneRoot(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->SetSceneRoot(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetGeometry(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (*arg1)->GetGeometry();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetRepairSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRepairSettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (*arg1)->GetRepairSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRepairSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRepairSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetMappingImageSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (*arg1)->GetMappingImageSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetVisibilitySettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (*arg1)->GetVisibilitySettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionProcessor_RunProcessing(void * jarg1) {
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  (*arg1)->RunProcessing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionProcessor_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionProcessor_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionProcessor_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionProcessor_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spReductionProcessor_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionProcessor_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionProcessor_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionProcessor > *arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spReductionSettings__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IReductionSettings *arg1 = (SimplygonSDK::IReductionSettings *) 0 ;
  SimplygonSDK::CountedPointer< IReductionSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::IReductionSettings *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IReductionSettings > *)new SimplygonSDK::CountedPointer< IReductionSettings >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spReductionSettings__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IReductionSettings > *)new SimplygonSDK::CountedPointer< IReductionSettings >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spReductionSettings__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IReductionSettings > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IReductionSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IReductionSettings > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IReductionSettings > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IReductionSettings > *)new SimplygonSDK::CountedPointer< IReductionSettings >((SimplygonSDK::CountedPointer< SimplygonSDK::IReductionSettings > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spReductionSettings(void * jarg1) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IReductionSettings > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionSettings___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::IReductionSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::IReductionSettings *) &((SimplygonSDK::CountedPointer< IReductionSettings > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionSettings___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::IReductionSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::IReductionSettings *)((SimplygonSDK::CountedPointer< IReductionSettings > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionSettings_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::IReductionSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::IReductionSettings *)((SimplygonSDK::CountedPointer< IReductionSettings > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spReductionSettings_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionSettings_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IReductionSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IReductionSettings *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetEdgeSetImportance(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetEdgeSetImportance(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetSymmetryOffset(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetSymmetryOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetAllowDirectX(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)(*arg1)->GetAllowDirectX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetDataCreationPreferences(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetDataCreationPreferences();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetMaterialImportance(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetMaterialImportance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetFeatureFlags(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetFeatureFlags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetVertexColorImportance(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetVertexColorImportance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetSymmetryOffset(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetSymmetryOffset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetKeepPercentageOfMaterials(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetKeepPercentageOfMaterials(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetDataCreationPreferences(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetDataCreationPreferences(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetMaxDeviation(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMaxDeviation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetEnablePostprocessing(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetEnablePostprocessing(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetSkinningImportance(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetSkinningImportance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetUseSymmetryQuadRetriangulator(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseSymmetryQuadRetriangulator(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetSkinningImportance(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetSkinningImportance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetSymmetryAxis(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetSymmetryAxis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetFeatureFlags(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetFeatureFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetUseSymmetryQuadRetriangulator(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)(*arg1)->GetUseSymmetryQuadRetriangulator();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetCreateGeomorphGeometry(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)(*arg1)->GetCreateGeomorphGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetShadingImportance(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetShadingImportance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetUseVertexWeights(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseVertexWeights(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetGroupImportance(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetGroupImportance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetMaxDeviation(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetMaxDeviation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetUseMaterialPartRemover(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseMaterialPartRemover(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetReductionHeuristics(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetReductionHeuristics();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetSymmetryDetectionTolerance(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetSymmetryDetectionTolerance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetGroupImportance(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetGroupImportance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetTextureImportance(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetTextureImportance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetGeometryImportance(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetGeometryImportance(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetReductionRatio(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetReductionRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetReplaceHiddenMaterials(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetReplaceHiddenMaterials(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetKeepPercentageOfMaterials(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetKeepPercentageOfMaterials();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetMaxEdgeLength(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetMaxEdgeLength(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetGenerateGeomorphData(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetGenerateGeomorphData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetStopCondition(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetStopCondition(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetTextureImportance(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetTextureImportance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetStopCondition(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetStopCondition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetInwardMoveMultiplier(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetInwardMoveMultiplier();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetUseMaterialPartRemover(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)(*arg1)->GetUseMaterialPartRemover();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetUseHighQualityNormalCalculation(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)(*arg1)->GetUseHighQualityNormalCalculation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetCreateGeomorphGeometry(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetCreateGeomorphGeometry(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetVertexColorImportance(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetVertexColorImportance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetReductionRatio(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetReductionRatio(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetGeometryImportance(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetGeometryImportance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetMaxEdgeLength(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMaxEdgeLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetReductionHeuristics(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetReductionHeuristics(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetReplaceHiddenMaterials(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)(*arg1)->GetReplaceHiddenMaterials();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetShadingImportance(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetShadingImportance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetUseHighQualityNormalCalculation(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseHighQualityNormalCalculation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetValidityImportance(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetValidityImportance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetSymmetryAxis(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetSymmetryAxis(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetGenerateGeomorphData(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)(*arg1)->GetGenerateGeomorphData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetReductionRatioUsingTriangleCount(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetReductionRatioUsingTriangleCount(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetEdgeSetImportance(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetEdgeSetImportance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetMaterialImportance(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMaterialImportance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetValidityImportance(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetValidityImportance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetSymmetryDetectionTolerance(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetSymmetryDetectionTolerance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spReductionSettings_GetOutwardMoveMultiplier(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetOutwardMoveMultiplier();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionSettings_GetMaterialPartCutoffs(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (*arg1)->GetMaterialPartCutoffs();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetUseVertexWeights(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)(*arg1)->GetUseVertexWeights();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetOutwardMoveMultiplier(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetOutwardMoveMultiplier(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetAllowDegenerateTexCoords(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetAllowDegenerateTexCoords(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetEnablePreprocessing(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetEnablePreprocessing(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetEnablePreprocessing(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)(*arg1)->GetEnablePreprocessing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetEnablePostprocessing(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)(*arg1)->GetEnablePostprocessing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetInwardMoveMultiplier(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetInwardMoveMultiplier(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetAllowDegenerateTexCoords(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)(*arg1)->GetAllowDegenerateTexCoords();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetKeepSymmetry(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetKeepSymmetry(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetKeepSymmetry(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)(*arg1)->GetKeepSymmetry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetUseAutomaticSymmetryDetection(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseAutomaticSymmetryDetection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetAllowDirectX(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetAllowDirectX(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spReductionSettings_GetUseAutomaticSymmetryDetection(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (bool)(*arg1)->GetUseAutomaticSymmetryDetection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionSettings_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spReductionSettings_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spReductionSettings_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spReductionSettings_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IReductionSettings > *arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IReductionSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRemeshingProcessor__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IRemeshingProcessor *arg1 = (SimplygonSDK::IRemeshingProcessor *) 0 ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *result = 0 ;
  
  arg1 = (SimplygonSDK::IRemeshingProcessor *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)new SimplygonSDK::CountedPointer< IRemeshingProcessor >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRemeshingProcessor__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)new SimplygonSDK::CountedPointer< IRemeshingProcessor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRemeshingProcessor__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingProcessor > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingProcessor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingProcessor > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)new SimplygonSDK::CountedPointer< IRemeshingProcessor >((SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingProcessor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spRemeshingProcessor(void * jarg1) {
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingProcessor_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IRemeshingProcessor > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingProcessor___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::IRemeshingProcessor *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  result = (SimplygonSDK::IRemeshingProcessor *) &((SimplygonSDK::CountedPointer< IRemeshingProcessor > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingProcessor___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::IRemeshingProcessor *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  result = (SimplygonSDK::IRemeshingProcessor *)((SimplygonSDK::CountedPointer< IRemeshingProcessor > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingProcessor_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::IRemeshingProcessor *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  result = (SimplygonSDK::IRemeshingProcessor *)((SimplygonSDK::CountedPointer< IRemeshingProcessor > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spRemeshingProcessor_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingProcessor_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingProcessor_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingProcessor_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IRemeshingProcessor *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IRemeshingProcessor *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingProcessor_GetSceneRoot(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  result = (*arg1)->GetSceneRoot();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingProcessor_RemeshGeometry(void * jarg1) {
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  (*arg1)->RemeshGeometry();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingProcessor_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingProcessor_GetMappingImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  result = (*arg1)->GetMappingImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingProcessor_SetSceneRoot(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->SetSceneRoot(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingProcessor_GetRemeshingSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingSettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  result = (*arg1)->GetRemeshingSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingProcessor_GetMappingImageSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  result = (*arg1)->GetMappingImageSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingProcessor_GetBoneSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IBoneSettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  result = (*arg1)->GetBoneSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IBoneSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IBoneSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingProcessor_GetVisibilitySettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  result = (*arg1)->GetVisibilitySettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingProcessor_RunProcessing(void * jarg1) {
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  (*arg1)->RunProcessing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingProcessor_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingProcessor_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingProcessor_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingProcessor_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingProcessor_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRemeshingProcessor_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingProcessor_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingProcessor_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingProcessor > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRemeshingSettings__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IRemeshingSettings *arg1 = (SimplygonSDK::IRemeshingSettings *) 0 ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::IRemeshingSettings *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)new SimplygonSDK::CountedPointer< IRemeshingSettings >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRemeshingSettings__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)new SimplygonSDK::CountedPointer< IRemeshingSettings >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRemeshingSettings__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingSettings > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingSettings > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingSettings > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)new SimplygonSDK::CountedPointer< IRemeshingSettings >((SimplygonSDK::CountedPointer< SimplygonSDK::IRemeshingSettings > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spRemeshingSettings(void * jarg1) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingSettings_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IRemeshingSettings > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingSettings___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::IRemeshingSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (SimplygonSDK::IRemeshingSettings *) &((SimplygonSDK::CountedPointer< IRemeshingSettings > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingSettings___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::IRemeshingSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (SimplygonSDK::IRemeshingSettings *)((SimplygonSDK::CountedPointer< IRemeshingSettings > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingSettings_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::IRemeshingSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (SimplygonSDK::IRemeshingSettings *)((SimplygonSDK::CountedPointer< IRemeshingSettings > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spRemeshingSettings_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingSettings_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingSettings_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingSettings_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IRemeshingSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IRemeshingSettings *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingSettings_GetTransferNormals(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (bool)(*arg1)->GetTransferNormals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingSettings_GetTransferColors(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (bool)(*arg1)->GetTransferColors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_SetMaxTriangleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetMaxTriangleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_SetHardEdgeAngle(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetHardEdgeAngle(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingSettings_GetMaxTriangleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetMaxTriangleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_SetUseGroundPlane(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseGroundPlane(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_SetTransferColors(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetTransferColors(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingSettings_GetAllowDirectX(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (bool)(*arg1)->GetAllowDirectX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spRemeshingSettings_GetGroundPlaneLevel(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetGroundPlaneLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_SetSurfaceTransferMode(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetSurfaceTransferMode(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRemeshingSettings_GetGroundPlaneAxisIndex(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetGroundPlaneAxisIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spRemeshingSettings_GetHardEdgeAngle(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetHardEdgeAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_SetOnScreenSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetOnScreenSize(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRemeshingSettings_GetSurfaceTransferMode(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetSurfaceTransferMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingSettings_GetMergeDistance(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetMergeDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_SetMergeDistance(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetMergeDistance(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingSettings_GetOnScreenSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetOnScreenSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_SetTransferNormals(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetTransferNormals(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingSettings_GetUseGroundPlane(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (bool)(*arg1)->GetUseGroundPlane();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_SetAllowDirectX(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetAllowDirectX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_SetGroundPlaneAxisIndex(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetGroundPlaneAxisIndex(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_SetGroundPlaneNegativeHalfspace(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetGroundPlaneNegativeHalfspace(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRemeshingSettings_GetGroundPlaneNegativeHalfspace(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (bool)(*arg1)->GetGroundPlaneNegativeHalfspace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_SetGroundPlaneLevel(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetGroundPlaneLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingSettings_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRemeshingSettings_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRemeshingSettings_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRemeshingSettings_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRemeshingSettings > *arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRemeshingSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRepairSettings__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IRepairSettings *arg1 = (SimplygonSDK::IRepairSettings *) 0 ;
  SimplygonSDK::CountedPointer< IRepairSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::IRepairSettings *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IRepairSettings > *)new SimplygonSDK::CountedPointer< IRepairSettings >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRepairSettings__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IRepairSettings > *)new SimplygonSDK::CountedPointer< IRepairSettings >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRepairSettings__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRepairSettings > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IRepairSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IRepairSettings > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IRepairSettings > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IRepairSettings > *)new SimplygonSDK::CountedPointer< IRepairSettings >((SimplygonSDK::CountedPointer< SimplygonSDK::IRepairSettings > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spRepairSettings(void * jarg1) {
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRepairSettings_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IRepairSettings > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRepairSettings___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::IRepairSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  result = (SimplygonSDK::IRepairSettings *) &((SimplygonSDK::CountedPointer< IRepairSettings > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRepairSettings___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::IRepairSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  result = (SimplygonSDK::IRepairSettings *)((SimplygonSDK::CountedPointer< IRepairSettings > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRepairSettings_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::IRepairSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  result = (SimplygonSDK::IRepairSettings *)((SimplygonSDK::CountedPointer< IRepairSettings > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spRepairSettings_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRepairSettings_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRepairSettings_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRepairSettings_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IRepairSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IRepairSettings *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRepairSettings_GetUseWelding(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  result = (bool)(*arg1)->GetUseWelding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRepairSettings_SetProgressivePasses(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetProgressivePasses(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRepairSettings_GetProgressivePasses(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  result = (unsigned int)(*arg1)->GetProgressivePasses();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRepairSettings_GetUseTJunctionRemover(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  result = (bool)(*arg1)->GetUseTJunctionRemover();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRepairSettings_SetTjuncDist(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetTjuncDist(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRepairSettings_GetWeldOnlyBorderVertices(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  result = (bool)(*arg1)->GetWeldOnlyBorderVertices();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRepairSettings_SetWeldOnlyBorderVertices(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetWeldOnlyBorderVertices(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spRepairSettings_GetTjuncDist(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetTjuncDist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRepairSettings_SetWeldOnlyObjectBoundary(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetWeldOnlyObjectBoundary(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRepairSettings_SetUseTJunctionRemover(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseTJunctionRemover(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRepairSettings_SetWeldDist(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetWeldDist(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spRepairSettings_GetWeldDist(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetWeldDist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRepairSettings_GetWeldOnlyObjectBoundary(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  result = (bool)(*arg1)->GetWeldOnlyObjectBoundary();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRepairSettings_SetUseWelding(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseWelding(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRepairSettings_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRepairSettings_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRepairSettings_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRepairSettings_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRepairSettings_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRepairSettings_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRepairSettings_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRepairSettings_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRepairSettings > *arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRepairSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRhandleArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IRhandleArray *arg1 = (SimplygonSDK::IRhandleArray *) 0 ;
  SimplygonSDK::CountedPointer< IRhandleArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IRhandleArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IRhandleArray > *)new SimplygonSDK::CountedPointer< IRhandleArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRhandleArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IRhandleArray > *)new SimplygonSDK::CountedPointer< IRhandleArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRhandleArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRhandleArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IRhandleArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IRhandleArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IRhandleArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IRhandleArray > *)new SimplygonSDK::CountedPointer< IRhandleArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IRhandleArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spRhandleArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRhandleArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IRhandleArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::IRhandleArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (SimplygonSDK::IRhandleArray *) &((SimplygonSDK::CountedPointer< IRhandleArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::IRhandleArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (SimplygonSDK::IRhandleArray *)((SimplygonSDK::CountedPointer< IRhandleArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::IRhandleArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (SimplygonSDK::IRhandleArray *)((SimplygonSDK::CountedPointer< IRhandleArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spRhandleArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRhandleArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRhandleArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IRhandleArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IRhandleArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRhandleArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_SetData(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rhandle *arg2 = (SimplygonSDK::rhandle *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IRhandleData *arg3 = (SimplygonSDK::IRhandleData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IRhandleData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_GetTuple__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rhandle *arg3 = (SimplygonSDK::rhandle *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rhandle *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::IRhandleData *arg4 = (SimplygonSDK::IRhandleData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::IRhandleData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::rhandle *arg4 = (SimplygonSDK::rhandle *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::rhandle *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_AddItem(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRhandleArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::IRhandleData *arg2 = (SimplygonSDK::IRhandleData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRhandleData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_GetData__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rhandle *arg2 = (SimplygonSDK::rhandle *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRhandleArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_AddTuple(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rhandle *arg2 = (SimplygonSDK::rhandle *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRhandleArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRhandleArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_SetItem(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rhandle arg3 = (SimplygonSDK::rhandle) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rhandle)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRhandleArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_SetDataRange(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rhandle *arg3 = (SimplygonSDK::rhandle *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rhandle *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleArray_GetItem(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->GetItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_SetTuple(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rhandle *arg3 = (SimplygonSDK::rhandle *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rhandle *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRhandleArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRhandleArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRhandleArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleArray > *arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRhandleData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IRhandleData *arg1 = (SimplygonSDK::IRhandleData *) 0 ;
  SimplygonSDK::CountedPointer< IRhandleData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IRhandleData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IRhandleData > *)new SimplygonSDK::CountedPointer< IRhandleData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRhandleData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IRhandleData > *)new SimplygonSDK::CountedPointer< IRhandleData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRhandleData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRhandleData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IRhandleData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IRhandleData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IRhandleData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IRhandleData > *)new SimplygonSDK::CountedPointer< IRhandleData >((SimplygonSDK::CountedPointer< SimplygonSDK::IRhandleData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spRhandleData(void * jarg1) {
  SimplygonSDK::CountedPointer< IRhandleData > *arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRhandleData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRhandleData > *arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IRhandleData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleData > *arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *) 0 ;
  SimplygonSDK::IRhandleData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *)jarg1; 
  result = (SimplygonSDK::IRhandleData *) &((SimplygonSDK::CountedPointer< IRhandleData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleData > *arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *) 0 ;
  SimplygonSDK::IRhandleData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *)jarg1; 
  result = (SimplygonSDK::IRhandleData *)((SimplygonSDK::CountedPointer< IRhandleData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleData > *arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *) 0 ;
  SimplygonSDK::IRhandleData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *)jarg1; 
  result = (SimplygonSDK::IRhandleData *)((SimplygonSDK::CountedPointer< IRhandleData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleData_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleData > *arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *) 0 ;
  SimplygonSDK::rhandle *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *)jarg1; 
  result = (SimplygonSDK::rhandle *)(*arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRhandleData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRhandleData > *arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rhandle *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::rhandle *) &(*arg1)->GetItem(arg2);
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IRhandleData > *arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IRhandleData > *arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRhandleData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRhandleData > *arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRhandleData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRhandleData > *arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRhandleData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRidArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IRidArray *arg1 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< IRidArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IRidArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IRidArray > *)new SimplygonSDK::CountedPointer< IRidArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRidArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IRidArray > *)new SimplygonSDK::CountedPointer< IRidArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRidArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IRidArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IRidArray > *)new SimplygonSDK::CountedPointer< IRidArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spRidArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRidArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IRidArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRidArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IRidArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (SimplygonSDK::IRidArray *) &((SimplygonSDK::CountedPointer< IRidArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRidArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IRidArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (SimplygonSDK::IRidArray *)((SimplygonSDK::CountedPointer< IRidArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRidArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IRidArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (SimplygonSDK::IRidArray *)((SimplygonSDK::CountedPointer< IRidArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spRidArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRidArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRidArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRidArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IRidArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IRidArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRidArray_GetItem(void * jarg1, int jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->GetItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_SetData(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid *arg2 = (SimplygonSDK::rid *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_SetDataRange(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rid *arg3 = (SimplygonSDK::rid *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rid *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRidArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spRidArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRidArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_AddItem(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_AddTuple(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid *arg2 = (SimplygonSDK::rid *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_SetItem(void * jarg1, int jarg2, int jarg3) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rid arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_SetTuple(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rid *arg3 = (SimplygonSDK::rid *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rid *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IRidData *arg3 = (SimplygonSDK::IRidData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IRidData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_GetTuple__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rid *arg3 = (SimplygonSDK::rid *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::rid *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRidArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRidArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IRidData *arg2 = (SimplygonSDK::IRidData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_GetData__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid *arg2 = (SimplygonSDK::rid *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::IRidData *arg4 = (SimplygonSDK::IRidData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::IRidData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::rid *arg4 = (SimplygonSDK::rid *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::rid *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRidArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRidArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRidArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRidArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRidArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRidArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRidArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRidArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRidArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRidArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRidArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidArray > *arg1 = (SimplygonSDK::CountedPointer< IRidArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRidData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IRidData *arg1 = (SimplygonSDK::IRidData *) 0 ;
  SimplygonSDK::CountedPointer< IRidData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IRidData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IRidData > *)new SimplygonSDK::CountedPointer< IRidData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRidData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IRidData > *)new SimplygonSDK::CountedPointer< IRidData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spRidData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IRidData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IRidData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IRidData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IRidData > *)new SimplygonSDK::CountedPointer< IRidData >((SimplygonSDK::CountedPointer< SimplygonSDK::IRidData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spRidData(void * jarg1) {
  SimplygonSDK::CountedPointer< IRidData > *arg1 = (SimplygonSDK::CountedPointer< IRidData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRidData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRidData > *arg1 = (SimplygonSDK::CountedPointer< IRidData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IRidData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRidData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidData > *arg1 = (SimplygonSDK::CountedPointer< IRidData > *) 0 ;
  SimplygonSDK::IRidData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidData > *)jarg1; 
  result = (SimplygonSDK::IRidData *) &((SimplygonSDK::CountedPointer< IRidData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRidData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidData > *arg1 = (SimplygonSDK::CountedPointer< IRidData > *) 0 ;
  SimplygonSDK::IRidData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidData > *)jarg1; 
  result = (SimplygonSDK::IRidData *)((SimplygonSDK::CountedPointer< IRidData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRidData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidData > *arg1 = (SimplygonSDK::CountedPointer< IRidData > *) 0 ;
  SimplygonSDK::IRidData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidData > *)jarg1; 
  result = (SimplygonSDK::IRidData *)((SimplygonSDK::CountedPointer< IRidData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spRidData_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IRidData > *arg1 = (SimplygonSDK::CountedPointer< IRidData > *) 0 ;
  SimplygonSDK::rid *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidData > *)jarg1; 
  result = (SimplygonSDK::rid *)(*arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spRidData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< IRidData > *arg1 = (SimplygonSDK::CountedPointer< IRidData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rid *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::rid *) &(*arg1)->GetItem(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IRidData > *arg1 = (SimplygonSDK::CountedPointer< IRidData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IRidData > *arg1 = (SimplygonSDK::CountedPointer< IRidData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spRidData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IRidData > *arg1 = (SimplygonSDK::CountedPointer< IRidData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spRidData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IRidData > *arg1 = (SimplygonSDK::CountedPointer< IRidData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IRidData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spScene__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IScene *arg1 = (SimplygonSDK::IScene *) 0 ;
  SimplygonSDK::CountedPointer< IScene > *result = 0 ;
  
  arg1 = (SimplygonSDK::IScene *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IScene > *)new SimplygonSDK::CountedPointer< IScene >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spScene__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IScene > *)new SimplygonSDK::CountedPointer< IScene >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spScene__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IScene > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IScene > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IScene > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IScene > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IScene > *)new SimplygonSDK::CountedPointer< IScene >((SimplygonSDK::CountedPointer< SimplygonSDK::IScene > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spScene(void * jarg1) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spScene_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IScene > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::IScene *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  result = (SimplygonSDK::IScene *) &((SimplygonSDK::CountedPointer< IScene > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::IScene *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  result = (SimplygonSDK::IScene *)((SimplygonSDK::CountedPointer< IScene > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::IScene *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  result = (SimplygonSDK::IScene *)((SimplygonSDK::CountedPointer< IScene > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spScene_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spScene_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spScene_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IScene *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IScene *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spScene_HasCustomField(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(*arg1)->HasCustomField((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spScene_RemoveUnlinkedBones(void * jarg1) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  (*arg1)->RemoveUnlinkedBones();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spScene_EvaluateDefaultGlobalTransformation(void * jarg1, void * jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  SimplygonSDK::IMatrix4x4 *arg3 = (SimplygonSDK::IMatrix4x4 *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  arg3 = (SimplygonSDK::IMatrix4x4 *)jarg3; 
  (*arg1)->EvaluateDefaultGlobalTransformation(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene_GetRootNode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  result = (*arg1)->GetRootNode();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spScene_Compact(void * jarg1) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  (*arg1)->Compact();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene_GetNodeByID__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetNodeByID((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene_GetNodeByID__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::ISceneNode *arg3 = (SimplygonSDK::ISceneNode *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (SimplygonSDK::ISceneNode *)jarg3; 
  result = (*arg1)->GetNodeByID((char const *)arg2,arg3);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene_GetMaterialTable(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  result = (*arg1)->GetMaterialTable();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene_GetTextureTable(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  result = (*arg1)->GetTextureTable();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spScene_ShowSceneDebugWindow(void * jarg1) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  (*arg1)->ShowSceneDebugWindow();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene_GetBoneTable(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBoneTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  result = (*arg1)->GetBoneTable();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBoneTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBoneTable > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spScene_SaveToFile(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(*arg1)->SaveToFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spScene_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spScene_LoadFromFile(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(*arg1)->LoadFromFile((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene_GetCustomField(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetCustomField((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spScene_RemoveCustomField(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->RemoveCustomField((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spScene_GetInf(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetInf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spScene_GetSup(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetSup(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spScene_GetRadius(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spScene_CalculateExtents(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  result = (bool)(*arg1)->CalculateExtents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene_GetNodeFromPath(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->GetNodeFromPath((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene_AddCustomField(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (*arg1)->AddCustomField(arg2,(char const *)arg3,arg4);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spScene_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spScene_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spScene_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spScene_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spScene_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spScene_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spScene_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IScene > *arg1 = (SimplygonSDK::CountedPointer< IScene > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IScene > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneAggregator__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISceneAggregator *arg1 = (SimplygonSDK::ISceneAggregator *) 0 ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *result = 0 ;
  
  arg1 = (SimplygonSDK::ISceneAggregator *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ISceneAggregator > *)new SimplygonSDK::CountedPointer< ISceneAggregator >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneAggregator__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ISceneAggregator > *)new SimplygonSDK::CountedPointer< ISceneAggregator >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneAggregator__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregator > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregator > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregator > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ISceneAggregator > *)new SimplygonSDK::CountedPointer< ISceneAggregator >((SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregator > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spSceneAggregator(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneAggregator_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ISceneAggregator > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregator___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::ISceneAggregator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  result = (SimplygonSDK::ISceneAggregator *) &((SimplygonSDK::CountedPointer< ISceneAggregator > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregator___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::ISceneAggregator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  result = (SimplygonSDK::ISceneAggregator *)((SimplygonSDK::CountedPointer< ISceneAggregator > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregator_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::ISceneAggregator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  result = (SimplygonSDK::ISceneAggregator *)((SimplygonSDK::CountedPointer< ISceneAggregator > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spSceneAggregator_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneAggregator_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneAggregator_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregator_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ISceneAggregator *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ISceneAggregator *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregator_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregator_SetSceneRoot(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->SetSceneRoot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregator_RunProcessing(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  (*arg1)->RunProcessing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregator_CombineGeometry(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  (*arg1)->CombineGeometry();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregator_GetMappingImageSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  result = (*arg1)->GetMappingImageSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregator_GetSceneRoot(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  result = (*arg1)->GetSceneRoot();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregator_GetMappingImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  result = (*arg1)->GetMappingImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregator_GetVisibilitySettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  result = (*arg1)->GetVisibilitySettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregator_GetSceneAggregatorSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregatorSettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  result = (*arg1)->GetSceneAggregatorSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregatorSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregatorSettings > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregator_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregator_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregator_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregator_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregator_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneAggregator_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregator_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregator_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregator > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregator > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneAggregatorSettings__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISceneAggregatorSettings *arg1 = (SimplygonSDK::ISceneAggregatorSettings *) 0 ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::ISceneAggregatorSettings *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)new SimplygonSDK::CountedPointer< ISceneAggregatorSettings >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneAggregatorSettings__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)new SimplygonSDK::CountedPointer< ISceneAggregatorSettings >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneAggregatorSettings__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregatorSettings > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregatorSettings > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregatorSettings > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)new SimplygonSDK::CountedPointer< ISceneAggregatorSettings >((SimplygonSDK::CountedPointer< SimplygonSDK::ISceneAggregatorSettings > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spSceneAggregatorSettings(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneAggregatorSettings_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ISceneAggregatorSettings > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregatorSettings___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  SimplygonSDK::ISceneAggregatorSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  result = (SimplygonSDK::ISceneAggregatorSettings *) &((SimplygonSDK::CountedPointer< ISceneAggregatorSettings > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregatorSettings___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  SimplygonSDK::ISceneAggregatorSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  result = (SimplygonSDK::ISceneAggregatorSettings *)((SimplygonSDK::CountedPointer< ISceneAggregatorSettings > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregatorSettings_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  SimplygonSDK::ISceneAggregatorSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  result = (SimplygonSDK::ISceneAggregatorSettings *)((SimplygonSDK::CountedPointer< ISceneAggregatorSettings > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spSceneAggregatorSettings_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneAggregatorSettings_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneAggregatorSettings_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregatorSettings_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ISceneAggregatorSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ISceneAggregatorSettings *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregatorSettings_GetKeepOriginalChartProportionsFromChannel(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  result = (*arg1)->GetKeepOriginalChartProportionsFromChannel();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneAggregatorSettings_GetKeepOriginalChartProportions(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  result = (bool)(*arg1)->GetKeepOriginalChartProportions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregatorSettings_SetKeepOriginalChartProportionsFromChannel(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetKeepOriginalChartProportionsFromChannel((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregatorSettings_SetBaseAtlasOnOriginalTexCoords(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetBaseAtlasOnOriginalTexCoords(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneAggregatorSettings_GetBaseAtlasOnOriginalTexCoords(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  result = (bool)(*arg1)->GetBaseAtlasOnOriginalTexCoords();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregatorSettings_SetKeepOriginalChartProportions(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetKeepOriginalChartProportions(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregatorSettings_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregatorSettings_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregatorSettings_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregatorSettings_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregatorSettings_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneAggregatorSettings_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneAggregatorSettings_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneAggregatorSettings_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneAggregatorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneBone__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISceneBone *arg1 = (SimplygonSDK::ISceneBone *) 0 ;
  SimplygonSDK::CountedPointer< ISceneBone > *result = 0 ;
  
  arg1 = (SimplygonSDK::ISceneBone *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ISceneBone > *)new SimplygonSDK::CountedPointer< ISceneBone >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneBone__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ISceneBone > *)new SimplygonSDK::CountedPointer< ISceneBone >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneBone__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ISceneBone > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ISceneBone > *)new SimplygonSDK::CountedPointer< ISceneBone >((SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spSceneBone(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBone_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ISceneBone > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::ISceneBone *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (SimplygonSDK::ISceneBone *) &((SimplygonSDK::CountedPointer< ISceneBone > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::ISceneBone *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (SimplygonSDK::ISceneBone *)((SimplygonSDK::CountedPointer< ISceneBone > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::ISceneBone *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (SimplygonSDK::ISceneBone *)((SimplygonSDK::CountedPointer< ISceneBone > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spSceneBone_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBone_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBone_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ISceneBone *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ISceneBone *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_RemoveChild(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->RemoveChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_SetForceBoneRemoval(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetForceBoneRemoval(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBone_GetIsModified(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (bool)(*arg1)->GetIsModified();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_SetOriginalName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetOriginalName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_GetParent(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (*arg1)->GetParent();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_GetOriginalName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (*arg1)->GetOriginalName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBone_GetIsFrozen(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (bool)(*arg1)->GetIsFrozen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneBone_GetParentBone(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetParentBone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_GetPath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (*arg1)->GetPath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_SetNid(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetNid((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBone_GetIsVisible(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (bool)(*arg1)->GetIsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBone_CalculateExtents(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (bool)(*arg1)->CalculateExtents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBone_HasChild(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  result = (bool)(*arg1)->HasChild(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_NewCopy(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (*arg1)->NewCopy();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_SetIsFrozen(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetIsFrozen(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_FindNamedChild(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindNamedChild((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_SetIsVisible(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetIsVisible(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_SetIsModified(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetIsModified(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneBone_GetBoneId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBoneId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_GetChild(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetChild(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_RemoveFromParent(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  (*arg1)->RemoveFromParent();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_AddChild(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->AddChild(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBone_GetForceBoneRemoval(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (bool)(*arg1)->GetForceBoneRemoval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_GetNid(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (*arg1)->GetNid();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBone_GetLockFromBoneLOD(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (bool)(*arg1)->GetLockFromBoneLOD();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_EvaluateDefaultGlobalTransformation(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::IMatrix4x4 *arg2 = (SimplygonSDK::IMatrix4x4 *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::IMatrix4x4 *)jarg2; 
  (*arg1)->EvaluateDefaultGlobalTransformation(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_GetRelativeTransform(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (*arg1)->GetRelativeTransform();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_GetScene(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IScene > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (*arg1)->GetScene();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IScene >((const SimplygonSDK::CountedPointer< SimplygonSDK::IScene > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_GetInf(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetInf(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_CollectAllChildBones(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  (*arg1)->CollectAllChildBones(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_GetSup(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetSup(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBone_GetChildCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (unsigned int)(*arg1)->GetChildCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_NewClone(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (*arg1)->NewClone();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_RemoveChildren(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  (*arg1)->RemoveChildren();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_SetLockFromBoneLOD(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetLockFromBoneLOD(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneBone_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBone_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBone_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBone > *arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBone > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneBoneTable__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISceneBoneTable *arg1 = (SimplygonSDK::ISceneBoneTable *) 0 ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *result = 0 ;
  
  arg1 = (SimplygonSDK::ISceneBoneTable *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)new SimplygonSDK::CountedPointer< ISceneBoneTable >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneBoneTable__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)new SimplygonSDK::CountedPointer< ISceneBoneTable >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneBoneTable__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBoneTable > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBoneTable > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBoneTable > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)new SimplygonSDK::CountedPointer< ISceneBoneTable >((SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBoneTable > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spSceneBoneTable(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBoneTable_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ISceneBoneTable > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBoneTable___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::ISceneBoneTable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  result = (SimplygonSDK::ISceneBoneTable *) &((SimplygonSDK::CountedPointer< ISceneBoneTable > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBoneTable___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::ISceneBoneTable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  result = (SimplygonSDK::ISceneBoneTable *)((SimplygonSDK::CountedPointer< ISceneBoneTable > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBoneTable_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::ISceneBoneTable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  result = (SimplygonSDK::ISceneBoneTable *)((SimplygonSDK::CountedPointer< ISceneBoneTable > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spSceneBoneTable_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBoneTable_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBoneTable_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBoneTable_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ISceneBoneTable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ISceneBoneTable *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBoneTable_GetItem(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetItem(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBoneTable_RemoveItem(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveItem(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBoneTable_GetItemsCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneBoneTable_AddBone(void * jarg1, void * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::ISceneBone *arg2 = (SimplygonSDK::ISceneBone *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneBone *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->AddBone(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneBoneTable_FindItemId(void * jarg1, char * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->FindItemId((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneBoneTable_GetBonesCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  result = (unsigned int)(*arg1)->GetBonesCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBoneTable_SetItem(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IObject *arg3 = (SimplygonSDK::IObject *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IObject *)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBoneTable_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBoneTable_RemoveBone(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveBone(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBoneTable_FindItem(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindItem((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBoneTable_FindBone(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindBone((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBoneTable_GetBone(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetBone(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneBoneTable_FindBoneId(void * jarg1, char * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->FindBoneId((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneBoneTable_AddItem(void * jarg1, void * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->AddItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBoneTable_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBoneTable_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBoneTable_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBoneTable_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBoneTable_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneBoneTable_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneBoneTable_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneBoneTable_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneBoneTable > *arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneBoneTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneLodGroup__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISceneLodGroup *arg1 = (SimplygonSDK::ISceneLodGroup *) 0 ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *result = 0 ;
  
  arg1 = (SimplygonSDK::ISceneLodGroup *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)new SimplygonSDK::CountedPointer< ISceneLodGroup >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneLodGroup__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)new SimplygonSDK::CountedPointer< ISceneLodGroup >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneLodGroup__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneLodGroup > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ISceneLodGroup > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ISceneLodGroup > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)new SimplygonSDK::CountedPointer< ISceneLodGroup >((SimplygonSDK::CountedPointer< SimplygonSDK::ISceneLodGroup > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spSceneLodGroup(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneLodGroup_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ISceneLodGroup > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::ISceneLodGroup *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (SimplygonSDK::ISceneLodGroup *) &((SimplygonSDK::CountedPointer< ISceneLodGroup > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::ISceneLodGroup *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (SimplygonSDK::ISceneLodGroup *)((SimplygonSDK::CountedPointer< ISceneLodGroup > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::ISceneLodGroup *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (SimplygonSDK::ISceneLodGroup *)((SimplygonSDK::CountedPointer< ISceneLodGroup > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spSceneLodGroup_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneLodGroup_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneLodGroup_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ISceneLodGroup *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ISceneLodGroup *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_GetSup(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetSup(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_RemoveFromParent(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  (*arg1)->RemoveFromParent();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_SetIsModified(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetIsModified(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneLodGroup_GetIsVisible(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (bool)(*arg1)->GetIsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_GetLodForDistance(void * jarg1, float jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::real arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  result = (*arg1)->GetLodForDistance(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_GetScene(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IScene > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (*arg1)->GetScene();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IScene >((const SimplygonSDK::CountedPointer< SimplygonSDK::IScene > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_EvaluateDefaultGlobalTransformation(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::IMatrix4x4 *arg2 = (SimplygonSDK::IMatrix4x4 *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::IMatrix4x4 *)jarg2; 
  (*arg1)->EvaluateDefaultGlobalTransformation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_RemoveChildren(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  (*arg1)->RemoveChildren();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneLodGroup_HasChild(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  result = (bool)(*arg1)->HasChild(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_GetRelativeTransform(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (*arg1)->GetRelativeTransform();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneLodGroup_GetChildCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (unsigned int)(*arg1)->GetChildCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneLodGroup_GetIsFrozen(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (bool)(*arg1)->GetIsFrozen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_SetNid(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetNid((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_GetInf(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetInf(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_NewCopy(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (*arg1)->NewCopy();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_SetOriginalName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetOriginalName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_GetChild(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetChild(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_GetOriginalName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (*arg1)->GetOriginalName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_GetNid(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (*arg1)->GetNid();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_GetParent(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (*arg1)->GetParent();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_FindNamedChild(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindNamedChild((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneLodGroup_GetIsModified(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (bool)(*arg1)->GetIsModified();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_AddChild(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->AddChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_RemoveChild(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->RemoveChild(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_NewClone(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (*arg1)->NewClone();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneLodGroup_CalculateExtents(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (bool)(*arg1)->CalculateExtents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_GetPath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (*arg1)->GetPath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_GetThresholds(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (*arg1)->GetThresholds();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_SetIsFrozen(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetIsFrozen(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_SetIsVisible(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetIsVisible(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneLodGroup_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneLodGroup_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneLodGroup_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneLodGroup > *arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneLodGroup > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneMesh__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISceneMesh *arg1 = (SimplygonSDK::ISceneMesh *) 0 ;
  SimplygonSDK::CountedPointer< ISceneMesh > *result = 0 ;
  
  arg1 = (SimplygonSDK::ISceneMesh *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ISceneMesh > *)new SimplygonSDK::CountedPointer< ISceneMesh >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneMesh__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ISceneMesh > *)new SimplygonSDK::CountedPointer< ISceneMesh >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneMesh__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneMesh > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ISceneMesh > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ISceneMesh > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ISceneMesh > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ISceneMesh > *)new SimplygonSDK::CountedPointer< ISceneMesh >((SimplygonSDK::CountedPointer< SimplygonSDK::ISceneMesh > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spSceneMesh(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneMesh_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ISceneMesh > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::ISceneMesh *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (SimplygonSDK::ISceneMesh *) &((SimplygonSDK::CountedPointer< ISceneMesh > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::ISceneMesh *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (SimplygonSDK::ISceneMesh *)((SimplygonSDK::CountedPointer< ISceneMesh > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::ISceneMesh *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (SimplygonSDK::ISceneMesh *)((SimplygonSDK::CountedPointer< ISceneMesh > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spSceneMesh_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneMesh_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneMesh_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ISceneMesh *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ISceneMesh *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_NewCopy(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (*arg1)->NewCopy();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneMesh_GetIsVisible(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (bool)(*arg1)->GetIsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_EvaluateDefaultGlobalTransformation(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::IMatrix4x4 *arg2 = (SimplygonSDK::IMatrix4x4 *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::IMatrix4x4 *)jarg2; 
  (*arg1)->EvaluateDefaultGlobalTransformation(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_GetScene(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IScene > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (*arg1)->GetScene();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IScene >((const SimplygonSDK::CountedPointer< SimplygonSDK::IScene > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_RemoveFromParent(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  (*arg1)->RemoveFromParent();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneMesh_GetIsModified(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (bool)(*arg1)->GetIsModified();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_SetOriginalName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetOriginalName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_GetGeometry(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (*arg1)->GetGeometry();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_SetNid(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetNid((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_GetNid(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (*arg1)->GetNid();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_SetIsFrozen(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetIsFrozen(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_GetParent(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (*arg1)->GetParent();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_SetIsVisible(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetIsVisible(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_GetSup(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetSup(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneMesh_HasChild(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  result = (bool)(*arg1)->HasChild(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_RemoveChild(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->RemoveChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_GetInf(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetInf(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneMesh_GetChildCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (unsigned int)(*arg1)->GetChildCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_GetChild(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetChild(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_FindNamedChild(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindNamedChild((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_RemoveChildren(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  (*arg1)->RemoveChildren();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneMesh_GetIsFrozen(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (bool)(*arg1)->GetIsFrozen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_AddChild(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->AddChild(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_NewClone(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (*arg1)->NewClone();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneMesh_CalculateExtents(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (bool)(*arg1)->CalculateExtents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_GetPath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (*arg1)->GetPath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_SetGeometry(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->SetGeometry(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_GetRelativeTransform(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (*arg1)->GetRelativeTransform();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_GetOriginalName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (*arg1)->GetOriginalName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_SetIsModified(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetIsModified(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneMesh_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneMesh_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneMesh_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneMesh > *arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneMesh > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISceneNode *arg1 = (SimplygonSDK::ISceneNode *) 0 ;
  SimplygonSDK::CountedPointer< ISceneNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::ISceneNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ISceneNode > *)new SimplygonSDK::CountedPointer< ISceneNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ISceneNode > *)new SimplygonSDK::CountedPointer< ISceneNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ISceneNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ISceneNode > *)new SimplygonSDK::CountedPointer< ISceneNode >((SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spSceneNode(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ISceneNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::ISceneNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (SimplygonSDK::ISceneNode *) &((SimplygonSDK::CountedPointer< ISceneNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::ISceneNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (SimplygonSDK::ISceneNode *)((SimplygonSDK::CountedPointer< ISceneNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::ISceneNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (SimplygonSDK::ISceneNode *)((SimplygonSDK::CountedPointer< ISceneNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_AsSceneMesh(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneMesh > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = SimplygonSDK_CountedPointer_Sl_ISceneNode_Sg__AsSceneMesh(arg1);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneMesh >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneMesh > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_AsSceneLodGroup(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneLodGroup > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = SimplygonSDK_CountedPointer_Sl_ISceneNode_Sg__AsSceneLodGroup(arg1);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneLodGroup >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneLodGroup > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_AsSceneBone(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = SimplygonSDK_CountedPointer_Sl_ISceneNode_Sg__AsSceneBone(arg1);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneBone > &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spSceneNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ISceneNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ISceneNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNode_GetIsFrozen(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (bool)(*arg1)->GetIsFrozen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_GetSup(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetSup(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_GetParent(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (*arg1)->GetParent();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_SetNid(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetNid((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_SetOriginalName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetOriginalName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_GetScene(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IScene > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (*arg1)->GetScene();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IScene >((const SimplygonSDK::CountedPointer< SimplygonSDK::IScene > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_EvaluateDefaultGlobalTransformation(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::IMatrix4x4 *arg2 = (SimplygonSDK::IMatrix4x4 *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::IMatrix4x4 *)jarg2; 
  (*arg1)->EvaluateDefaultGlobalTransformation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_AddChild(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->AddChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_RemoveChildren(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  (*arg1)->RemoveChildren();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_RemoveFromParent(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  (*arg1)->RemoveFromParent();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_GetPath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (*arg1)->GetPath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNode_GetChildCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetChildCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_GetChild(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetChild(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_SetIsModified(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetIsModified(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_FindNamedChild(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindNamedChild((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_RemoveChild(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->RemoveChild(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_GetRelativeTransform(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (*arg1)->GetRelativeTransform();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_SetIsFrozen(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetIsFrozen(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNode_HasChild(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  result = (bool)(*arg1)->HasChild(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_GetOriginalName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (*arg1)->GetOriginalName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_NewCopy(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (*arg1)->NewCopy();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_NewClone(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (*arg1)->NewClone();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNode_CalculateExtents(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (bool)(*arg1)->CalculateExtents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_SetIsVisible(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetIsVisible(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_GetInf(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetInf(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNode_GetIsVisible(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (bool)(*arg1)->GetIsVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNode_GetIsModified(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (bool)(*arg1)->GetIsModified();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_GetNid(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (*arg1)->GetNid();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNode > *arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneNodeCollection__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISceneNodeCollection *arg1 = (SimplygonSDK::ISceneNodeCollection *) 0 ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *result = 0 ;
  
  arg1 = (SimplygonSDK::ISceneNodeCollection *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)new SimplygonSDK::CountedPointer< ISceneNodeCollection >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneNodeCollection__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)new SimplygonSDK::CountedPointer< ISceneNodeCollection >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSceneNodeCollection__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNodeCollection > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNodeCollection > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNodeCollection > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)new SimplygonSDK::CountedPointer< ISceneNodeCollection >((SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNodeCollection > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spSceneNodeCollection(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNodeCollection_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ISceneNodeCollection > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::ISceneNodeCollection *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  result = (SimplygonSDK::ISceneNodeCollection *) &((SimplygonSDK::CountedPointer< ISceneNodeCollection > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::ISceneNodeCollection *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  result = (SimplygonSDK::ISceneNodeCollection *)((SimplygonSDK::CountedPointer< ISceneNodeCollection > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::ISceneNodeCollection *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  result = (SimplygonSDK::ISceneNodeCollection *)((SimplygonSDK::CountedPointer< ISceneNodeCollection > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spSceneNodeCollection_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNodeCollection_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNodeCollection_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ISceneNodeCollection *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ISceneNodeCollection *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_FindSceneNode(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindSceneNode((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_GetSceneNode(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (*arg1)->GetSceneNode(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_AddObjectSorted(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  bool arg3 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (SimplygonSDK::rhandle)(*arg1)->AddObjectSorted(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_GetItem(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  unsigned int arg2 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->GetItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNodeCollection_RemoveAllItems(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  (*arg1)->RemoveAllItems();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_FindObject(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindObject((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_GetNextItemAsSceneNode(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rhandle *arg2 = (SimplygonSDK::rhandle *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle *)jarg2; 
  result = (*arg1)->GetNextItemAsSceneNode(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNodeCollection_IsSceneNodeInCollection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  result = (bool)(*arg1)->IsSceneNodeInCollection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_GetNextItem(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->GetNextItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_GetItemAsObject(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (*arg1)->GetItemAsObject(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNodeCollection_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNodeCollection_IsObjectInCollection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (bool)(*arg1)->IsObjectInCollection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_AddObject(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->AddObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSceneNodeCollection_IsItemInCollection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (bool)(*arg1)->IsItemInCollection(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNodeCollection_RemoveSceneNode(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->RemoveSceneNode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_GetFirstItem(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  result = (SimplygonSDK::rhandle)(*arg1)->GetFirstItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_AddSceneNode(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->AddSceneNode(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_GetItemsObject(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (*arg1)->GetItemsObject(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_RemoveItem(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rhandle arg2 = (SimplygonSDK::rhandle) 0 ;
  SimplygonSDK::rhandle result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rhandle)jarg2; 
  result = (SimplygonSDK::rhandle)(*arg1)->RemoveItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNodeCollection_RemoveObject(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  (*arg1)->RemoveObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNodeCollection_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNodeCollection_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNodeCollection_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNodeCollection_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSceneNodeCollection_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSceneNodeCollection_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSceneNodeCollection_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISceneNodeCollection > *arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISceneNodeCollection > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSettingsObject__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISettingsObject *arg1 = (SimplygonSDK::ISettingsObject *) 0 ;
  SimplygonSDK::CountedPointer< ISettingsObject > *result = 0 ;
  
  arg1 = (SimplygonSDK::ISettingsObject *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ISettingsObject > *)new SimplygonSDK::CountedPointer< ISettingsObject >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSettingsObject__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISettingsObject > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ISettingsObject > *)new SimplygonSDK::CountedPointer< ISettingsObject >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSettingsObject__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISettingsObject > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ISettingsObject > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ISettingsObject > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ISettingsObject > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ISettingsObject > *)new SimplygonSDK::CountedPointer< ISettingsObject >((SimplygonSDK::CountedPointer< SimplygonSDK::ISettingsObject > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spSettingsObject(void * jarg1) {
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSettingsObject_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ISettingsObject > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSettingsObject___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  SimplygonSDK::ISettingsObject *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  result = (SimplygonSDK::ISettingsObject *) &((SimplygonSDK::CountedPointer< ISettingsObject > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSettingsObject___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  SimplygonSDK::ISettingsObject *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  result = (SimplygonSDK::ISettingsObject *)((SimplygonSDK::CountedPointer< ISettingsObject > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSettingsObject_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  SimplygonSDK::ISettingsObject *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  result = (SimplygonSDK::ISettingsObject *)((SimplygonSDK::CountedPointer< ISettingsObject > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spSettingsObject_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSettingsObject_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSettingsObject_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSettingsObject_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ISettingsObject *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ISettingsObject *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSettingsObject_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSettingsObject_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSettingsObject_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSettingsObject_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSettingsObject_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSettingsObject_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSettingsObject_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSettingsObject_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISettingsObject > *arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISettingsObject > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShaderData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShaderData *arg1 = (SimplygonSDK::IShaderData *) 0 ;
  SimplygonSDK::CountedPointer< IShaderData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShaderData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShaderData > *)new SimplygonSDK::CountedPointer< IShaderData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShaderData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShaderData > *)new SimplygonSDK::CountedPointer< IShaderData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShaderData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShaderData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShaderData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShaderData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShaderData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShaderData > *)new SimplygonSDK::CountedPointer< IShaderData >((SimplygonSDK::CountedPointer< SimplygonSDK::IShaderData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShaderData(void * jarg1) {
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShaderData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShaderData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::IShaderData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (SimplygonSDK::IShaderData *) &((SimplygonSDK::CountedPointer< IShaderData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::IShaderData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (SimplygonSDK::IShaderData *)((SimplygonSDK::CountedPointer< IShaderData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::IShaderData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (SimplygonSDK::IShaderData *)((SimplygonSDK::CountedPointer< IShaderData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShaderData_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShaderData_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShaderData_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShaderData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShaderData *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData_GetHLSLCode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (*arg1)->GetHLSLCode();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData_GetGUIHLSLCode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (*arg1)->GetGUIHLSLCode();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShaderData_SetMaterial(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::IMaterial *arg2 = (SimplygonSDK::IMaterial *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterial *)jarg2; 
  (*arg1)->SetMaterial(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData_GetMaterial(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (*arg1)->GetMaterial();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterial > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData_GetShaderInputUVSets(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (*arg1)->GetShaderInputUVSets();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData_GetShaderInputVertexColors(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (*arg1)->GetShaderInputVertexColors();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRidArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShaderData_UnloadData(void * jarg1) {
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  (*arg1)->UnloadData();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShaderData_GenerateShaderData(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (bool)(*arg1)->GenerateShaderData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData_GetGLSLFragmentCode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (*arg1)->GetGLSLFragmentCode();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData_GetShaderInputTexturePaths(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IStringArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (*arg1)->GetShaderInputTexturePaths();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IStringArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IStringArray > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData_GetGLSLVertexCode(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (*arg1)->GetGLSLVertexCode();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShaderData_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShaderData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShaderData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShaderData_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShaderData_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShaderData_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShaderData_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShaderData > *arg1 = (SimplygonSDK::CountedPointer< IShaderData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShaderData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingAddNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingAddNode *arg1 = (SimplygonSDK::IShadingAddNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingAddNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingAddNode > *)new SimplygonSDK::CountedPointer< IShadingAddNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingAddNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingAddNode > *)new SimplygonSDK::CountedPointer< IShadingAddNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingAddNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingAddNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingAddNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingAddNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingAddNode > *)new SimplygonSDK::CountedPointer< IShadingAddNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingAddNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingAddNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingAddNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingAddNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingAddNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::IShadingAddNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  result = (SimplygonSDK::IShadingAddNode *) &((SimplygonSDK::CountedPointer< IShadingAddNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingAddNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::IShadingAddNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  result = (SimplygonSDK::IShadingAddNode *)((SimplygonSDK::CountedPointer< IShadingAddNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingAddNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::IShadingAddNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  result = (SimplygonSDK::IShadingAddNode *)((SimplygonSDK::CountedPointer< IShadingAddNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingAddNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingAddNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingAddNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingAddNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingAddNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingAddNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingAddNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingAddNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingAddNode_SetInput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IShadingNode *arg3 = (SimplygonSDK::IShadingNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IShadingNode *)jarg3; 
  result = (bool)(*arg1)->SetInput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingAddNode_GetInput(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetInput(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingAddNode_GetParameterIsInputable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->GetParameterIsInputable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingAddNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingAddNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingAddNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingAddNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingAddNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingAddNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingAddNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingAddNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingAddNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingAddNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingAddNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingAddNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingAddNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingAddNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingAddNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingClampNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingClampNode *arg1 = (SimplygonSDK::IShadingClampNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingClampNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingClampNode > *)new SimplygonSDK::CountedPointer< IShadingClampNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingClampNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingClampNode > *)new SimplygonSDK::CountedPointer< IShadingClampNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingClampNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingClampNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingClampNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingClampNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingClampNode > *)new SimplygonSDK::CountedPointer< IShadingClampNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingClampNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingClampNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingClampNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingClampNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingClampNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::IShadingClampNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  result = (SimplygonSDK::IShadingClampNode *) &((SimplygonSDK::CountedPointer< IShadingClampNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingClampNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::IShadingClampNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  result = (SimplygonSDK::IShadingClampNode *)((SimplygonSDK::CountedPointer< IShadingClampNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingClampNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::IShadingClampNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  result = (SimplygonSDK::IShadingClampNode *)((SimplygonSDK::CountedPointer< IShadingClampNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingClampNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingClampNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingClampNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingClampNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingClampNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingClampNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingClampNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingClampNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingClampNode_GetInput(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetInput(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingClampNode_GetParameterIsInputable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->GetParameterIsInputable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingClampNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingClampNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingClampNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingClampNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingClampNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingClampNode_SetInput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IShadingNode *arg3 = (SimplygonSDK::IShadingNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IShadingNode *)jarg3; 
  result = (bool)(*arg1)->SetInput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingClampNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingClampNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingClampNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingClampNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingClampNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingClampNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingClampNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingClampNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingClampNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingClampNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingColorNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingColorNode *arg1 = (SimplygonSDK::IShadingColorNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingColorNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingColorNode > *)new SimplygonSDK::CountedPointer< IShadingColorNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingColorNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingColorNode > *)new SimplygonSDK::CountedPointer< IShadingColorNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingColorNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingColorNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingColorNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingColorNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingColorNode > *)new SimplygonSDK::CountedPointer< IShadingColorNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingColorNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingColorNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingColorNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingColorNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingColorNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::IShadingColorNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  result = (SimplygonSDK::IShadingColorNode *) &((SimplygonSDK::CountedPointer< IShadingColorNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingColorNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::IShadingColorNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  result = (SimplygonSDK::IShadingColorNode *)((SimplygonSDK::CountedPointer< IShadingColorNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingColorNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::IShadingColorNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  result = (SimplygonSDK::IShadingColorNode *)((SimplygonSDK::CountedPointer< IShadingColorNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingColorNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingColorNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingColorNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingColorNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingColorNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingColorNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingColorNode_SetColor(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::real arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  (*arg1)->SetColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingColorNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingColorNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingColorNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingColorNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingColorNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingColorNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingColorNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingColorNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingColorNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingColorNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingColorNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingColorNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingColorNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingColorNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingColorNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingCustomNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingCustomNode *arg1 = (SimplygonSDK::IShadingCustomNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingCustomNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)new SimplygonSDK::CountedPointer< IShadingCustomNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingCustomNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)new SimplygonSDK::CountedPointer< IShadingCustomNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingCustomNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingCustomNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingCustomNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingCustomNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)new SimplygonSDK::CountedPointer< IShadingCustomNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingCustomNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingCustomNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingCustomNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingCustomNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingCustomNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::IShadingCustomNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  result = (SimplygonSDK::IShadingCustomNode *) &((SimplygonSDK::CountedPointer< IShadingCustomNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingCustomNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::IShadingCustomNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  result = (SimplygonSDK::IShadingCustomNode *)((SimplygonSDK::CountedPointer< IShadingCustomNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingCustomNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::IShadingCustomNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  result = (SimplygonSDK::IShadingCustomNode *)((SimplygonSDK::CountedPointer< IShadingCustomNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingCustomNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingCustomNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingCustomNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingCustomNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingCustomNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingCustomNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingCustomNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingCustomNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingCustomNode_GetInputCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetInputCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingCustomNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingCustomNode_SetInputCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetInputCount(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingCustomNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingCustomNode_SetInput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IShadingNode *arg3 = (SimplygonSDK::IShadingNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IShadingNode *)jarg3; 
  result = (bool)(*arg1)->SetInput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingCustomNode_GetInput(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetInput(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingCustomNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingCustomNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingCustomNode_GetParameterIsInputable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->GetParameterIsInputable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingCustomNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingCustomNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingCustomNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingCustomNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingCustomNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingCustomNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingCustomNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingCustomNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingCustomNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingCustomNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingCustomNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingDivideNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingDivideNode *arg1 = (SimplygonSDK::IShadingDivideNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingDivideNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)new SimplygonSDK::CountedPointer< IShadingDivideNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingDivideNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)new SimplygonSDK::CountedPointer< IShadingDivideNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingDivideNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingDivideNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingDivideNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingDivideNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)new SimplygonSDK::CountedPointer< IShadingDivideNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingDivideNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingDivideNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingDivideNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingDivideNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingDivideNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::IShadingDivideNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  result = (SimplygonSDK::IShadingDivideNode *) &((SimplygonSDK::CountedPointer< IShadingDivideNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingDivideNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::IShadingDivideNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  result = (SimplygonSDK::IShadingDivideNode *)((SimplygonSDK::CountedPointer< IShadingDivideNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingDivideNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::IShadingDivideNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  result = (SimplygonSDK::IShadingDivideNode *)((SimplygonSDK::CountedPointer< IShadingDivideNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingDivideNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingDivideNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingDivideNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingDivideNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingDivideNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingDivideNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingDivideNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingDivideNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingDivideNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingDivideNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingDivideNode_GetInput(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetInput(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingDivideNode_GetParameterIsInputable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->GetParameterIsInputable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingDivideNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingDivideNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingDivideNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingDivideNode_SetInput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IShadingNode *arg3 = (SimplygonSDK::IShadingNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IShadingNode *)jarg3; 
  result = (bool)(*arg1)->SetInput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingDivideNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingDivideNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingDivideNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingDivideNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingDivideNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingDivideNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingDivideNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingDivideNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingDivideNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingDivideNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingFilterNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingFilterNode *arg1 = (SimplygonSDK::IShadingFilterNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingFilterNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)new SimplygonSDK::CountedPointer< IShadingFilterNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingFilterNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)new SimplygonSDK::CountedPointer< IShadingFilterNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingFilterNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingFilterNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingFilterNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingFilterNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)new SimplygonSDK::CountedPointer< IShadingFilterNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingFilterNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingFilterNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingFilterNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingFilterNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingFilterNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::IShadingFilterNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  result = (SimplygonSDK::IShadingFilterNode *) &((SimplygonSDK::CountedPointer< IShadingFilterNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingFilterNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::IShadingFilterNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  result = (SimplygonSDK::IShadingFilterNode *)((SimplygonSDK::CountedPointer< IShadingFilterNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingFilterNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::IShadingFilterNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  result = (SimplygonSDK::IShadingFilterNode *)((SimplygonSDK::CountedPointer< IShadingFilterNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingFilterNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingFilterNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingFilterNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingFilterNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingFilterNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingFilterNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingFilterNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingFilterNode_GetParameterIsInputable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->GetParameterIsInputable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingFilterNode_SetInput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IShadingNode *arg3 = (SimplygonSDK::IShadingNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IShadingNode *)jarg3; 
  result = (bool)(*arg1)->SetInput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingFilterNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingFilterNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingFilterNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingFilterNode_GetInput(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetInput(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingFilterNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingFilterNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingFilterNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingFilterNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingFilterNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingFilterNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingFilterNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingFilterNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingFilterNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingFilterNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingFilterNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingFilterNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingFilterNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingInterpolateNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingInterpolateNode *arg1 = (SimplygonSDK::IShadingInterpolateNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingInterpolateNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)new SimplygonSDK::CountedPointer< IShadingInterpolateNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingInterpolateNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)new SimplygonSDK::CountedPointer< IShadingInterpolateNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingInterpolateNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingInterpolateNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingInterpolateNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingInterpolateNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)new SimplygonSDK::CountedPointer< IShadingInterpolateNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingInterpolateNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingInterpolateNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingInterpolateNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingInterpolateNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingInterpolateNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::IShadingInterpolateNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  result = (SimplygonSDK::IShadingInterpolateNode *) &((SimplygonSDK::CountedPointer< IShadingInterpolateNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingInterpolateNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::IShadingInterpolateNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  result = (SimplygonSDK::IShadingInterpolateNode *)((SimplygonSDK::CountedPointer< IShadingInterpolateNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingInterpolateNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::IShadingInterpolateNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  result = (SimplygonSDK::IShadingInterpolateNode *)((SimplygonSDK::CountedPointer< IShadingInterpolateNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingInterpolateNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingInterpolateNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingInterpolateNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingInterpolateNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingInterpolateNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingInterpolateNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingInterpolateNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingInterpolateNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingInterpolateNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingInterpolateNode_SetInput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IShadingNode *arg3 = (SimplygonSDK::IShadingNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IShadingNode *)jarg3; 
  result = (bool)(*arg1)->SetInput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingInterpolateNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingInterpolateNode_GetParameterIsInputable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->GetParameterIsInputable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingInterpolateNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingInterpolateNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingInterpolateNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingInterpolateNode_GetInput(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetInput(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingInterpolateNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingInterpolateNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingInterpolateNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingInterpolateNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingInterpolateNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingInterpolateNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingInterpolateNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingInterpolateNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingInterpolateNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingInterpolateNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingMultiplyNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingMultiplyNode *arg1 = (SimplygonSDK::IShadingMultiplyNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingMultiplyNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)new SimplygonSDK::CountedPointer< IShadingMultiplyNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingMultiplyNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)new SimplygonSDK::CountedPointer< IShadingMultiplyNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingMultiplyNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMultiplyNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMultiplyNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMultiplyNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)new SimplygonSDK::CountedPointer< IShadingMultiplyNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMultiplyNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingMultiplyNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMultiplyNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingMultiplyNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMultiplyNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::IShadingMultiplyNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  result = (SimplygonSDK::IShadingMultiplyNode *) &((SimplygonSDK::CountedPointer< IShadingMultiplyNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMultiplyNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::IShadingMultiplyNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  result = (SimplygonSDK::IShadingMultiplyNode *)((SimplygonSDK::CountedPointer< IShadingMultiplyNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMultiplyNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::IShadingMultiplyNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  result = (SimplygonSDK::IShadingMultiplyNode *)((SimplygonSDK::CountedPointer< IShadingMultiplyNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingMultiplyNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMultiplyNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMultiplyNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMultiplyNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingMultiplyNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingMultiplyNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingMultiplyNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMultiplyNode_GetParameterIsInputable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->GetParameterIsInputable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMultiplyNode_SetInput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IShadingNode *arg3 = (SimplygonSDK::IShadingNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IShadingNode *)jarg3; 
  result = (bool)(*arg1)->SetInput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingMultiplyNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingMultiplyNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMultiplyNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMultiplyNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMultiplyNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMultiplyNode_GetInput(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetInput(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingMultiplyNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMultiplyNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMultiplyNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMultiplyNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMultiplyNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMultiplyNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingMultiplyNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMultiplyNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMultiplyNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMultiplyNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMultiplyNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingNode *arg1 = (SimplygonSDK::IShadingNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingNode > *)new SimplygonSDK::CountedPointer< IShadingNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingNode > *)new SimplygonSDK::CountedPointer< IShadingNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingNode > *)new SimplygonSDK::CountedPointer< IShadingNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::IShadingNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  result = (SimplygonSDK::IShadingNode *) &((SimplygonSDK::CountedPointer< IShadingNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::IShadingNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  result = (SimplygonSDK::IShadingNode *)((SimplygonSDK::CountedPointer< IShadingNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::IShadingNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  result = (SimplygonSDK::IShadingNode *)((SimplygonSDK::CountedPointer< IShadingNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingSubtractNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingSubtractNode *arg1 = (SimplygonSDK::IShadingSubtractNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingSubtractNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)new SimplygonSDK::CountedPointer< IShadingSubtractNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingSubtractNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)new SimplygonSDK::CountedPointer< IShadingSubtractNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingSubtractNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSubtractNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSubtractNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSubtractNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)new SimplygonSDK::CountedPointer< IShadingSubtractNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSubtractNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingSubtractNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSubtractNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingSubtractNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSubtractNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::IShadingSubtractNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  result = (SimplygonSDK::IShadingSubtractNode *) &((SimplygonSDK::CountedPointer< IShadingSubtractNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSubtractNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::IShadingSubtractNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  result = (SimplygonSDK::IShadingSubtractNode *)((SimplygonSDK::CountedPointer< IShadingSubtractNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSubtractNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::IShadingSubtractNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  result = (SimplygonSDK::IShadingSubtractNode *)((SimplygonSDK::CountedPointer< IShadingSubtractNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingSubtractNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSubtractNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSubtractNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSubtractNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingSubtractNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingSubtractNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSubtractNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingSubtractNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingSubtractNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingSubtractNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingSubtractNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSubtractNode_SetInput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IShadingNode *arg3 = (SimplygonSDK::IShadingNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IShadingNode *)jarg3; 
  result = (bool)(*arg1)->SetInput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSubtractNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSubtractNode_GetInput(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetInput(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSubtractNode_GetParameterIsInputable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->GetParameterIsInputable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSubtractNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSubtractNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSubtractNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSubtractNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSubtractNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSubtractNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingSubtractNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSubtractNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSubtractNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSubtractNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSubtractNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingSwizzlingNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingSwizzlingNode *arg1 = (SimplygonSDK::IShadingSwizzlingNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingSwizzlingNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)new SimplygonSDK::CountedPointer< IShadingSwizzlingNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingSwizzlingNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)new SimplygonSDK::CountedPointer< IShadingSwizzlingNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingSwizzlingNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSwizzlingNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSwizzlingNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSwizzlingNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)new SimplygonSDK::CountedPointer< IShadingSwizzlingNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingSwizzlingNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingSwizzlingNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSwizzlingNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingSwizzlingNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSwizzlingNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::IShadingSwizzlingNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  result = (SimplygonSDK::IShadingSwizzlingNode *) &((SimplygonSDK::CountedPointer< IShadingSwizzlingNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSwizzlingNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::IShadingSwizzlingNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  result = (SimplygonSDK::IShadingSwizzlingNode *)((SimplygonSDK::CountedPointer< IShadingSwizzlingNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::IShadingSwizzlingNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  result = (SimplygonSDK::IShadingSwizzlingNode *)((SimplygonSDK::CountedPointer< IShadingSwizzlingNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSwizzlingNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSwizzlingNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSwizzlingNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingSwizzlingNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingSwizzlingNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetRedComponent(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetRedComponent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSwizzlingNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetBlueComponent(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetBlueComponent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSwizzlingNode_SetBlueComponent(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetBlueComponent(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetInput(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetInput(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSwizzlingNode_SetGreenComponent(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetGreenComponent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSwizzlingNode_SetRedComponent(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetRedComponent(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetGreenComponent(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetGreenComponent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSwizzlingNode_SetAlphaComponent(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetAlphaComponent(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetParameterIsInputable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->GetParameterIsInputable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetAlphaComponent(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetAlphaComponent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSwizzlingNode_SetInput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IShadingNode *arg3 = (SimplygonSDK::IShadingNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IShadingNode *)jarg3; 
  result = (bool)(*arg1)->SetInput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSwizzlingNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSwizzlingNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSwizzlingNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSwizzlingNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingSwizzlingNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingSwizzlingNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingSwizzlingNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingSwizzlingNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingTextureNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingTextureNode *arg1 = (SimplygonSDK::IShadingTextureNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingTextureNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)new SimplygonSDK::CountedPointer< IShadingTextureNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingTextureNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)new SimplygonSDK::CountedPointer< IShadingTextureNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingTextureNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingTextureNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingTextureNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingTextureNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)new SimplygonSDK::CountedPointer< IShadingTextureNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingTextureNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingTextureNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingTextureNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingTextureNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingTextureNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::IShadingTextureNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  result = (SimplygonSDK::IShadingTextureNode *) &((SimplygonSDK::CountedPointer< IShadingTextureNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingTextureNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::IShadingTextureNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  result = (SimplygonSDK::IShadingTextureNode *)((SimplygonSDK::CountedPointer< IShadingTextureNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingTextureNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::IShadingTextureNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  result = (SimplygonSDK::IShadingTextureNode *)((SimplygonSDK::CountedPointer< IShadingTextureNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingTextureNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingTextureNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingTextureNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingTextureNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingTextureNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingTextureNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingTextureNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingTextureNode_GetTextureName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  result = (*arg1)->GetTextureName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingTextureNode_SetTileV(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetTileV(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingTextureNode_GetTileV(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetTileV();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingTextureNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingTextureNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingTextureNode_GetTileU(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetTileU();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingTextureNode_GetUseSRGB(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  result = (bool)(*arg1)->GetUseSRGB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingTextureNode_SetTileU(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetTileU(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingTextureNode_GetTexCoordSet(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  result = (*arg1)->GetTexCoordSet();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingTextureNode_SetTexCoordSet(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetTexCoordSet((char const *)arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingTextureNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingTextureNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingTextureNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingTextureNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingTextureNode_SetTextureName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetTextureName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingTextureNode_SetUseSRGB(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseSRGB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingTextureNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingTextureNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingTextureNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingTextureNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingTextureNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingTextureNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingTextureNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingTextureNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingTextureNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingTextureNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingVertexColorNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingVertexColorNode *arg1 = (SimplygonSDK::IShadingVertexColorNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingVertexColorNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)new SimplygonSDK::CountedPointer< IShadingVertexColorNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingVertexColorNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)new SimplygonSDK::CountedPointer< IShadingVertexColorNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingVertexColorNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingVertexColorNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingVertexColorNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingVertexColorNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)new SimplygonSDK::CountedPointer< IShadingVertexColorNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingVertexColorNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingVertexColorNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingVertexColorNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingVertexColorNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingVertexColorNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::IShadingVertexColorNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  result = (SimplygonSDK::IShadingVertexColorNode *) &((SimplygonSDK::CountedPointer< IShadingVertexColorNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingVertexColorNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::IShadingVertexColorNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  result = (SimplygonSDK::IShadingVertexColorNode *)((SimplygonSDK::CountedPointer< IShadingVertexColorNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingVertexColorNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::IShadingVertexColorNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  result = (SimplygonSDK::IShadingVertexColorNode *)((SimplygonSDK::CountedPointer< IShadingVertexColorNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingVertexColorNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingVertexColorNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingVertexColorNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingVertexColorNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingVertexColorNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingVertexColorNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingVertexColorNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingVertexColorNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingVertexColorNode_SetVertexColorIndex(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetVertexColorIndex(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingVertexColorNode_GetVertexColorIndex(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetVertexColorIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingVertexColorNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingVertexColorNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingVertexColorNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingVertexColorNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingVertexColorNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingVertexColorNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingVertexColorNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingVertexColorNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingVertexColorNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingVertexColorNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingVertexColorNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingVertexColorNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingVertexColorNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingVertexColorNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingVertexColorNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShortArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShortArray *arg1 = (SimplygonSDK::IShortArray *) 0 ;
  SimplygonSDK::CountedPointer< IShortArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShortArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShortArray > *)new SimplygonSDK::CountedPointer< IShortArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShortArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShortArray > *)new SimplygonSDK::CountedPointer< IShortArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShortArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShortArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShortArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShortArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShortArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShortArray > *)new SimplygonSDK::CountedPointer< IShortArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IShortArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShortArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShortArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShortArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShortArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IShortArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (SimplygonSDK::IShortArray *) &((SimplygonSDK::CountedPointer< IShortArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShortArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IShortArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (SimplygonSDK::IShortArray *)((SimplygonSDK::CountedPointer< IShortArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShortArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IShortArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (SimplygonSDK::IShortArray *)((SimplygonSDK::CountedPointer< IShortArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShortArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShortArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShortArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShortArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShortArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShortArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShortArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_SetDataRange(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  short *arg3 = (short *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (short *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShortArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShortArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShortArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IShortData *arg3 = (SimplygonSDK::IShortData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IShortData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_GetTuple__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  short *arg3 = (short *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (short *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShortArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_SetData(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  short *arg2 = (short *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (short *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShortArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShortArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::IShortData *arg4 = (SimplygonSDK::IShortData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::IShortData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  short *arg4 = (short *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (short *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IShortData *arg2 = (SimplygonSDK::IShortData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IShortData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_GetData__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  short *arg2 = (short *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (short *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShortArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShortArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShortArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShortArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShortArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_AddItem(void * jarg1, short jarg2) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  short arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (short)jarg2; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_SetItem(void * jarg1, int jarg2, short jarg3) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  short arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (short)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShortArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_spShortArray_GetItem(void * jarg1, int jarg2) {
  short jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  short result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (short)(*arg1)->GetItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_AddTuple(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  short *arg2 = (short *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (short *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_SetTuple(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  short *arg3 = (short *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (short *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShortArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShortArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShortArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortArray > *arg1 = (SimplygonSDK::CountedPointer< IShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShortData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShortData *arg1 = (SimplygonSDK::IShortData *) 0 ;
  SimplygonSDK::CountedPointer< IShortData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShortData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShortData > *)new SimplygonSDK::CountedPointer< IShortData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShortData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShortData > *)new SimplygonSDK::CountedPointer< IShortData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShortData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShortData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShortData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShortData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShortData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShortData > *)new SimplygonSDK::CountedPointer< IShortData >((SimplygonSDK::CountedPointer< SimplygonSDK::IShortData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShortData(void * jarg1) {
  SimplygonSDK::CountedPointer< IShortData > *arg1 = (SimplygonSDK::CountedPointer< IShortData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShortData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShortData > *arg1 = (SimplygonSDK::CountedPointer< IShortData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShortData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShortData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortData > *arg1 = (SimplygonSDK::CountedPointer< IShortData > *) 0 ;
  SimplygonSDK::IShortData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortData > *)jarg1; 
  result = (SimplygonSDK::IShortData *) &((SimplygonSDK::CountedPointer< IShortData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShortData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortData > *arg1 = (SimplygonSDK::CountedPointer< IShortData > *) 0 ;
  SimplygonSDK::IShortData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortData > *)jarg1; 
  result = (SimplygonSDK::IShortData *)((SimplygonSDK::CountedPointer< IShortData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShortData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortData > *arg1 = (SimplygonSDK::CountedPointer< IShortData > *) 0 ;
  SimplygonSDK::IShortData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortData > *)jarg1; 
  result = (SimplygonSDK::IShortData *)((SimplygonSDK::CountedPointer< IShortData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShortData_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShortData > *arg1 = (SimplygonSDK::CountedPointer< IShortData > *) 0 ;
  short *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortData > *)jarg1; 
  result = (short *)(*arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_spShortData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  short jresult ;
  SimplygonSDK::CountedPointer< IShortData > *arg1 = (SimplygonSDK::CountedPointer< IShortData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  short *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (short *) &(*arg1)->GetItem(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShortData > *arg1 = (SimplygonSDK::CountedPointer< IShortData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShortData > *arg1 = (SimplygonSDK::CountedPointer< IShortData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShortData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IShortData > *arg1 = (SimplygonSDK::CountedPointer< IShortData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShortData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShortData > *arg1 = (SimplygonSDK::CountedPointer< IShortData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShortData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spStringArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IStringArray *arg1 = (SimplygonSDK::IStringArray *) 0 ;
  SimplygonSDK::CountedPointer< IStringArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IStringArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IStringArray > *)new SimplygonSDK::CountedPointer< IStringArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spStringArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IStringArray > *)new SimplygonSDK::CountedPointer< IStringArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spStringArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IStringArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IStringArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IStringArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IStringArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IStringArray > *)new SimplygonSDK::CountedPointer< IStringArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IStringArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spStringArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spStringArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IStringArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spStringArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IStringArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (SimplygonSDK::IStringArray *) &((SimplygonSDK::CountedPointer< IStringArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spStringArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IStringArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (SimplygonSDK::IStringArray *)((SimplygonSDK::CountedPointer< IStringArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spStringArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IStringArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (SimplygonSDK::IStringArray *)((SimplygonSDK::CountedPointer< IStringArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spStringArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spStringArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spStringArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spStringArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IStringArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IStringArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spStringArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_AddItem(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->AddItem((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spStringArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spStringArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spStringArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spStringArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spStringArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_SetItem(void * jarg1, int jarg2, char * jarg3) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (char *)jarg3; 
  (*arg1)->SetItem(arg2,(char const *)arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spStringArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spStringArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spStringArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spStringArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spStringArray_GetItem(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetItem(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spStringArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spStringArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spStringArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spStringArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spStringArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spStringArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spStringArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IStringArray > *arg1 = (SimplygonSDK::CountedPointer< IStringArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IStringArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spTable__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ITable *arg1 = (SimplygonSDK::ITable *) 0 ;
  SimplygonSDK::CountedPointer< ITable > *result = 0 ;
  
  arg1 = (SimplygonSDK::ITable *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ITable > *)new SimplygonSDK::CountedPointer< ITable >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spTable__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITable > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ITable > *)new SimplygonSDK::CountedPointer< ITable >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spTable__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITable > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ITable > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ITable > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ITable > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ITable > *)new SimplygonSDK::CountedPointer< ITable >((SimplygonSDK::CountedPointer< SimplygonSDK::ITable > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spTable(void * jarg1) {
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTable_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ITable > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTable___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::ITable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  result = (SimplygonSDK::ITable *) &((SimplygonSDK::CountedPointer< ITable > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTable___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::ITable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  result = (SimplygonSDK::ITable *)((SimplygonSDK::CountedPointer< ITable > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTable_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::ITable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  result = (SimplygonSDK::ITable *)((SimplygonSDK::CountedPointer< ITable > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spTable_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTable_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTable_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTable_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ITable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ITable *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTable_RemoveItem(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveItem(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spTable_AddItem(void * jarg1, void * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->AddItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTable_GetItem(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetItem(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTable_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTable_FindItem(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindItem((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTable_GetItemsCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTable_SetItem(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IObject *arg3 = (SimplygonSDK::IObject *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IObject *)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spTable_FindItemId(void * jarg1, char * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->FindItemId((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTable_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTable_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTable_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTable_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTable_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spTable_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTable_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTable_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITable > *arg1 = (SimplygonSDK::CountedPointer< ITable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spTexture__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ITexture *arg1 = (SimplygonSDK::ITexture *) 0 ;
  SimplygonSDK::CountedPointer< ITexture > *result = 0 ;
  
  arg1 = (SimplygonSDK::ITexture *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ITexture > *)new SimplygonSDK::CountedPointer< ITexture >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spTexture__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITexture > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ITexture > *)new SimplygonSDK::CountedPointer< ITexture >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spTexture__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITexture > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ITexture > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ITexture > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ITexture > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ITexture > *)new SimplygonSDK::CountedPointer< ITexture >((SimplygonSDK::CountedPointer< SimplygonSDK::ITexture > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spTexture(void * jarg1) {
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTexture_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ITexture > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTexture___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::ITexture *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  result = (SimplygonSDK::ITexture *) &((SimplygonSDK::CountedPointer< ITexture > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTexture___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::ITexture *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  result = (SimplygonSDK::ITexture *)((SimplygonSDK::CountedPointer< ITexture > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTexture_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::ITexture *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  result = (SimplygonSDK::ITexture *)((SimplygonSDK::CountedPointer< ITexture > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spTexture_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTexture_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTexture_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTexture_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ITexture *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ITexture *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTexture_GetFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  result = (*arg1)->GetFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTexture_SetFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetFilePath((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTexture_SetImageData(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::IImageData *arg2 = (SimplygonSDK::IImageData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  arg2 = (SimplygonSDK::IImageData *)jarg2; 
  (*arg1)->SetImageData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTexture_GetImageData(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  result = (*arg1)->GetImageData();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImageData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImageData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTexture_ChangeTexturePrefixPath(void * jarg1, char * jarg2, char * jarg3) {
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (*arg1)->ChangeTexturePrefixPath((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTexture_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTexture_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTexture_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTexture_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTexture_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spTexture_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTexture_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTexture_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITexture > *arg1 = (SimplygonSDK::CountedPointer< ITexture > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITexture > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spTextureTable__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ITextureTable *arg1 = (SimplygonSDK::ITextureTable *) 0 ;
  SimplygonSDK::CountedPointer< ITextureTable > *result = 0 ;
  
  arg1 = (SimplygonSDK::ITextureTable *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ITextureTable > *)new SimplygonSDK::CountedPointer< ITextureTable >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spTextureTable__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ITextureTable > *)new SimplygonSDK::CountedPointer< ITextureTable >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spTextureTable__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ITextureTable > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ITextureTable > *)new SimplygonSDK::CountedPointer< ITextureTable >((SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spTextureTable(void * jarg1) {
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTextureTable_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ITextureTable > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTextureTable___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::ITextureTable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  result = (SimplygonSDK::ITextureTable *) &((SimplygonSDK::CountedPointer< ITextureTable > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTextureTable___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::ITextureTable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  result = (SimplygonSDK::ITextureTable *)((SimplygonSDK::CountedPointer< ITextureTable > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTextureTable_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::ITextureTable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  result = (SimplygonSDK::ITextureTable *)((SimplygonSDK::CountedPointer< ITextureTable > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spTextureTable_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTextureTable_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTextureTable_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTextureTable_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ITextureTable *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ITextureTable *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTextureTable_GetTexture(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITexture > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetTexture(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ITexture >((const SimplygonSDK::CountedPointer< SimplygonSDK::ITexture > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTextureTable_SetTexture(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::ITexture *arg3 = (SimplygonSDK::ITexture *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::ITexture *)jarg3; 
  (*arg1)->SetTexture(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spTextureTable_FindItemId(void * jarg1, char * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->FindItemId((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTextureTable_RemoveTexture(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveTexture(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTextureTable_FindItem(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindItem((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTextureTable_GetTexturesCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTexturesCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTextureTable_SetItem(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IObject *arg3 = (SimplygonSDK::IObject *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IObject *)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTextureTable_GetItem(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SwigValueWrapper< SimplygonSDK::CountedPointer< SimplygonSDK::IObject > > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetItem(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IObject >((const SimplygonSDK::CountedPointer< SimplygonSDK::IObject > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTextureTable_RemoveItem(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTextureTable_ChangeTexturePrefixPath(void * jarg1, char * jarg2, char * jarg3) {
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (*arg1)->ChangeTexturePrefixPath((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTextureTable_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTextureTable_GetItemsCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spTextureTable_AddItem(void * jarg1, void * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->AddItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spTextureTable_AddTexture(void * jarg1, void * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::ITexture *arg2 = (SimplygonSDK::ITexture *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::ITexture *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->AddTexture(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTextureTable_FindTexture(void * jarg1, char * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITexture > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (*arg1)->FindTexture((char const *)arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ITexture >((const SimplygonSDK::CountedPointer< SimplygonSDK::ITexture > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spTextureTable_FindTextureId(void * jarg1, char * jarg2) {
  int jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  char *arg2 = (char *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (SimplygonSDK::rid)(*arg1)->FindTextureId((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTextureTable_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTextureTable_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTextureTable_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTextureTable_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTextureTable_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spTextureTable_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTextureTable_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTextureTable_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITextureTable > *arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITextureTable > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spTransform3__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ITransform3 *arg1 = (SimplygonSDK::ITransform3 *) 0 ;
  SimplygonSDK::CountedPointer< ITransform3 > *result = 0 ;
  
  arg1 = (SimplygonSDK::ITransform3 *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ITransform3 > *)new SimplygonSDK::CountedPointer< ITransform3 >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spTransform3__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ITransform3 > *)new SimplygonSDK::CountedPointer< ITransform3 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spTransform3__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITransform3 > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ITransform3 > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ITransform3 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ITransform3 > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ITransform3 > *)new SimplygonSDK::CountedPointer< ITransform3 >((SimplygonSDK::CountedPointer< SimplygonSDK::ITransform3 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spTransform3(void * jarg1) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTransform3_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ITransform3 > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTransform3___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::ITransform3 *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  result = (SimplygonSDK::ITransform3 *) &((SimplygonSDK::CountedPointer< ITransform3 > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTransform3___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::ITransform3 *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  result = (SimplygonSDK::ITransform3 *)((SimplygonSDK::CountedPointer< ITransform3 > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTransform3_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::ITransform3 *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  result = (SimplygonSDK::ITransform3 *)((SimplygonSDK::CountedPointer< ITransform3 > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spTransform3_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTransform3_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTransform3_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTransform3_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ITransform3 *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ITransform3 *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_PostMultiply(void * jarg1) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  (*arg1)->PostMultiply();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_PreMultiply(void * jarg1) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  (*arg1)->PreMultiply();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTransform3_GetStack(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  result = (*arg1)->GetStack();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IRealArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_AddTranslation(void * jarg1, float jarg2, float jarg3, float jarg4) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::real arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  (*arg1)->AddTranslation(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTransform3_IsPostMultiply(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  result = (bool)(*arg1)->IsPostMultiply();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_AddScaling(void * jarg1, float jarg2, float jarg3, float jarg4) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::real arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  (*arg1)->AddScaling(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_AddTransformation__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::IMatrix4x4 *arg2 = (SimplygonSDK::IMatrix4x4 *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  arg2 = (SimplygonSDK::IMatrix4x4 *)jarg2; 
  (*arg1)->AddTransformation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_AddTransformation__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::ITransform3 *arg2 = (SimplygonSDK::ITransform3 *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  arg2 = (SimplygonSDK::ITransform3 *)jarg2; 
  (*arg1)->AddTransformation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spTransform3_IsPreMultiply(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  result = (bool)(*arg1)->IsPreMultiply();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_Push(void * jarg1) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  (*arg1)->Push();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_Pop(void * jarg1) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  (*arg1)->Pop();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTransform3_GetMatrix(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  result = (*arg1)->GetMatrix();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMatrix4x4 > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_AddRotation(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::real arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  (*arg1)->AddRotation(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTransform3_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spTransform3_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spTransform3_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spTransform3_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ITransform3 > *arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ITransform3 > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedCharArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IUnsignedCharArray *arg1 = (SimplygonSDK::IUnsignedCharArray *) 0 ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IUnsignedCharArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)new SimplygonSDK::CountedPointer< IUnsignedCharArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedCharArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)new SimplygonSDK::CountedPointer< IUnsignedCharArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedCharArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedCharArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedCharArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedCharArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)new SimplygonSDK::CountedPointer< IUnsignedCharArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedCharArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spUnsignedCharArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedCharArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IUnsignedCharArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedCharArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IUnsignedCharArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (SimplygonSDK::IUnsignedCharArray *) &((SimplygonSDK::CountedPointer< IUnsignedCharArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedCharArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IUnsignedCharArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (SimplygonSDK::IUnsignedCharArray *)((SimplygonSDK::CountedPointer< IUnsignedCharArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedCharArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IUnsignedCharArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (SimplygonSDK::IUnsignedCharArray *)((SimplygonSDK::CountedPointer< IUnsignedCharArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spUnsignedCharArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedCharArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedCharArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedCharArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IUnsignedCharArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IUnsignedCharArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_SetData(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_AddItem(void * jarg1, unsigned char jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  unsigned char arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (unsigned char)jarg2; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedCharArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IUnsignedCharData *arg2 = (SimplygonSDK::IUnsignedCharData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IUnsignedCharData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_GetData__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedCharArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::IUnsignedCharData *arg4 = (SimplygonSDK::IUnsignedCharData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::IUnsignedCharData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned char *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_SetDataRange(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_SetItem(void * jarg1, int jarg2, unsigned char jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned char arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned char)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedCharArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_AddTuple(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedCharArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedCharArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_SetTuple(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedCharArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_spUnsignedCharArray_GetItem(void * jarg1, int jarg2) {
  unsigned char jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned char result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (unsigned char)(*arg1)->GetItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedCharArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IUnsignedCharData *arg3 = (SimplygonSDK::IUnsignedCharData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IUnsignedCharData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_GetTuple__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUnsignedCharArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedCharArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedCharArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedCharArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedCharArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedCharArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedCharArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedCharArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedCharArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedCharData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IUnsignedCharData *arg1 = (SimplygonSDK::IUnsignedCharData *) 0 ;
  SimplygonSDK::CountedPointer< IUnsignedCharData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IUnsignedCharData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)new SimplygonSDK::CountedPointer< IUnsignedCharData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedCharData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)new SimplygonSDK::CountedPointer< IUnsignedCharData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedCharData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedCharData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IUnsignedCharData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedCharData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedCharData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)new SimplygonSDK::CountedPointer< IUnsignedCharData >((SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedCharData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spUnsignedCharData(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedCharData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedCharData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IUnsignedCharData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedCharData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *) 0 ;
  SimplygonSDK::IUnsignedCharData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)jarg1; 
  result = (SimplygonSDK::IUnsignedCharData *) &((SimplygonSDK::CountedPointer< IUnsignedCharData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedCharData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *) 0 ;
  SimplygonSDK::IUnsignedCharData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)jarg1; 
  result = (SimplygonSDK::IUnsignedCharData *)((SimplygonSDK::CountedPointer< IUnsignedCharData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedCharData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *) 0 ;
  SimplygonSDK::IUnsignedCharData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)jarg1; 
  result = (SimplygonSDK::IUnsignedCharData *)((SimplygonSDK::CountedPointer< IUnsignedCharData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedCharData_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)jarg1; 
  result = (unsigned char *)(*arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_spUnsignedCharData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  unsigned char jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned char *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (unsigned char *) &(*arg1)->GetItem(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedCharData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedCharData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedCharData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedCharData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedCharData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedCharData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedCharData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedIntArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IUnsignedIntArray *arg1 = (SimplygonSDK::IUnsignedIntArray *) 0 ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IUnsignedIntArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)new SimplygonSDK::CountedPointer< IUnsignedIntArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedIntArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)new SimplygonSDK::CountedPointer< IUnsignedIntArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedIntArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedIntArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedIntArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedIntArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)new SimplygonSDK::CountedPointer< IUnsignedIntArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedIntArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spUnsignedIntArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedIntArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IUnsignedIntArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedIntArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IUnsignedIntArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (SimplygonSDK::IUnsignedIntArray *) &((SimplygonSDK::CountedPointer< IUnsignedIntArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedIntArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IUnsignedIntArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (SimplygonSDK::IUnsignedIntArray *)((SimplygonSDK::CountedPointer< IUnsignedIntArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedIntArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IUnsignedIntArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (SimplygonSDK::IUnsignedIntArray *)((SimplygonSDK::CountedPointer< IUnsignedIntArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spUnsignedIntArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedIntArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedIntArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedIntArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IUnsignedIntArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IUnsignedIntArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedIntArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_SetTuple(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedIntArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedIntArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_AddTuple(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IUnsignedIntData *arg3 = (SimplygonSDK::IUnsignedIntData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IUnsignedIntData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_GetTuple__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedIntArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedIntArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_AddItem(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedIntArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUnsignedIntArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedIntArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IUnsignedIntData *arg2 = (SimplygonSDK::IUnsignedIntData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IUnsignedIntData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_GetData__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_SetItem(void * jarg1, int jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_SetDataRange(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedIntArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedIntArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedIntArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedIntArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::IUnsignedIntData *arg4 = (SimplygonSDK::IUnsignedIntData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::IUnsignedIntData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedIntArray_GetItem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (unsigned int)(*arg1)->GetItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_SetData(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedIntArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedIntArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedIntArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedIntArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedIntData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IUnsignedIntData *arg1 = (SimplygonSDK::IUnsignedIntData *) 0 ;
  SimplygonSDK::CountedPointer< IUnsignedIntData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IUnsignedIntData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)new SimplygonSDK::CountedPointer< IUnsignedIntData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedIntData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)new SimplygonSDK::CountedPointer< IUnsignedIntData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedIntData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedIntData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IUnsignedIntData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedIntData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedIntData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)new SimplygonSDK::CountedPointer< IUnsignedIntData >((SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedIntData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spUnsignedIntData(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedIntData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedIntData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IUnsignedIntData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedIntData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *) 0 ;
  SimplygonSDK::IUnsignedIntData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)jarg1; 
  result = (SimplygonSDK::IUnsignedIntData *) &((SimplygonSDK::CountedPointer< IUnsignedIntData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedIntData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *) 0 ;
  SimplygonSDK::IUnsignedIntData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)jarg1; 
  result = (SimplygonSDK::IUnsignedIntData *)((SimplygonSDK::CountedPointer< IUnsignedIntData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedIntData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *) 0 ;
  SimplygonSDK::IUnsignedIntData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)jarg1; 
  result = (SimplygonSDK::IUnsignedIntData *)((SimplygonSDK::CountedPointer< IUnsignedIntData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedIntData_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)jarg1; 
  result = (unsigned int *)(*arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedIntData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (unsigned int *) &(*arg1)->GetItem(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedIntData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedIntData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedIntData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedIntData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedIntData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedIntData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedIntData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedLongArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IUnsignedLongArray *arg1 = (SimplygonSDK::IUnsignedLongArray *) 0 ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IUnsignedLongArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)new SimplygonSDK::CountedPointer< IUnsignedLongArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedLongArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)new SimplygonSDK::CountedPointer< IUnsignedLongArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedLongArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedLongArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedLongArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedLongArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)new SimplygonSDK::CountedPointer< IUnsignedLongArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedLongArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spUnsignedLongArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedLongArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IUnsignedLongArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedLongArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IUnsignedLongArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (SimplygonSDK::IUnsignedLongArray *) &((SimplygonSDK::CountedPointer< IUnsignedLongArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedLongArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IUnsignedLongArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (SimplygonSDK::IUnsignedLongArray *)((SimplygonSDK::CountedPointer< IUnsignedLongArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedLongArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IUnsignedLongArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (SimplygonSDK::IUnsignedLongArray *)((SimplygonSDK::CountedPointer< IUnsignedLongArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spUnsignedLongArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedLongArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedLongArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedLongArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IUnsignedLongArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IUnsignedLongArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedLongArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedLongArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedLongArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_AddItem(void * jarg1, unsigned long jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  unsigned long arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_SetItem(void * jarg1, int jarg2, unsigned long jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned long arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned long)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedLongArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedLongArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_SetDataRange(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned long *arg3 = (unsigned long *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned long *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_AddTuple(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  unsigned long *arg2 = (unsigned long *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (unsigned long *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedLongArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_spUnsignedLongArray_GetItem(void * jarg1, int jarg2) {
  unsigned long jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned long result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (unsigned long)(*arg1)->GetItem(arg2);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedLongArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedLongArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_SetTuple(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned long *arg3 = (unsigned long *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned long *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedLongArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IUnsignedLongData *arg2 = (SimplygonSDK::IUnsignedLongData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IUnsignedLongData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_GetData__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  unsigned long *arg2 = (unsigned long *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (unsigned long *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IUnsignedLongData *arg3 = (SimplygonSDK::IUnsignedLongData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IUnsignedLongData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_GetTuple__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned long *arg3 = (unsigned long *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned long *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::IUnsignedLongData *arg4 = (SimplygonSDK::IUnsignedLongData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::IUnsignedLongData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  unsigned long *arg4 = (unsigned long *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned long *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedLongArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_SetData(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  unsigned long *arg2 = (unsigned long *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (unsigned long *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedLongArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUnsignedLongArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedLongArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedLongArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedLongArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedLongArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedLongData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IUnsignedLongData *arg1 = (SimplygonSDK::IUnsignedLongData *) 0 ;
  SimplygonSDK::CountedPointer< IUnsignedLongData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IUnsignedLongData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)new SimplygonSDK::CountedPointer< IUnsignedLongData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedLongData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)new SimplygonSDK::CountedPointer< IUnsignedLongData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedLongData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedLongData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IUnsignedLongData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedLongData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedLongData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)new SimplygonSDK::CountedPointer< IUnsignedLongData >((SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedLongData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spUnsignedLongData(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedLongData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedLongData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IUnsignedLongData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedLongData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *) 0 ;
  SimplygonSDK::IUnsignedLongData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)jarg1; 
  result = (SimplygonSDK::IUnsignedLongData *) &((SimplygonSDK::CountedPointer< IUnsignedLongData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedLongData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *) 0 ;
  SimplygonSDK::IUnsignedLongData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)jarg1; 
  result = (SimplygonSDK::IUnsignedLongData *)((SimplygonSDK::CountedPointer< IUnsignedLongData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedLongData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *) 0 ;
  SimplygonSDK::IUnsignedLongData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)jarg1; 
  result = (SimplygonSDK::IUnsignedLongData *)((SimplygonSDK::CountedPointer< IUnsignedLongData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedLongData_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *) 0 ;
  unsigned long *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)jarg1; 
  result = (unsigned long *)(*arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_spUnsignedLongData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  unsigned long jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned long *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (unsigned long *) &(*arg1)->GetItem(arg2);
  jresult = (unsigned long)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedLongData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedLongData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedLongData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedLongData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedLongData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedLongData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedLongData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedShortArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IUnsignedShortArray *arg1 = (SimplygonSDK::IUnsignedShortArray *) 0 ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IUnsignedShortArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)new SimplygonSDK::CountedPointer< IUnsignedShortArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedShortArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)new SimplygonSDK::CountedPointer< IUnsignedShortArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedShortArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedShortArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedShortArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedShortArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)new SimplygonSDK::CountedPointer< IUnsignedShortArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedShortArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spUnsignedShortArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedShortArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IUnsignedShortArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedShortArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IUnsignedShortArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (SimplygonSDK::IUnsignedShortArray *) &((SimplygonSDK::CountedPointer< IUnsignedShortArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedShortArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IUnsignedShortArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (SimplygonSDK::IUnsignedShortArray *)((SimplygonSDK::CountedPointer< IUnsignedShortArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedShortArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IUnsignedShortArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (SimplygonSDK::IUnsignedShortArray *)((SimplygonSDK::CountedPointer< IUnsignedShortArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spUnsignedShortArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedShortArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedShortArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedShortArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IUnsignedShortArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IUnsignedShortArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_GetData__SWIG_0(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IUnsignedShortData *arg2 = (SimplygonSDK::IUnsignedShortData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IUnsignedShortData *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_GetData__SWIG_1(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  (*arg1)->GetData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_GetTuple__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IUnsignedShortData *arg3 = (SimplygonSDK::IUnsignedShortData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IUnsignedShortData *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_GetTuple__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  (*arg1)->GetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_GetDataRange__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  SimplygonSDK::IUnsignedShortData *arg4 = (SimplygonSDK::IUnsignedShortData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (SimplygonSDK::IUnsignedShortData *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_GetDataRange__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, void * jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned int arg3 ;
  unsigned short *arg4 = (unsigned short *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned short *)jarg4; 
  (*arg1)->GetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedShortArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_SetData(void * jarg1, void * jarg2, unsigned int jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (*arg1)->SetData(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedShortArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_spUnsignedShortArray_GetItem(void * jarg1, int jarg2) {
  unsigned short jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned short result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (unsigned short)(*arg1)->GetItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedShortArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedShortArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_SetDataRange(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->SetDataRange(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedShortArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_SetTuple(void * jarg1, int jarg2, void * jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  (*arg1)->SetTuple(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedShortArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedShortArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedShortArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUnsignedShortArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedShortArray_GetMaxItemId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxItemId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedShortArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_AddTuple(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  (*arg1)->AddTuple(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedShortArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedShortArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_AddItem(void * jarg1, unsigned short jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  (*arg1)->AddItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_SetItem(void * jarg1, int jarg2, unsigned short jarg3) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned short arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (unsigned short)jarg3; 
  (*arg1)->SetItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedShortArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUnsignedShortArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedShortArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortArray > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedShortData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IUnsignedShortData *arg1 = (SimplygonSDK::IUnsignedShortData *) 0 ;
  SimplygonSDK::CountedPointer< IUnsignedShortData > *result = 0 ;
  
  arg1 = (SimplygonSDK::IUnsignedShortData *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)new SimplygonSDK::CountedPointer< IUnsignedShortData >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedShortData__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortData > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)new SimplygonSDK::CountedPointer< IUnsignedShortData >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUnsignedShortData__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedShortData > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IUnsignedShortData > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedShortData > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedShortData > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)new SimplygonSDK::CountedPointer< IUnsignedShortData >((SimplygonSDK::CountedPointer< SimplygonSDK::IUnsignedShortData > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spUnsignedShortData(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedShortData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedShortData_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IUnsignedShortData > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedShortData___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *) 0 ;
  SimplygonSDK::IUnsignedShortData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)jarg1; 
  result = (SimplygonSDK::IUnsignedShortData *) &((SimplygonSDK::CountedPointer< IUnsignedShortData > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedShortData___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *) 0 ;
  SimplygonSDK::IUnsignedShortData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)jarg1; 
  result = (SimplygonSDK::IUnsignedShortData *)((SimplygonSDK::CountedPointer< IUnsignedShortData > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedShortData_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *) 0 ;
  SimplygonSDK::IUnsignedShortData *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)jarg1; 
  result = (SimplygonSDK::IUnsignedShortData *)((SimplygonSDK::CountedPointer< IUnsignedShortData > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUnsignedShortData_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)jarg1; 
  result = (unsigned short *)(*arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_spUnsignedShortData_GetItem__SWIG_0(void * jarg1, int jarg2) {
  unsigned short jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *) 0 ;
  SimplygonSDK::rid arg2 ;
  unsigned short *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (unsigned short *) &(*arg1)->GetItem(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortData_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedShortData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortData_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IUnsignedShortData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUnsignedShortData_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IUnsignedShortData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUnsignedShortData_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUnsignedShortData > *arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUnsignedShortData > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spValueArray__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IValueArray *arg1 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::CountedPointer< IValueArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::IValueArray *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IValueArray > *)new SimplygonSDK::CountedPointer< IValueArray >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spValueArray__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IValueArray > *)new SimplygonSDK::CountedPointer< IValueArray >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spValueArray__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IValueArray > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IValueArray > *)new SimplygonSDK::CountedPointer< IValueArray >((SimplygonSDK::CountedPointer< SimplygonSDK::IValueArray > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spValueArray(void * jarg1) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spValueArray_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IValueArray > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spValueArray___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IValueArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (SimplygonSDK::IValueArray *) &((SimplygonSDK::CountedPointer< IValueArray > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spValueArray___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IValueArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (SimplygonSDK::IValueArray *)((SimplygonSDK::CountedPointer< IValueArray > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spValueArray_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IValueArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (SimplygonSDK::IValueArray *)((SimplygonSDK::CountedPointer< IValueArray > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spValueArray_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spValueArray_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spValueArray_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spValueArray_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IValueArray *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IValueArray *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_SetItemCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetItemCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spValueArray_GetInterpolateTuples(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (bool)(*arg1)->GetInterpolateTuples();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_SetTupleCount(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleCount(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spValueArray_GetBaseType(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetBaseType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_DeepCopy(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->DeepCopy(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spValueArray_GetTupleSize(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spValueArray_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_CopyCombine3Tuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6, float jarg7, float jarg8) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::rid arg6 ;
  SimplygonSDK::real arg7 ;
  SimplygonSDK::real arg8 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::rid)jarg6; 
  arg7 = (SimplygonSDK::real)jarg7; 
  arg8 = (SimplygonSDK::real)jarg8; 
  (*arg1)->CopyCombine3Tuples(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_CopyCombineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCombineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spValueArray_GetTupleCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (unsigned int)(*arg1)->GetTupleCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_IndexedCopy(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->IndexedCopy(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spValueArray_NewCopy(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  bool arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (*arg1)->NewCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spValueArray_GetMaxTupleId(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTupleId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_CopyRange(void * jarg1, void * jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  unsigned int arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (unsigned int)jarg5; 
  (*arg1)->CopyRange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spValueArray_GetRealItem(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetRealItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_CopyTuple(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  (*arg1)->CopyTuple(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spValueArray_CompareTuples(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  result = (int)(*arg1)->CompareTuples(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_AppendTuples(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  (*arg1)->AppendTuples(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_IndexedCombine(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_SetTupleSize(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (*arg1)->SetTupleSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_CopyCobineTuples(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid arg4 ;
  SimplygonSDK::rid arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (SimplygonSDK::rid)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->CopyCobineTuples(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_ExtractTuples(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IArray *arg2 = (SimplygonSDK::IArray *) 0 ;
  SimplygonSDK::rid arg3 ;
  unsigned int arg4 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IArray *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (*arg1)->ExtractTuples(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_SetAlternativeName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetAlternativeName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spValueArray_GetAlternativeName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (*arg1)->GetAlternativeName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_SetRealItem(void * jarg1, int jarg2, float jarg3) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  (*arg1)->SetRealItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_SetInterpolateTuples(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetInterpolateTuples(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spValueArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_IndexedCombine3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IValueArray *arg2 = (SimplygonSDK::IValueArray *) 0 ;
  SimplygonSDK::IRidArray *arg3 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::IRealArray *arg4 = (SimplygonSDK::IRealArray *) 0 ;
  SimplygonSDK::rid arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IValueArray *)jarg2; 
  arg3 = (SimplygonSDK::IRidArray *)jarg3; 
  arg4 = (SimplygonSDK::IRealArray *)jarg4; 
  arg5 = (SimplygonSDK::rid)jarg5; 
  (*arg1)->IndexedCombine3(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spValueArray_NewPackedCopy(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::IRidArray *arg2 = (SimplygonSDK::IRidArray *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IArray > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::IRidArray *)jarg2; 
  result = (*arg1)->NewPackedCopy(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IArray >((const SimplygonSDK::CountedPointer< SimplygonSDK::IArray > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spValueArray_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spValueArray_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spValueArray_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spValueArray_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IValueArray > *arg1 = (SimplygonSDK::CountedPointer< IValueArray > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IValueArray > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spWavefrontExporter__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IWavefrontExporter *arg1 = (SimplygonSDK::IWavefrontExporter *) 0 ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::IWavefrontExporter *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)new SimplygonSDK::CountedPointer< IWavefrontExporter >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spWavefrontExporter__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)new SimplygonSDK::CountedPointer< IWavefrontExporter >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spWavefrontExporter__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontExporter > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontExporter > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontExporter > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)new SimplygonSDK::CountedPointer< IWavefrontExporter >((SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontExporter > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spWavefrontExporter(void * jarg1) {
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spWavefrontExporter_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IWavefrontExporter > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontExporter___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::IWavefrontExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  result = (SimplygonSDK::IWavefrontExporter *) &((SimplygonSDK::CountedPointer< IWavefrontExporter > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontExporter___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::IWavefrontExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  result = (SimplygonSDK::IWavefrontExporter *)((SimplygonSDK::CountedPointer< IWavefrontExporter > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontExporter_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::IWavefrontExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  result = (SimplygonSDK::IWavefrontExporter *)((SimplygonSDK::CountedPointer< IWavefrontExporter > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spWavefrontExporter_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spWavefrontExporter_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spWavefrontExporter_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontExporter_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IWavefrontExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IWavefrontExporter *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontExporter_SetGeometries(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::IGeometryDataCollection *arg2 = (SimplygonSDK::IGeometryDataCollection *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryDataCollection *)jarg2; 
  (*arg1)->SetGeometries(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spWavefrontExporter_RunExport(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  result = (bool)(*arg1)->RunExport();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontExporter_SetMaterialFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetMaterialFilePath((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontExporter_GetExportFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  result = (*arg1)->GetExportFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontExporter_GetMaterialFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  result = (*arg1)->GetMaterialFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontExporter_SetSingleGeometry(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->SetSingleGeometry(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontExporter_SetExportFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetExportFilePath((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontExporter_SetMaterials(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::IMaterialTable *arg2 = (SimplygonSDK::IMaterialTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterialTable *)jarg2; 
  (*arg1)->SetMaterials(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontExporter_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontExporter_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontExporter_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontExporter_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontExporter_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spWavefrontExporter_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontExporter_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontExporter_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontExporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spWavefrontImporter__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IWavefrontImporter *arg1 = (SimplygonSDK::IWavefrontImporter *) 0 ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::IWavefrontImporter *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)new SimplygonSDK::CountedPointer< IWavefrontImporter >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spWavefrontImporter__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)new SimplygonSDK::CountedPointer< IWavefrontImporter >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spWavefrontImporter__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontImporter > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontImporter > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontImporter > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)new SimplygonSDK::CountedPointer< IWavefrontImporter >((SimplygonSDK::CountedPointer< SimplygonSDK::IWavefrontImporter > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spWavefrontImporter(void * jarg1) {
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spWavefrontImporter_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IWavefrontImporter > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontImporter___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::IWavefrontImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (SimplygonSDK::IWavefrontImporter *) &((SimplygonSDK::CountedPointer< IWavefrontImporter > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontImporter___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::IWavefrontImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (SimplygonSDK::IWavefrontImporter *)((SimplygonSDK::CountedPointer< IWavefrontImporter > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontImporter_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::IWavefrontImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (SimplygonSDK::IWavefrontImporter *)((SimplygonSDK::CountedPointer< IWavefrontImporter > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spWavefrontImporter_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spWavefrontImporter_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spWavefrontImporter_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontImporter_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IWavefrontImporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IWavefrontImporter *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontImporter_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontImporter_SetMaterialFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetMaterialFilePath((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spWavefrontImporter_GetExtractGroups(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (bool)(*arg1)->GetExtractGroups();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontImporter_GetGeometries(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (*arg1)->GetGeometries();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryDataCollection > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontImporter_GetFirstGeometry(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (*arg1)->GetFirstGeometry();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontImporter_SetExtractGroups(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetExtractGroups(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontImporter_GetImportFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (*arg1)->GetImportFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontImporter_GetMaterials(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (*arg1)->GetMaterials();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontImporter_SetAlphaAsOpacity(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetAlphaAsOpacity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spWavefrontImporter_RunImport(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (bool)(*arg1)->RunImport();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spWavefrontImporter_GetAlphaAsOpacity(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (bool)(*arg1)->GetAlphaAsOpacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontImporter_SetImportFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetImportFilePath((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontImporter_GetMaterialFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (*arg1)->GetMaterialFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontImporter_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontImporter_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontImporter_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontImporter_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontImporter_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spWavefrontImporter_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spWavefrontImporter_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spWavefrontImporter_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IWavefrontImporter > *arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IWavefrontImporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spVertexColorBaker__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IVertexColorBaker *arg1 = (SimplygonSDK::IVertexColorBaker *) 0 ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *result = 0 ;
  
  arg1 = (SimplygonSDK::IVertexColorBaker *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)new SimplygonSDK::CountedPointer< IVertexColorBaker >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spVertexColorBaker__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)new SimplygonSDK::CountedPointer< IVertexColorBaker >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spVertexColorBaker__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IVertexColorBaker > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IVertexColorBaker > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IVertexColorBaker > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)new SimplygonSDK::CountedPointer< IVertexColorBaker >((SimplygonSDK::CountedPointer< SimplygonSDK::IVertexColorBaker > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spVertexColorBaker(void * jarg1) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spVertexColorBaker_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IVertexColorBaker > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVertexColorBaker___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::IVertexColorBaker *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  result = (SimplygonSDK::IVertexColorBaker *) &((SimplygonSDK::CountedPointer< IVertexColorBaker > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVertexColorBaker___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::IVertexColorBaker *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  result = (SimplygonSDK::IVertexColorBaker *)((SimplygonSDK::CountedPointer< IVertexColorBaker > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVertexColorBaker_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::IVertexColorBaker *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  result = (SimplygonSDK::IVertexColorBaker *)((SimplygonSDK::CountedPointer< IVertexColorBaker > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spVertexColorBaker_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spVertexColorBaker_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spVertexColorBaker_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVertexColorBaker_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IVertexColorBaker *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IVertexColorBaker *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVertexColorBaker_GetInputChannelName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  result = (*arg1)->GetInputChannelName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_SetMappingImage(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::IMappingImage *arg2 = (SimplygonSDK::IMappingImage *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (SimplygonSDK::IMappingImage *)jarg2; 
  (*arg1)->SetMappingImage(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVertexColorBaker_GetSceneRoot(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  result = (*arg1)->GetSceneRoot();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVertexColorBaker_GetMappingImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  result = (*arg1)->GetMappingImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_SetSourceTextures(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::ITextureTable *arg2 = (SimplygonSDK::ITextureTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (SimplygonSDK::ITextureTable *)jarg2; 
  (*arg1)->SetSourceTextures(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_SetColorSpaceEdgeThreshold(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetColorSpaceEdgeThreshold(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spVertexColorBaker_GetColorSpaceEdgeThreshold(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetColorSpaceEdgeThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_SetOutputColorLevel(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetOutputColorLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_Bake(void * jarg1) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  (*arg1)->Bake();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_SetMaterialTable(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::IMaterialTable *arg2 = (SimplygonSDK::IMaterialTable *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (SimplygonSDK::IMaterialTable *)jarg2; 
  (*arg1)->SetMaterialTable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_SetChannelName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetChannelName((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_spVertexColorBaker_GetOutputColorLevel(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetOutputColorLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVertexColorBaker_GetMaterialTable(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  result = (*arg1)->GetMaterialTable();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMaterialTable > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVertexColorBaker_GetSourceTextures(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  result = (*arg1)->GetSourceTextures();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable >((const SimplygonSDK::CountedPointer< SimplygonSDK::ITextureTable > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_SetSceneRoot(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->SetSceneRoot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVertexColorBaker_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spVertexColorBaker_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVertexColorBaker_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVertexColorBaker_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVertexColorBaker > *arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVertexColorBaker > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spVisibilitySettings__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IVisibilitySettings *arg1 = (SimplygonSDK::IVisibilitySettings *) 0 ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::IVisibilitySettings *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)new SimplygonSDK::CountedPointer< IVisibilitySettings >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spVisibilitySettings__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)new SimplygonSDK::CountedPointer< IVisibilitySettings >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spVisibilitySettings__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)new SimplygonSDK::CountedPointer< IVisibilitySettings >((SimplygonSDK::CountedPointer< SimplygonSDK::IVisibilitySettings > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spVisibilitySettings(void * jarg1) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spVisibilitySettings_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IVisibilitySettings > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVisibilitySettings___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::IVisibilitySettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  result = (SimplygonSDK::IVisibilitySettings *) &((SimplygonSDK::CountedPointer< IVisibilitySettings > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVisibilitySettings___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::IVisibilitySettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  result = (SimplygonSDK::IVisibilitySettings *)((SimplygonSDK::CountedPointer< IVisibilitySettings > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVisibilitySettings_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::IVisibilitySettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  result = (SimplygonSDK::IVisibilitySettings *)((SimplygonSDK::CountedPointer< IVisibilitySettings > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spVisibilitySettings_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spVisibilitySettings_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spVisibilitySettings_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVisibilitySettings_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IVisibilitySettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IVisibilitySettings *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_SetCustomSphereCameraPath(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  (*arg1)->SetCustomSphereCameraPath(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_SetDefaultCameraPath(void * jarg1) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  (*arg1)->SetDefaultCameraPath();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spVisibilitySettings_GetUseVisibilityWeightsInTexcoordGenerator(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  result = (bool)(*arg1)->GetUseVisibilityWeightsInTexcoordGenerator();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_SetVisibilityWeightsPower(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetVisibilityWeightsPower(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_SetUseVisibilityWeightsInReducer(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseVisibilityWeightsInReducer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_AddOccluder(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->AddOccluder(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_SetCameraPath(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::ICameraPath *arg2 = (SimplygonSDK::ICameraPath *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = (SimplygonSDK::ICameraPath *)jarg2; 
  (*arg1)->SetCameraPath(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spVisibilitySettings_GetUseVisibilityWeightsInReducer(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  result = (bool)(*arg1)->GetUseVisibilityWeightsInReducer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spVisibilitySettings_GetVisibilityWeightsPower(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetVisibilityWeightsPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_SetUseVisibilityWeightsInTexcoordGenerator(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseVisibilityWeightsInTexcoordGenerator(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_SetCullOccludedGeometry(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetCullOccludedGeometry(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spVisibilitySettings_GetCullOccludedGeometry(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  result = (bool)(*arg1)->GetCullOccludedGeometry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_SetForceVisibilityCalculation(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetForceVisibilityCalculation(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spVisibilitySettings_GetForceVisibilityCalculation(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  result = (bool)(*arg1)->GetForceVisibilityCalculation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_SetIsBackfaceCullingEnabled(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetIsBackfaceCullingEnabled(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spVisibilitySettings_GetIsBackfaceCullingEnabled(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  result = (bool)(*arg1)->GetIsBackfaceCullingEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVisibilitySettings_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spVisibilitySettings_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spVisibilitySettings_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spVisibilitySettings_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IVisibilitySettings > *arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IVisibilitySettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spString__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IString *arg1 = (SimplygonSDK::IString *) 0 ;
  SimplygonSDK::CountedPointer< IString > *result = 0 ;
  
  arg1 = (SimplygonSDK::IString *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IString > *)new SimplygonSDK::CountedPointer< IString >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spString__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IString > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IString > *)new SimplygonSDK::CountedPointer< IString >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spString__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IString > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IString > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IString > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IString > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IString > *)new SimplygonSDK::CountedPointer< IString >((SimplygonSDK::CountedPointer< SimplygonSDK::IString > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spString(void * jarg1) {
  SimplygonSDK::CountedPointer< IString > *arg1 = (SimplygonSDK::CountedPointer< IString > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IString > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spString_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IString > *arg1 = (SimplygonSDK::CountedPointer< IString > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IString > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IString > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spString___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IString > *arg1 = (SimplygonSDK::CountedPointer< IString > *) 0 ;
  SimplygonSDK::IString *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IString > *)jarg1; 
  result = (SimplygonSDK::IString *) &((SimplygonSDK::CountedPointer< IString > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spString___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IString > *arg1 = (SimplygonSDK::CountedPointer< IString > *) 0 ;
  SimplygonSDK::IString *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IString > *)jarg1; 
  result = (SimplygonSDK::IString *)((SimplygonSDK::CountedPointer< IString > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spString_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IString > *arg1 = (SimplygonSDK::CountedPointer< IString > *) 0 ;
  SimplygonSDK::IString *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IString > *)jarg1; 
  result = (SimplygonSDK::IString *)((SimplygonSDK::CountedPointer< IString > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spString_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IString > *arg1 = (SimplygonSDK::CountedPointer< IString > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IString > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spString_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IString > *arg1 = (SimplygonSDK::CountedPointer< IString > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IString > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spString_GetText(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IString > *arg1 = (SimplygonSDK::CountedPointer< IString > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IString > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetText();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spString_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IString > *arg1 = (SimplygonSDK::CountedPointer< IString > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IString > *)jarg1; 
  result = (bool)(*arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImpostorProcessor__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IImpostorProcessor *arg1 = (SimplygonSDK::IImpostorProcessor *) 0 ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *result = 0 ;
  
  arg1 = (SimplygonSDK::IImpostorProcessor *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)new SimplygonSDK::CountedPointer< IImpostorProcessor >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImpostorProcessor__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)new SimplygonSDK::CountedPointer< IImpostorProcessor >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImpostorProcessor__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorProcessor > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorProcessor > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorProcessor > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)new SimplygonSDK::CountedPointer< IImpostorProcessor >((SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorProcessor > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spImpostorProcessor(void * jarg1) {
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImpostorProcessor_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IImpostorProcessor > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorProcessor___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::IImpostorProcessor *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  result = (SimplygonSDK::IImpostorProcessor *) &((SimplygonSDK::CountedPointer< IImpostorProcessor > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorProcessor___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::IImpostorProcessor *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  result = (SimplygonSDK::IImpostorProcessor *)((SimplygonSDK::CountedPointer< IImpostorProcessor > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorProcessor_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::IImpostorProcessor *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  result = (SimplygonSDK::IImpostorProcessor *)((SimplygonSDK::CountedPointer< IImpostorProcessor > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spImpostorProcessor_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImpostorProcessor_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImpostorProcessor_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorProcessor_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IImpostorProcessor *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IImpostorProcessor *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorProcessor_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorProcessor_GetImpostorSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorSettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  result = (*arg1)->GetImpostorSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorSettings > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorProcessor_GetImpostorGeometry(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  result = (*arg1)->GetImpostorGeometry();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorProcessor_RunProcessing(void * jarg1) {
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  (*arg1)->RunProcessing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorProcessor_SetGeometry(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->SetGeometry(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorProcessor_SetSceneRoot(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->SetSceneRoot(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorProcessor_GetMappingImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  result = (*arg1)->GetMappingImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorProcessor_GetMappingImageSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  result = (*arg1)->GetMappingImageSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorProcessor_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorProcessor_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorProcessor_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorProcessor_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorProcessor_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spImpostorProcessor_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorProcessor_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorProcessor_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorProcessor > *arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorProcessor > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImpostorSettings__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IImpostorSettings *arg1 = (SimplygonSDK::IImpostorSettings *) 0 ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::IImpostorSettings *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IImpostorSettings > *)new SimplygonSDK::CountedPointer< IImpostorSettings >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImpostorSettings__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IImpostorSettings > *)new SimplygonSDK::CountedPointer< IImpostorSettings >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImpostorSettings__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorSettings > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorSettings > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorSettings > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IImpostorSettings > *)new SimplygonSDK::CountedPointer< IImpostorSettings >((SimplygonSDK::CountedPointer< SimplygonSDK::IImpostorSettings > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spImpostorSettings(void * jarg1) {
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImpostorSettings_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IImpostorSettings > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorSettings___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::IImpostorSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  result = (SimplygonSDK::IImpostorSettings *) &((SimplygonSDK::CountedPointer< IImpostorSettings > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorSettings___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::IImpostorSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  result = (SimplygonSDK::IImpostorSettings *)((SimplygonSDK::CountedPointer< IImpostorSettings > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorSettings_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::IImpostorSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  result = (SimplygonSDK::IImpostorSettings *)((SimplygonSDK::CountedPointer< IImpostorSettings > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spImpostorSettings_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImpostorSettings_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImpostorSettings_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorSettings_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IImpostorSettings *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IImpostorSettings *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorSettings_SetUseTightFitting(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetUseTightFitting(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorSettings_GetViewDirection(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->GetViewDirection(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImpostorSettings_GetUseTightFitting(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  result = (bool)(*arg1)->GetUseTightFitting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorSettings_SetViewDirection(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::real *arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::real *)jarg2; 
  (*arg1)->SetViewDirection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorSettings_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorSettings_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorSettings_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorSettings_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorSettings_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spImpostorSettings_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImpostorSettings_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImpostorSettings_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImpostorSettings > *arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImpostorSettings > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSurfaceMapper__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::ISurfaceMapper *arg1 = (SimplygonSDK::ISurfaceMapper *) 0 ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *result = 0 ;
  
  arg1 = (SimplygonSDK::ISurfaceMapper *)jarg1; 
  result = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)new SimplygonSDK::CountedPointer< ISurfaceMapper >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSurfaceMapper__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)new SimplygonSDK::CountedPointer< ISurfaceMapper >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spSurfaceMapper__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISurfaceMapper > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::ISurfaceMapper > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::ISurfaceMapper > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)new SimplygonSDK::CountedPointer< ISurfaceMapper >((SimplygonSDK::CountedPointer< SimplygonSDK::ISurfaceMapper > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spSurfaceMapper(void * jarg1) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSurfaceMapper_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< ISurfaceMapper > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSurfaceMapper___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::ISurfaceMapper *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (SimplygonSDK::ISurfaceMapper *) &((SimplygonSDK::CountedPointer< ISurfaceMapper > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSurfaceMapper___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::ISurfaceMapper *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (SimplygonSDK::ISurfaceMapper *)((SimplygonSDK::CountedPointer< ISurfaceMapper > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSurfaceMapper_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::ISurfaceMapper *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (SimplygonSDK::ISurfaceMapper *)((SimplygonSDK::CountedPointer< ISurfaceMapper > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spSurfaceMapper_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSurfaceMapper_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSurfaceMapper_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSurfaceMapper_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::ISurfaceMapper *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::ISurfaceMapper *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_SetDestinationTexCoordSet(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->SetDestinationTexCoordSet(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_SetSearchDirectionHardEdgeAngle(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetSearchDirectionHardEdgeAngle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_SetDestinationSceneRoot(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->SetDestinationSceneRoot(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spSurfaceMapper_GetRecalculateSearchDirection(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (bool)(*arg1)->GetRecalculateSearchDirection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSurfaceMapper_GetDestinationGeometry(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (*arg1)->GetDestinationGeometry();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSurfaceMapper_GetMappingImageSettings(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (*arg1)->GetMappingImageSettings();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImageSettings > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_SetRecalculateSearchDirection(void * jarg1, unsigned int jarg2) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  bool arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (*arg1)->SetRecalculateSearchDirection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_SetSearchOffset(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetSearchOffset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_SetSearchDistance(void * jarg1, float jarg2) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::real arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::real)jarg2; 
  (*arg1)->SetSearchDistance(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spSurfaceMapper_GetSearchDirectionHardEdgeAngle(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetSearchDirectionHardEdgeAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSurfaceMapper_GetDestinationTexCoordSet(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetDestinationTexCoordSet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spSurfaceMapper_GetSearchDistance(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetSearchDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spSurfaceMapper_GetSearchOffset(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetSearchOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSurfaceMapper_GetMappingImage(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (*arg1)->GetMappingImage();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage >((const SimplygonSDK::CountedPointer< SimplygonSDK::IMappingImage > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_RunSurfaceMapping(void * jarg1) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  (*arg1)->RunSurfaceMapping();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_SetSourceSceneRoot(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::ISceneNode *arg2 = (SimplygonSDK::ISceneNode *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::ISceneNode *)jarg2; 
  (*arg1)->SetSourceSceneRoot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_SetSourceGeometry(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->SetSourceGeometry(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSurfaceMapper_GetSourceSceneRoot(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (*arg1)->GetSourceSceneRoot();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSurfaceMapper_GetDestinationSceneRoot(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (*arg1)->GetDestinationSceneRoot();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::ISceneNode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSurfaceMapper_GetSourceGeometry(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (*arg1)->GetSourceGeometry();
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData >((const SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryData > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_SetDestinationGeometry(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->SetDestinationGeometry(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSurfaceMapper_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spSurfaceMapper_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spSurfaceMapper_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spSurfaceMapper_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< ISurfaceMapper > *arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< ISurfaceMapper > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingStepNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingStepNode *arg1 = (SimplygonSDK::IShadingStepNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingStepNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingStepNode > *)new SimplygonSDK::CountedPointer< IShadingStepNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingStepNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingStepNode > *)new SimplygonSDK::CountedPointer< IShadingStepNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingStepNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingStepNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingStepNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingStepNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingStepNode > *)new SimplygonSDK::CountedPointer< IShadingStepNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingStepNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingStepNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingStepNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingStepNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingStepNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::IShadingStepNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  result = (SimplygonSDK::IShadingStepNode *) &((SimplygonSDK::CountedPointer< IShadingStepNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingStepNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::IShadingStepNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  result = (SimplygonSDK::IShadingStepNode *)((SimplygonSDK::CountedPointer< IShadingStepNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingStepNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::IShadingStepNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  result = (SimplygonSDK::IShadingStepNode *)((SimplygonSDK::CountedPointer< IShadingStepNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingStepNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingStepNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingStepNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingStepNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingStepNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingStepNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingStepNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingStepNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingStepNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingStepNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingStepNode_GetParameterIsInputable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->GetParameterIsInputable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingStepNode_GetInput(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetInput(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingStepNode_SetInput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IShadingNode *arg3 = (SimplygonSDK::IShadingNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IShadingNode *)jarg3; 
  result = (bool)(*arg1)->SetInput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingStepNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingStepNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingStepNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingStepNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingStepNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingStepNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingStepNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingStepNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingStepNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingStepNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingStepNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingStepNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingStepNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingMinNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingMinNode *arg1 = (SimplygonSDK::IShadingMinNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingMinNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingMinNode > *)new SimplygonSDK::CountedPointer< IShadingMinNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingMinNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingMinNode > *)new SimplygonSDK::CountedPointer< IShadingMinNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingMinNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMinNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMinNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMinNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingMinNode > *)new SimplygonSDK::CountedPointer< IShadingMinNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMinNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingMinNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMinNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingMinNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMinNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::IShadingMinNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  result = (SimplygonSDK::IShadingMinNode *) &((SimplygonSDK::CountedPointer< IShadingMinNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMinNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::IShadingMinNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  result = (SimplygonSDK::IShadingMinNode *)((SimplygonSDK::CountedPointer< IShadingMinNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMinNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::IShadingMinNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  result = (SimplygonSDK::IShadingMinNode *)((SimplygonSDK::CountedPointer< IShadingMinNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingMinNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMinNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMinNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMinNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingMinNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingMinNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingMinNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMinNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingMinNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingMinNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMinNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMinNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingMinNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMinNode_SetInput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IShadingNode *arg3 = (SimplygonSDK::IShadingNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IShadingNode *)jarg3; 
  result = (bool)(*arg1)->SetInput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMinNode_GetInput(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetInput(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMinNode_GetParameterIsInputable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->GetParameterIsInputable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMinNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMinNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMinNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMinNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMinNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingMinNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMinNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMinNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMinNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMinNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingMaxNode__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IShadingMaxNode *arg1 = (SimplygonSDK::IShadingMaxNode *) 0 ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::IShadingMaxNode *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)new SimplygonSDK::CountedPointer< IShadingMaxNode >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingMaxNode__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)new SimplygonSDK::CountedPointer< IShadingMaxNode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spShadingMaxNode__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMaxNode > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMaxNode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMaxNode > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)new SimplygonSDK::CountedPointer< IShadingMaxNode >((SimplygonSDK::CountedPointer< SimplygonSDK::IShadingMaxNode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spShadingMaxNode(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMaxNode_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IShadingMaxNode > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMaxNode___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::IShadingMaxNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  result = (SimplygonSDK::IShadingMaxNode *) &((SimplygonSDK::CountedPointer< IShadingMaxNode > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMaxNode___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::IShadingMaxNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  result = (SimplygonSDK::IShadingMaxNode *)((SimplygonSDK::CountedPointer< IShadingMaxNode > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMaxNode_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::IShadingMaxNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  result = (SimplygonSDK::IShadingMaxNode *)((SimplygonSDK::CountedPointer< IShadingMaxNode > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spShadingMaxNode_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMaxNode_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMaxNode_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMaxNode_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IShadingMaxNode *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IShadingMaxNode *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMaxNode_GetParameterName(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetParameterName(arg2);
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingMaxNode_GetDefaultParameterGreen(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterGreen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingMaxNode_GetDefaultParameterBlue(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterBlue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMaxNode_SetInput(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::IShadingNode *arg3 = (SimplygonSDK::IShadingNode *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::IShadingNode *)jarg3; 
  result = (bool)(*arg1)->SetInput(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingMaxNode_GetDefaultParameterAlpha(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMaxNode_GetInput(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (*arg1)->GetInput(arg2);
  jresult = new SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode >((const SimplygonSDK::CountedPointer< SimplygonSDK::IShadingNode > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMaxNode_GetParameterCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  result = (unsigned int)(*arg1)->GetParameterCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spShadingMaxNode_GetParameterIsInputable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (bool)(*arg1)->GetParameterIsInputable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMaxNode_SetDefaultParameter(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real arg3 ;
  SimplygonSDK::real arg4 ;
  SimplygonSDK::real arg5 ;
  SimplygonSDK::real arg6 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  arg3 = (SimplygonSDK::real)jarg3; 
  arg4 = (SimplygonSDK::real)jarg4; 
  arg5 = (SimplygonSDK::real)jarg5; 
  arg6 = (SimplygonSDK::real)jarg6; 
  (*arg1)->SetDefaultParameter(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spShadingMaxNode_GetDefaultParameterRed(void * jarg1, int jarg2) {
  float jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (SimplygonSDK::real)(*arg1)->GetDefaultParameterRed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMaxNode_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMaxNode_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMaxNode_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMaxNode_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMaxNode_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spShadingMaxNode_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spShadingMaxNode_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spShadingMaxNode_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IShadingMaxNode > *arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IShadingMaxNode > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spNormalAnalyzer__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::INormalAnalyzer *arg1 = (SimplygonSDK::INormalAnalyzer *) 0 ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *result = 0 ;
  
  arg1 = (SimplygonSDK::INormalAnalyzer *)jarg1; 
  result = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)new SimplygonSDK::CountedPointer< INormalAnalyzer >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spNormalAnalyzer__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)new SimplygonSDK::CountedPointer< INormalAnalyzer >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spNormalAnalyzer__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::INormalAnalyzer > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::INormalAnalyzer > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::INormalAnalyzer > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)new SimplygonSDK::CountedPointer< INormalAnalyzer >((SimplygonSDK::CountedPointer< SimplygonSDK::INormalAnalyzer > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spNormalAnalyzer(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalAnalyzer_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< INormalAnalyzer > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalAnalyzer___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::INormalAnalyzer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  result = (SimplygonSDK::INormalAnalyzer *) &((SimplygonSDK::CountedPointer< INormalAnalyzer > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalAnalyzer___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::INormalAnalyzer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  result = (SimplygonSDK::INormalAnalyzer *)((SimplygonSDK::CountedPointer< INormalAnalyzer > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalAnalyzer_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::INormalAnalyzer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  result = (SimplygonSDK::INormalAnalyzer *)((SimplygonSDK::CountedPointer< INormalAnalyzer > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spNormalAnalyzer_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalAnalyzer_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalAnalyzer_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalAnalyzer_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::INormalAnalyzer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::INormalAnalyzer *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalAnalyzer_GetNonUnitLenghtNormalsCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  result = (unsigned int)(*arg1)->GetNonUnitLenghtNormalsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spNormalAnalyzer_GetLargestTangentSpaceOrthogonalDeviation(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetLargestTangentSpaceOrthogonalDeviation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spNormalAnalyzer_GetMeanTangentSpaceOrthogonalDeviation(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMeanTangentSpaceOrthogonalDeviation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalAnalyzer_AnalyzeTangentSpace(void * jarg1, void * jarg2, int jarg3) {
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rid arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  (*arg1)->AnalyzeTangentSpace(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalAnalyzer_AnalyzeNormals(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->AnalyzeNormals(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spNormalAnalyzer_GetBackfacingNormalsCount(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  unsigned int result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  result = (unsigned int)(*arg1)->GetBackfacingNormalsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalAnalyzer_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalAnalyzer_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalAnalyzer_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalAnalyzer_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalAnalyzer_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spNormalAnalyzer_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spNormalAnalyzer_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spNormalAnalyzer_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< INormalAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< INormalAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImageDataExporter__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IImageDataExporter *arg1 = (SimplygonSDK::IImageDataExporter *) 0 ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::IImageDataExporter *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IImageDataExporter > *)new SimplygonSDK::CountedPointer< IImageDataExporter >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImageDataExporter__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IImageDataExporter > *)new SimplygonSDK::CountedPointer< IImageDataExporter >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spImageDataExporter__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataExporter > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataExporter > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataExporter > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IImageDataExporter > *)new SimplygonSDK::CountedPointer< IImageDataExporter >((SimplygonSDK::CountedPointer< SimplygonSDK::IImageDataExporter > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spImageDataExporter(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataExporter_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IImageDataExporter > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataExporter___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::IImageDataExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  result = (SimplygonSDK::IImageDataExporter *) &((SimplygonSDK::CountedPointer< IImageDataExporter > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataExporter___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::IImageDataExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  result = (SimplygonSDK::IImageDataExporter *)((SimplygonSDK::CountedPointer< IImageDataExporter > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataExporter_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::IImageDataExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  result = (SimplygonSDK::IImageDataExporter *)((SimplygonSDK::CountedPointer< IImageDataExporter > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spImageDataExporter_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataExporter_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataExporter_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataExporter_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IImageDataExporter *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IImageDataExporter *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spImageDataExporter_RunExport(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  result = (bool)(*arg1)->RunExport();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataExporter_SetImage(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::IImageData *arg2 = (SimplygonSDK::IImageData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  arg2 = (SimplygonSDK::IImageData *)jarg2; 
  (*arg1)->SetImage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataExporter_Clear(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  (*arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataExporter_SetExportFilePath(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  arg2 = (char *)jarg2; 
  (*arg1)->SetExportFilePath((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataExporter_GetExportFilePath(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  result = (*arg1)->GetExportFilePath();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataExporter_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataExporter_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataExporter_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataExporter_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataExporter_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spImageDataExporter_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spImageDataExporter_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spImageDataExporter_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IImageDataExporter > *arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IImageDataExporter > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryAnalyzer__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IGeometryAnalyzer *arg1 = (SimplygonSDK::IGeometryAnalyzer *) 0 ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *result = 0 ;
  
  arg1 = (SimplygonSDK::IGeometryAnalyzer *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)new SimplygonSDK::CountedPointer< IGeometryAnalyzer >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryAnalyzer__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)new SimplygonSDK::CountedPointer< IGeometryAnalyzer >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spGeometryAnalyzer__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryAnalyzer > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryAnalyzer > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryAnalyzer > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)new SimplygonSDK::CountedPointer< IGeometryAnalyzer >((SimplygonSDK::CountedPointer< SimplygonSDK::IGeometryAnalyzer > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spGeometryAnalyzer(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryAnalyzer_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IGeometryAnalyzer > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryAnalyzer___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  SimplygonSDK::IGeometryAnalyzer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  result = (SimplygonSDK::IGeometryAnalyzer *) &((SimplygonSDK::CountedPointer< IGeometryAnalyzer > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryAnalyzer___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  SimplygonSDK::IGeometryAnalyzer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  result = (SimplygonSDK::IGeometryAnalyzer *)((SimplygonSDK::CountedPointer< IGeometryAnalyzer > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryAnalyzer_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  SimplygonSDK::IGeometryAnalyzer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  result = (SimplygonSDK::IGeometryAnalyzer *)((SimplygonSDK::CountedPointer< IGeometryAnalyzer > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spGeometryAnalyzer_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryAnalyzer_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spGeometryAnalyzer_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryAnalyzer_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IGeometryAnalyzer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IGeometryAnalyzer *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryAnalyzer_AnalyzeGeometry(void * jarg1, void * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  (*arg1)->AnalyzeGeometry(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryAnalyzer_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryAnalyzer_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryAnalyzer_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryAnalyzer_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryAnalyzer_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spGeometryAnalyzer_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spGeometryAnalyzer_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spGeometryAnalyzer_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IGeometryAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IGeometryAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUVAnalyzer__SWIG_0(void * jarg1) {
  void * jresult ;
  SimplygonSDK::IUVAnalyzer *arg1 = (SimplygonSDK::IUVAnalyzer *) 0 ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *result = 0 ;
  
  arg1 = (SimplygonSDK::IUVAnalyzer *)jarg1; 
  result = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)new SimplygonSDK::CountedPointer< IUVAnalyzer >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUVAnalyzer__SWIG_1() {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *result = 0 ;
  
  result = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)new SimplygonSDK::CountedPointer< IUVAnalyzer >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spUVAnalyzer__SWIG_2(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< SimplygonSDK::IUVAnalyzer > *arg1 = 0 ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< SimplygonSDK::IUVAnalyzer > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SimplygonSDK::CountedPointer< SimplygonSDK::IUVAnalyzer > const & type is null", 0);
    return 0;
  } 
  result = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)new SimplygonSDK::CountedPointer< IUVAnalyzer >((SimplygonSDK::CountedPointer< SimplygonSDK::IUVAnalyzer > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spUVAnalyzer(void * jarg1) {
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUVAnalyzer_IsNull(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (bool)((SimplygonSDK::CountedPointer< IUVAnalyzer > const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUVAnalyzer___ref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::IUVAnalyzer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::IUVAnalyzer *) &((SimplygonSDK::CountedPointer< IUVAnalyzer > const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUVAnalyzer___deref__(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::IUVAnalyzer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::IUVAnalyzer *)((SimplygonSDK::CountedPointer< IUVAnalyzer > const *)arg1)->operator ->();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUVAnalyzer_GetPointer(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::IUVAnalyzer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::IUVAnalyzer *)((SimplygonSDK::CountedPointer< IUVAnalyzer > const *)arg1)->GetPointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_spUVAnalyzer_GetClass(void * jarg1) {
  char * jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::rchar *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::rchar *)(*arg1)->GetClass();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUVAnalyzer_IsA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUVAnalyzer_IsClassA(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  result = (bool)(*arg1)->IsClassA((SimplygonSDK::rchar const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUVAnalyzer_SafeCast(void * jarg1, void * jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::IObject *arg2 = (SimplygonSDK::IObject *) 0 ;
  SimplygonSDK::IUVAnalyzer *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::IObject *)jarg2; 
  result = (SimplygonSDK::IUVAnalyzer *)(*arg1)->SafeCast(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMedian2DAreaChart(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMedian2DAreaChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUVAnalyzer_GetMaxTriangleCountInChart(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMaxTriangleCountInChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMin3DAreaChartRatio(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMin3DAreaChartRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetTotal3DChartArea(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetTotal3DChartArea();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMedian3DAreaChartRatio(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMedian3DAreaChartRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMean2DAreaChart(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMean2DAreaChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUVAnalyzer_GetMinTriangleCountInChart(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMinTriangleCountInChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMean3DAreaChart(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMean3DAreaChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUVAnalyzer_AnalyzeUVChannel(void * jarg1, void * jarg2, int jarg3) {
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::IGeometryData *arg2 = (SimplygonSDK::IGeometryData *) 0 ;
  SimplygonSDK::rid arg3 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::IGeometryData *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  (*arg1)->AnalyzeUVChannel(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMaxLargest3D2DEdgeLengthRatioDisparity(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMaxLargest3D2DEdgeLengthRatioDisparity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUVAnalyzer_GetNumberOfChartsWithOverlaps(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  int result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (int)(*arg1)->GetNumberOfChartsWithOverlaps();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetStretch(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetStretch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMean3DAreaChartRatio(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMean3DAreaChartRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMin3DAreaChart(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMin3DAreaChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_spUVAnalyzer_GetChartsAreOverlapping(void * jarg1) {
  unsigned int jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  bool result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (bool)(*arg1)->GetChartsAreOverlapping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMax2DAreaChartRatio(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMax2DAreaChartRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMin2DAreaChartRatio(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMin2DAreaChartRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUVAnalyzer_GetChartCount(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetChartCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMin2DAreaChart(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMin2DAreaChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetTotal2DChartArea(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetTotal2DChartArea();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMedian3DAreaChart(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMedian3DAreaChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMean2DAreaChartRatio(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMean2DAreaChartRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMedianLargest3D2DEdgeLengthRatioDisparity(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMedianLargest3D2DEdgeLengthRatioDisparity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMeanStretchChart(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMeanStretchChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMedianStretchChart(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMedianStretchChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMinLargest3D2DEdgeLengthRatioDisparity(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMinLargest3D2DEdgeLengthRatioDisparity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMax3DAreaChartRatio(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMax3DAreaChartRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMedian2DAreaChartRatio(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMedian2DAreaChartRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMax3DAreaChart(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMax3DAreaChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMeanLargest3D2DEdgeLengthRatioDisparity(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMeanLargest3D2DEdgeLengthRatioDisparity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMeanTrianglesInChart(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMeanTrianglesInChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUVAnalyzer_GetMedianTriangleCountInChart(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetMedianTriangleCountInChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUVAnalyzer_GetNumberOfChartsWithFewTriangles(void * jarg1) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::rid)(*arg1)->GetNumberOfChartsWithFewTriangles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_spUVAnalyzer_GetMax2DAreaChart(void * jarg1) {
  float jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::real result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (SimplygonSDK::real)(*arg1)->GetMax2DAreaChart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUVAnalyzer_PrintInfo(void * jarg1) {
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  (*arg1)->PrintInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUVAnalyzer_AddRef(void * jarg1) {
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  (*arg1)->AddRef();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUVAnalyzer_Release(void * jarg1) {
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  (*arg1)->Release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUVAnalyzer_SetName(void * jarg1, char * jarg2) {
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::rchar *arg2 = (SimplygonSDK::rchar *) 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rchar *)jarg2; 
  (*arg1)->SetName((SimplygonSDK::rchar const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUVAnalyzer_GetName(void * jarg1) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::rstring result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  result = (*arg1)->GetName();
  jresult = new SimplygonSDK::rstring((const SimplygonSDK::rstring &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_spUVAnalyzer_AddObserver(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::robserver *arg2 = (SimplygonSDK::robserver *) 0 ;
  SimplygonSDK::rid arg3 ;
  SimplygonSDK::rid result;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::robserver *)jarg2; 
  arg3 = (SimplygonSDK::rid)jarg3; 
  result = (SimplygonSDK::rid)(*arg1)->AddObserver(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spUVAnalyzer_RemoveObserver(void * jarg1, int jarg2) {
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::rid arg2 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  (*arg1)->RemoveObserver(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spUVAnalyzer_GetUserComponentArea(void * jarg1, int jarg2) {
  void * jresult ;
  SimplygonSDK::CountedPointer< IUVAnalyzer > *arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *) 0 ;
  SimplygonSDK::rid arg2 ;
  void *result = 0 ;
  
  arg1 = (SimplygonSDK::CountedPointer< IUVAnalyzer > *)jarg1; 
  arg2 = (SimplygonSDK::rid)jarg2; 
  result = (void *)(*arg1)->GetUserComponentArea(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddSearchPath(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  SimplygonSDK::AddSearchPath((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClearAdditionalSearchPaths() {
  SimplygonSDK::ClearAdditionalSearchPaths();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Initialize__SWIG_0(char * jarg1, char * jarg2) {
  int jresult ;
  LPCTSTR arg1 = (LPCTSTR) 0 ;
  LPCTSTR arg2 = (LPCTSTR) 0 ;
  int result;
  
  arg1 = (LPCTSTR)jarg1; 
  arg2 = (LPCTSTR)jarg2; 
  result = (int)SimplygonSDK::Initialize(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Initialize__SWIG_1(char * jarg1) {
  int jresult ;
  LPCTSTR arg1 = (LPCTSTR) 0 ;
  int result;
  
  arg1 = (LPCTSTR)jarg1; 
  result = (int)SimplygonSDK::Initialize(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Initialize__SWIG_2() {
  int jresult ;
  int result;
  
  result = (int)SimplygonSDK::Initialize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Deinitialize() {
  SimplygonSDK::Deinitialize();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetError(int jarg1) {
  char * jresult ;
  int arg1 ;
  LPCTSTR result;
  
  arg1 = (int)jarg1; 
  result = (LPCTSTR)SimplygonSDK::GetError(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PollLog(char * jarg1, int jarg2) {
  int jresult ;
  LPTSTR arg1 = (LPTSTR) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (LPTSTR)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)SimplygonSDK::PollLog(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RunLicenseWizard(char * jarg1) {
  int jresult ;
  LPCTSTR arg1 = (LPCTSTR) 0 ;
  int result;
  
  arg1 = (LPCTSTR)jarg1; 
  result = (int)SimplygonSDK::RunLicenseWizard(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetSDK() {
  void * jresult ;
  SimplygonSDK::ISimplygonSDK *result = 0 ;
  
  result = (SimplygonSDK::ISimplygonSDK *)SimplygonSDK::GetSDK();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InitErrorhandling() {
  SimplygonSDK::InitErrorhandling();
}


#ifdef __cplusplus
}
#endif

